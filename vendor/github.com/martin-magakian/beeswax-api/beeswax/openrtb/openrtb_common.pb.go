// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beeswax/openrtb/openrtb_common.proto

package openrtb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// OpenRTB 6.1: IAB contextual taxonomy for categorization.
type ContentCategory int32

const (
	ContentCategory_IAB1     ContentCategory = 1
	ContentCategory_IAB1_1   ContentCategory = 2
	ContentCategory_IAB1_2   ContentCategory = 3
	ContentCategory_IAB1_3   ContentCategory = 4
	ContentCategory_IAB1_4   ContentCategory = 5
	ContentCategory_IAB1_5   ContentCategory = 6
	ContentCategory_IAB1_6   ContentCategory = 7
	ContentCategory_IAB1_7   ContentCategory = 8
	ContentCategory_IAB2     ContentCategory = 9
	ContentCategory_IAB2_1   ContentCategory = 10
	ContentCategory_IAB2_2   ContentCategory = 11
	ContentCategory_IAB2_3   ContentCategory = 12
	ContentCategory_IAB2_4   ContentCategory = 13
	ContentCategory_IAB2_5   ContentCategory = 14
	ContentCategory_IAB2_6   ContentCategory = 15
	ContentCategory_IAB2_7   ContentCategory = 16
	ContentCategory_IAB2_8   ContentCategory = 17
	ContentCategory_IAB2_9   ContentCategory = 18
	ContentCategory_IAB2_10  ContentCategory = 19
	ContentCategory_IAB2_11  ContentCategory = 20
	ContentCategory_IAB2_12  ContentCategory = 21
	ContentCategory_IAB2_13  ContentCategory = 22
	ContentCategory_IAB2_14  ContentCategory = 23
	ContentCategory_IAB2_15  ContentCategory = 24
	ContentCategory_IAB2_16  ContentCategory = 25
	ContentCategory_IAB2_17  ContentCategory = 26
	ContentCategory_IAB2_18  ContentCategory = 27
	ContentCategory_IAB2_19  ContentCategory = 28
	ContentCategory_IAB2_20  ContentCategory = 29
	ContentCategory_IAB2_21  ContentCategory = 30
	ContentCategory_IAB2_22  ContentCategory = 31
	ContentCategory_IAB2_23  ContentCategory = 32
	ContentCategory_IAB3     ContentCategory = 33
	ContentCategory_IAB3_1   ContentCategory = 34
	ContentCategory_IAB3_2   ContentCategory = 35
	ContentCategory_IAB3_3   ContentCategory = 36
	ContentCategory_IAB3_4   ContentCategory = 37
	ContentCategory_IAB3_5   ContentCategory = 38
	ContentCategory_IAB3_6   ContentCategory = 39
	ContentCategory_IAB3_7   ContentCategory = 40
	ContentCategory_IAB3_8   ContentCategory = 41
	ContentCategory_IAB3_9   ContentCategory = 42
	ContentCategory_IAB3_10  ContentCategory = 43
	ContentCategory_IAB3_11  ContentCategory = 44
	ContentCategory_IAB3_12  ContentCategory = 45
	ContentCategory_IAB4     ContentCategory = 46
	ContentCategory_IAB4_1   ContentCategory = 47
	ContentCategory_IAB4_2   ContentCategory = 48
	ContentCategory_IAB4_3   ContentCategory = 49
	ContentCategory_IAB4_4   ContentCategory = 50
	ContentCategory_IAB4_5   ContentCategory = 51
	ContentCategory_IAB4_6   ContentCategory = 52
	ContentCategory_IAB4_7   ContentCategory = 53
	ContentCategory_IAB4_8   ContentCategory = 54
	ContentCategory_IAB4_9   ContentCategory = 55
	ContentCategory_IAB4_10  ContentCategory = 56
	ContentCategory_IAB4_11  ContentCategory = 57
	ContentCategory_IAB5     ContentCategory = 58
	ContentCategory_IAB5_1   ContentCategory = 59
	ContentCategory_IAB5_2   ContentCategory = 60
	ContentCategory_IAB5_3   ContentCategory = 61
	ContentCategory_IAB5_4   ContentCategory = 62
	ContentCategory_IAB5_5   ContentCategory = 63
	ContentCategory_IAB5_6   ContentCategory = 64
	ContentCategory_IAB5_7   ContentCategory = 65
	ContentCategory_IAB5_8   ContentCategory = 66
	ContentCategory_IAB5_9   ContentCategory = 67
	ContentCategory_IAB5_10  ContentCategory = 68
	ContentCategory_IAB5_11  ContentCategory = 69
	ContentCategory_IAB5_12  ContentCategory = 70
	ContentCategory_IAB5_13  ContentCategory = 71
	ContentCategory_IAB5_14  ContentCategory = 72
	ContentCategory_IAB5_15  ContentCategory = 73
	ContentCategory_IAB6     ContentCategory = 74
	ContentCategory_IAB6_1   ContentCategory = 75
	ContentCategory_IAB6_2   ContentCategory = 76
	ContentCategory_IAB6_3   ContentCategory = 77
	ContentCategory_IAB6_4   ContentCategory = 78
	ContentCategory_IAB6_5   ContentCategory = 79
	ContentCategory_IAB6_6   ContentCategory = 80
	ContentCategory_IAB6_7   ContentCategory = 81
	ContentCategory_IAB6_8   ContentCategory = 82
	ContentCategory_IAB6_9   ContentCategory = 83
	ContentCategory_IAB7     ContentCategory = 84
	ContentCategory_IAB7_1   ContentCategory = 85
	ContentCategory_IAB7_2   ContentCategory = 86
	ContentCategory_IAB7_3   ContentCategory = 87
	ContentCategory_IAB7_4   ContentCategory = 88
	ContentCategory_IAB7_5   ContentCategory = 89
	ContentCategory_IAB7_6   ContentCategory = 90
	ContentCategory_IAB7_7   ContentCategory = 91
	ContentCategory_IAB7_8   ContentCategory = 92
	ContentCategory_IAB7_9   ContentCategory = 93
	ContentCategory_IAB7_10  ContentCategory = 94
	ContentCategory_IAB7_11  ContentCategory = 95
	ContentCategory_IAB7_12  ContentCategory = 96
	ContentCategory_IAB7_13  ContentCategory = 97
	ContentCategory_IAB7_14  ContentCategory = 98
	ContentCategory_IAB7_15  ContentCategory = 99
	ContentCategory_IAB7_16  ContentCategory = 100
	ContentCategory_IAB7_17  ContentCategory = 101
	ContentCategory_IAB7_18  ContentCategory = 102
	ContentCategory_IAB7_19  ContentCategory = 103
	ContentCategory_IAB7_20  ContentCategory = 104
	ContentCategory_IAB7_21  ContentCategory = 105
	ContentCategory_IAB7_22  ContentCategory = 106
	ContentCategory_IAB7_23  ContentCategory = 107
	ContentCategory_IAB7_24  ContentCategory = 108
	ContentCategory_IAB7_25  ContentCategory = 109
	ContentCategory_IAB7_26  ContentCategory = 110
	ContentCategory_IAB7_27  ContentCategory = 111
	ContentCategory_IAB7_28  ContentCategory = 112
	ContentCategory_IAB7_29  ContentCategory = 113
	ContentCategory_IAB7_30  ContentCategory = 114
	ContentCategory_IAB7_31  ContentCategory = 115
	ContentCategory_IAB7_32  ContentCategory = 116
	ContentCategory_IAB7_33  ContentCategory = 117
	ContentCategory_IAB7_34  ContentCategory = 118
	ContentCategory_IAB7_35  ContentCategory = 119
	ContentCategory_IAB7_36  ContentCategory = 120
	ContentCategory_IAB7_37  ContentCategory = 121
	ContentCategory_IAB7_38  ContentCategory = 122
	ContentCategory_IAB7_39  ContentCategory = 123
	ContentCategory_IAB7_40  ContentCategory = 124
	ContentCategory_IAB7_41  ContentCategory = 125
	ContentCategory_IAB7_42  ContentCategory = 126
	ContentCategory_IAB7_43  ContentCategory = 127
	ContentCategory_IAB7_44  ContentCategory = 128
	ContentCategory_IAB7_45  ContentCategory = 129
	ContentCategory_IAB8     ContentCategory = 130
	ContentCategory_IAB8_1   ContentCategory = 131
	ContentCategory_IAB8_2   ContentCategory = 132
	ContentCategory_IAB8_3   ContentCategory = 133
	ContentCategory_IAB8_4   ContentCategory = 134
	ContentCategory_IAB8_5   ContentCategory = 135
	ContentCategory_IAB8_6   ContentCategory = 136
	ContentCategory_IAB8_7   ContentCategory = 137
	ContentCategory_IAB8_8   ContentCategory = 138
	ContentCategory_IAB8_9   ContentCategory = 139
	ContentCategory_IAB8_10  ContentCategory = 140
	ContentCategory_IAB8_11  ContentCategory = 141
	ContentCategory_IAB8_12  ContentCategory = 142
	ContentCategory_IAB8_13  ContentCategory = 143
	ContentCategory_IAB8_14  ContentCategory = 144
	ContentCategory_IAB8_15  ContentCategory = 145
	ContentCategory_IAB8_16  ContentCategory = 146
	ContentCategory_IAB8_17  ContentCategory = 147
	ContentCategory_IAB8_18  ContentCategory = 148
	ContentCategory_IAB9     ContentCategory = 149
	ContentCategory_IAB9_1   ContentCategory = 150
	ContentCategory_IAB9_2   ContentCategory = 151
	ContentCategory_IAB9_3   ContentCategory = 152
	ContentCategory_IAB9_4   ContentCategory = 153
	ContentCategory_IAB9_5   ContentCategory = 154
	ContentCategory_IAB9_6   ContentCategory = 155
	ContentCategory_IAB9_7   ContentCategory = 156
	ContentCategory_IAB9_8   ContentCategory = 157
	ContentCategory_IAB9_9   ContentCategory = 158
	ContentCategory_IAB9_10  ContentCategory = 159
	ContentCategory_IAB9_11  ContentCategory = 160
	ContentCategory_IAB9_12  ContentCategory = 161
	ContentCategory_IAB9_13  ContentCategory = 162
	ContentCategory_IAB9_14  ContentCategory = 163
	ContentCategory_IAB9_15  ContentCategory = 164
	ContentCategory_IAB9_16  ContentCategory = 165
	ContentCategory_IAB9_17  ContentCategory = 166
	ContentCategory_IAB9_18  ContentCategory = 167
	ContentCategory_IAB9_19  ContentCategory = 168
	ContentCategory_IAB9_20  ContentCategory = 169
	ContentCategory_IAB9_21  ContentCategory = 170
	ContentCategory_IAB9_22  ContentCategory = 171
	ContentCategory_IAB9_23  ContentCategory = 172
	ContentCategory_IAB9_24  ContentCategory = 173
	ContentCategory_IAB9_25  ContentCategory = 174
	ContentCategory_IAB9_26  ContentCategory = 175
	ContentCategory_IAB9_27  ContentCategory = 176
	ContentCategory_IAB9_28  ContentCategory = 177
	ContentCategory_IAB9_29  ContentCategory = 178
	ContentCategory_IAB9_30  ContentCategory = 179
	ContentCategory_IAB9_31  ContentCategory = 180
	ContentCategory_IAB10    ContentCategory = 181
	ContentCategory_IAB10_1  ContentCategory = 182
	ContentCategory_IAB10_2  ContentCategory = 183
	ContentCategory_IAB10_3  ContentCategory = 184
	ContentCategory_IAB10_4  ContentCategory = 185
	ContentCategory_IAB10_5  ContentCategory = 186
	ContentCategory_IAB10_6  ContentCategory = 187
	ContentCategory_IAB10_7  ContentCategory = 188
	ContentCategory_IAB10_8  ContentCategory = 189
	ContentCategory_IAB10_9  ContentCategory = 190
	ContentCategory_IAB11    ContentCategory = 191
	ContentCategory_IAB11_1  ContentCategory = 192
	ContentCategory_IAB11_2  ContentCategory = 193
	ContentCategory_IAB11_3  ContentCategory = 194
	ContentCategory_IAB11_4  ContentCategory = 195
	ContentCategory_IAB11_5  ContentCategory = 196
	ContentCategory_IAB12    ContentCategory = 197
	ContentCategory_IAB12_1  ContentCategory = 198
	ContentCategory_IAB12_2  ContentCategory = 199
	ContentCategory_IAB12_3  ContentCategory = 200
	ContentCategory_IAB13    ContentCategory = 201
	ContentCategory_IAB13_1  ContentCategory = 202
	ContentCategory_IAB13_2  ContentCategory = 203
	ContentCategory_IAB13_3  ContentCategory = 204
	ContentCategory_IAB13_4  ContentCategory = 205
	ContentCategory_IAB13_5  ContentCategory = 206
	ContentCategory_IAB13_6  ContentCategory = 207
	ContentCategory_IAB13_7  ContentCategory = 208
	ContentCategory_IAB13_8  ContentCategory = 209
	ContentCategory_IAB13_9  ContentCategory = 210
	ContentCategory_IAB13_10 ContentCategory = 211
	ContentCategory_IAB13_11 ContentCategory = 212
	ContentCategory_IAB13_12 ContentCategory = 213
	ContentCategory_IAB14    ContentCategory = 214
	ContentCategory_IAB14_1  ContentCategory = 215
	ContentCategory_IAB14_2  ContentCategory = 216
	ContentCategory_IAB14_3  ContentCategory = 217
	ContentCategory_IAB14_4  ContentCategory = 218
	ContentCategory_IAB14_5  ContentCategory = 219
	ContentCategory_IAB14_6  ContentCategory = 220
	ContentCategory_IAB14_7  ContentCategory = 221
	ContentCategory_IAB14_8  ContentCategory = 222
	ContentCategory_IAB15    ContentCategory = 223
	ContentCategory_IAB15_1  ContentCategory = 224
	ContentCategory_IAB15_2  ContentCategory = 225
	ContentCategory_IAB15_3  ContentCategory = 226
	ContentCategory_IAB15_4  ContentCategory = 227
	ContentCategory_IAB15_5  ContentCategory = 228
	ContentCategory_IAB15_6  ContentCategory = 229
	ContentCategory_IAB15_7  ContentCategory = 230
	ContentCategory_IAB15_8  ContentCategory = 231
	ContentCategory_IAB15_9  ContentCategory = 232
	ContentCategory_IAB15_10 ContentCategory = 233
	ContentCategory_IAB16    ContentCategory = 234
	ContentCategory_IAB16_1  ContentCategory = 235
	ContentCategory_IAB16_2  ContentCategory = 236
	ContentCategory_IAB16_3  ContentCategory = 237
	ContentCategory_IAB16_4  ContentCategory = 238
	ContentCategory_IAB16_5  ContentCategory = 239
	ContentCategory_IAB16_6  ContentCategory = 240
	ContentCategory_IAB16_7  ContentCategory = 241
	ContentCategory_IAB17    ContentCategory = 242
	ContentCategory_IAB17_1  ContentCategory = 243
	ContentCategory_IAB17_2  ContentCategory = 244
	ContentCategory_IAB17_3  ContentCategory = 245
	ContentCategory_IAB17_4  ContentCategory = 246
	ContentCategory_IAB17_5  ContentCategory = 247
	ContentCategory_IAB17_6  ContentCategory = 248
	ContentCategory_IAB17_7  ContentCategory = 249
	ContentCategory_IAB17_8  ContentCategory = 250
	ContentCategory_IAB17_9  ContentCategory = 251
	ContentCategory_IAB17_10 ContentCategory = 252
	ContentCategory_IAB17_11 ContentCategory = 253
	ContentCategory_IAB17_12 ContentCategory = 254
	ContentCategory_IAB17_13 ContentCategory = 255
	ContentCategory_IAB17_14 ContentCategory = 256
	ContentCategory_IAB17_15 ContentCategory = 257
	ContentCategory_IAB17_16 ContentCategory = 258
	ContentCategory_IAB17_17 ContentCategory = 259
	ContentCategory_IAB17_18 ContentCategory = 260
	ContentCategory_IAB17_19 ContentCategory = 261
	ContentCategory_IAB17_20 ContentCategory = 262
	ContentCategory_IAB17_21 ContentCategory = 263
	ContentCategory_IAB17_22 ContentCategory = 264
	ContentCategory_IAB17_23 ContentCategory = 265
	ContentCategory_IAB17_24 ContentCategory = 266
	ContentCategory_IAB17_25 ContentCategory = 267
	ContentCategory_IAB17_26 ContentCategory = 268
	ContentCategory_IAB17_27 ContentCategory = 269
	ContentCategory_IAB17_28 ContentCategory = 270
	ContentCategory_IAB17_29 ContentCategory = 271
	ContentCategory_IAB17_30 ContentCategory = 272
	ContentCategory_IAB17_31 ContentCategory = 273
	ContentCategory_IAB17_32 ContentCategory = 274
	ContentCategory_IAB17_33 ContentCategory = 275
	ContentCategory_IAB17_34 ContentCategory = 276
	ContentCategory_IAB17_35 ContentCategory = 277
	ContentCategory_IAB17_36 ContentCategory = 278
	ContentCategory_IAB17_37 ContentCategory = 279
	ContentCategory_IAB17_38 ContentCategory = 280
	ContentCategory_IAB17_39 ContentCategory = 281
	ContentCategory_IAB17_40 ContentCategory = 282
	ContentCategory_IAB17_41 ContentCategory = 283
	ContentCategory_IAB17_42 ContentCategory = 284
	ContentCategory_IAB17_43 ContentCategory = 285
	ContentCategory_IAB17_44 ContentCategory = 286
	ContentCategory_IAB18    ContentCategory = 287
	ContentCategory_IAB18_1  ContentCategory = 288
	ContentCategory_IAB18_2  ContentCategory = 289
	ContentCategory_IAB18_3  ContentCategory = 290
	ContentCategory_IAB18_4  ContentCategory = 291
	ContentCategory_IAB18_5  ContentCategory = 292
	ContentCategory_IAB18_6  ContentCategory = 293
	ContentCategory_IAB19    ContentCategory = 294
	ContentCategory_IAB19_1  ContentCategory = 295
	ContentCategory_IAB19_2  ContentCategory = 296
	ContentCategory_IAB19_3  ContentCategory = 297
	ContentCategory_IAB19_4  ContentCategory = 298
	ContentCategory_IAB19_5  ContentCategory = 299
	ContentCategory_IAB19_6  ContentCategory = 300
	ContentCategory_IAB19_7  ContentCategory = 301
	ContentCategory_IAB19_8  ContentCategory = 302
	ContentCategory_IAB19_9  ContentCategory = 303
	ContentCategory_IAB19_10 ContentCategory = 304
	ContentCategory_IAB19_11 ContentCategory = 305
	ContentCategory_IAB19_12 ContentCategory = 306
	ContentCategory_IAB19_13 ContentCategory = 307
	ContentCategory_IAB19_14 ContentCategory = 308
	ContentCategory_IAB19_15 ContentCategory = 309
	ContentCategory_IAB19_16 ContentCategory = 310
	ContentCategory_IAB19_17 ContentCategory = 311
	ContentCategory_IAB19_18 ContentCategory = 312
	ContentCategory_IAB19_19 ContentCategory = 313
	ContentCategory_IAB19_20 ContentCategory = 314
	ContentCategory_IAB19_21 ContentCategory = 315
	ContentCategory_IAB19_22 ContentCategory = 316
	ContentCategory_IAB19_23 ContentCategory = 317
	ContentCategory_IAB19_24 ContentCategory = 318
	ContentCategory_IAB19_25 ContentCategory = 319
	ContentCategory_IAB19_26 ContentCategory = 320
	ContentCategory_IAB19_27 ContentCategory = 321
	ContentCategory_IAB19_28 ContentCategory = 322
	ContentCategory_IAB19_29 ContentCategory = 323
	ContentCategory_IAB19_30 ContentCategory = 324
	ContentCategory_IAB19_31 ContentCategory = 325
	ContentCategory_IAB19_32 ContentCategory = 326
	ContentCategory_IAB19_33 ContentCategory = 327
	ContentCategory_IAB19_34 ContentCategory = 328
	ContentCategory_IAB19_35 ContentCategory = 329
	ContentCategory_IAB19_36 ContentCategory = 330
	ContentCategory_IAB20    ContentCategory = 331
	ContentCategory_IAB20_1  ContentCategory = 332
	ContentCategory_IAB20_2  ContentCategory = 333
	ContentCategory_IAB20_3  ContentCategory = 334
	ContentCategory_IAB20_4  ContentCategory = 335
	ContentCategory_IAB20_5  ContentCategory = 336
	ContentCategory_IAB20_6  ContentCategory = 337
	ContentCategory_IAB20_7  ContentCategory = 338
	ContentCategory_IAB20_8  ContentCategory = 339
	ContentCategory_IAB20_9  ContentCategory = 340
	ContentCategory_IAB20_10 ContentCategory = 341
	ContentCategory_IAB20_11 ContentCategory = 342
	ContentCategory_IAB20_12 ContentCategory = 343
	ContentCategory_IAB20_13 ContentCategory = 344
	ContentCategory_IAB20_14 ContentCategory = 345
	ContentCategory_IAB20_15 ContentCategory = 346
	ContentCategory_IAB20_16 ContentCategory = 347
	ContentCategory_IAB20_17 ContentCategory = 348
	ContentCategory_IAB20_18 ContentCategory = 349
	ContentCategory_IAB20_19 ContentCategory = 350
	ContentCategory_IAB20_20 ContentCategory = 351
	ContentCategory_IAB20_21 ContentCategory = 352
	ContentCategory_IAB20_22 ContentCategory = 353
	ContentCategory_IAB20_23 ContentCategory = 354
	ContentCategory_IAB20_24 ContentCategory = 355
	ContentCategory_IAB20_25 ContentCategory = 356
	ContentCategory_IAB20_26 ContentCategory = 357
	ContentCategory_IAB20_27 ContentCategory = 358
	ContentCategory_IAB21    ContentCategory = 359
	ContentCategory_IAB21_1  ContentCategory = 360
	ContentCategory_IAB21_2  ContentCategory = 361
	ContentCategory_IAB21_3  ContentCategory = 362
	ContentCategory_IAB22    ContentCategory = 363
	ContentCategory_IAB22_1  ContentCategory = 364
	ContentCategory_IAB22_2  ContentCategory = 365
	ContentCategory_IAB22_3  ContentCategory = 366
	ContentCategory_IAB22_4  ContentCategory = 367
	ContentCategory_IAB23    ContentCategory = 368
	ContentCategory_IAB23_1  ContentCategory = 369
	ContentCategory_IAB23_2  ContentCategory = 370
	ContentCategory_IAB23_3  ContentCategory = 371
	ContentCategory_IAB23_4  ContentCategory = 372
	ContentCategory_IAB23_5  ContentCategory = 373
	ContentCategory_IAB23_6  ContentCategory = 374
	ContentCategory_IAB23_7  ContentCategory = 375
	ContentCategory_IAB23_8  ContentCategory = 376
	ContentCategory_IAB23_9  ContentCategory = 377
	ContentCategory_IAB23_10 ContentCategory = 378
	ContentCategory_IAB24    ContentCategory = 379
	ContentCategory_IAB25    ContentCategory = 380
	ContentCategory_IAB25_1  ContentCategory = 381
	ContentCategory_IAB25_2  ContentCategory = 382
	ContentCategory_IAB25_3  ContentCategory = 383
	ContentCategory_IAB25_4  ContentCategory = 384
	ContentCategory_IAB25_5  ContentCategory = 385
	ContentCategory_IAB25_6  ContentCategory = 386
	ContentCategory_IAB25_7  ContentCategory = 387
	ContentCategory_IAB26    ContentCategory = 388
	ContentCategory_IAB26_1  ContentCategory = 389
	ContentCategory_IAB26_2  ContentCategory = 390
	ContentCategory_IAB26_3  ContentCategory = 391
	ContentCategory_IAB26_4  ContentCategory = 392
)

var ContentCategory_name = map[int32]string{
	1:   "IAB1",
	2:   "IAB1_1",
	3:   "IAB1_2",
	4:   "IAB1_3",
	5:   "IAB1_4",
	6:   "IAB1_5",
	7:   "IAB1_6",
	8:   "IAB1_7",
	9:   "IAB2",
	10:  "IAB2_1",
	11:  "IAB2_2",
	12:  "IAB2_3",
	13:  "IAB2_4",
	14:  "IAB2_5",
	15:  "IAB2_6",
	16:  "IAB2_7",
	17:  "IAB2_8",
	18:  "IAB2_9",
	19:  "IAB2_10",
	20:  "IAB2_11",
	21:  "IAB2_12",
	22:  "IAB2_13",
	23:  "IAB2_14",
	24:  "IAB2_15",
	25:  "IAB2_16",
	26:  "IAB2_17",
	27:  "IAB2_18",
	28:  "IAB2_19",
	29:  "IAB2_20",
	30:  "IAB2_21",
	31:  "IAB2_22",
	32:  "IAB2_23",
	33:  "IAB3",
	34:  "IAB3_1",
	35:  "IAB3_2",
	36:  "IAB3_3",
	37:  "IAB3_4",
	38:  "IAB3_5",
	39:  "IAB3_6",
	40:  "IAB3_7",
	41:  "IAB3_8",
	42:  "IAB3_9",
	43:  "IAB3_10",
	44:  "IAB3_11",
	45:  "IAB3_12",
	46:  "IAB4",
	47:  "IAB4_1",
	48:  "IAB4_2",
	49:  "IAB4_3",
	50:  "IAB4_4",
	51:  "IAB4_5",
	52:  "IAB4_6",
	53:  "IAB4_7",
	54:  "IAB4_8",
	55:  "IAB4_9",
	56:  "IAB4_10",
	57:  "IAB4_11",
	58:  "IAB5",
	59:  "IAB5_1",
	60:  "IAB5_2",
	61:  "IAB5_3",
	62:  "IAB5_4",
	63:  "IAB5_5",
	64:  "IAB5_6",
	65:  "IAB5_7",
	66:  "IAB5_8",
	67:  "IAB5_9",
	68:  "IAB5_10",
	69:  "IAB5_11",
	70:  "IAB5_12",
	71:  "IAB5_13",
	72:  "IAB5_14",
	73:  "IAB5_15",
	74:  "IAB6",
	75:  "IAB6_1",
	76:  "IAB6_2",
	77:  "IAB6_3",
	78:  "IAB6_4",
	79:  "IAB6_5",
	80:  "IAB6_6",
	81:  "IAB6_7",
	82:  "IAB6_8",
	83:  "IAB6_9",
	84:  "IAB7",
	85:  "IAB7_1",
	86:  "IAB7_2",
	87:  "IAB7_3",
	88:  "IAB7_4",
	89:  "IAB7_5",
	90:  "IAB7_6",
	91:  "IAB7_7",
	92:  "IAB7_8",
	93:  "IAB7_9",
	94:  "IAB7_10",
	95:  "IAB7_11",
	96:  "IAB7_12",
	97:  "IAB7_13",
	98:  "IAB7_14",
	99:  "IAB7_15",
	100: "IAB7_16",
	101: "IAB7_17",
	102: "IAB7_18",
	103: "IAB7_19",
	104: "IAB7_20",
	105: "IAB7_21",
	106: "IAB7_22",
	107: "IAB7_23",
	108: "IAB7_24",
	109: "IAB7_25",
	110: "IAB7_26",
	111: "IAB7_27",
	112: "IAB7_28",
	113: "IAB7_29",
	114: "IAB7_30",
	115: "IAB7_31",
	116: "IAB7_32",
	117: "IAB7_33",
	118: "IAB7_34",
	119: "IAB7_35",
	120: "IAB7_36",
	121: "IAB7_37",
	122: "IAB7_38",
	123: "IAB7_39",
	124: "IAB7_40",
	125: "IAB7_41",
	126: "IAB7_42",
	127: "IAB7_43",
	128: "IAB7_44",
	129: "IAB7_45",
	130: "IAB8",
	131: "IAB8_1",
	132: "IAB8_2",
	133: "IAB8_3",
	134: "IAB8_4",
	135: "IAB8_5",
	136: "IAB8_6",
	137: "IAB8_7",
	138: "IAB8_8",
	139: "IAB8_9",
	140: "IAB8_10",
	141: "IAB8_11",
	142: "IAB8_12",
	143: "IAB8_13",
	144: "IAB8_14",
	145: "IAB8_15",
	146: "IAB8_16",
	147: "IAB8_17",
	148: "IAB8_18",
	149: "IAB9",
	150: "IAB9_1",
	151: "IAB9_2",
	152: "IAB9_3",
	153: "IAB9_4",
	154: "IAB9_5",
	155: "IAB9_6",
	156: "IAB9_7",
	157: "IAB9_8",
	158: "IAB9_9",
	159: "IAB9_10",
	160: "IAB9_11",
	161: "IAB9_12",
	162: "IAB9_13",
	163: "IAB9_14",
	164: "IAB9_15",
	165: "IAB9_16",
	166: "IAB9_17",
	167: "IAB9_18",
	168: "IAB9_19",
	169: "IAB9_20",
	170: "IAB9_21",
	171: "IAB9_22",
	172: "IAB9_23",
	173: "IAB9_24",
	174: "IAB9_25",
	175: "IAB9_26",
	176: "IAB9_27",
	177: "IAB9_28",
	178: "IAB9_29",
	179: "IAB9_30",
	180: "IAB9_31",
	181: "IAB10",
	182: "IAB10_1",
	183: "IAB10_2",
	184: "IAB10_3",
	185: "IAB10_4",
	186: "IAB10_5",
	187: "IAB10_6",
	188: "IAB10_7",
	189: "IAB10_8",
	190: "IAB10_9",
	191: "IAB11",
	192: "IAB11_1",
	193: "IAB11_2",
	194: "IAB11_3",
	195: "IAB11_4",
	196: "IAB11_5",
	197: "IAB12",
	198: "IAB12_1",
	199: "IAB12_2",
	200: "IAB12_3",
	201: "IAB13",
	202: "IAB13_1",
	203: "IAB13_2",
	204: "IAB13_3",
	205: "IAB13_4",
	206: "IAB13_5",
	207: "IAB13_6",
	208: "IAB13_7",
	209: "IAB13_8",
	210: "IAB13_9",
	211: "IAB13_10",
	212: "IAB13_11",
	213: "IAB13_12",
	214: "IAB14",
	215: "IAB14_1",
	216: "IAB14_2",
	217: "IAB14_3",
	218: "IAB14_4",
	219: "IAB14_5",
	220: "IAB14_6",
	221: "IAB14_7",
	222: "IAB14_8",
	223: "IAB15",
	224: "IAB15_1",
	225: "IAB15_2",
	226: "IAB15_3",
	227: "IAB15_4",
	228: "IAB15_5",
	229: "IAB15_6",
	230: "IAB15_7",
	231: "IAB15_8",
	232: "IAB15_9",
	233: "IAB15_10",
	234: "IAB16",
	235: "IAB16_1",
	236: "IAB16_2",
	237: "IAB16_3",
	238: "IAB16_4",
	239: "IAB16_5",
	240: "IAB16_6",
	241: "IAB16_7",
	242: "IAB17",
	243: "IAB17_1",
	244: "IAB17_2",
	245: "IAB17_3",
	246: "IAB17_4",
	247: "IAB17_5",
	248: "IAB17_6",
	249: "IAB17_7",
	250: "IAB17_8",
	251: "IAB17_9",
	252: "IAB17_10",
	253: "IAB17_11",
	254: "IAB17_12",
	255: "IAB17_13",
	256: "IAB17_14",
	257: "IAB17_15",
	258: "IAB17_16",
	259: "IAB17_17",
	260: "IAB17_18",
	261: "IAB17_19",
	262: "IAB17_20",
	263: "IAB17_21",
	264: "IAB17_22",
	265: "IAB17_23",
	266: "IAB17_24",
	267: "IAB17_25",
	268: "IAB17_26",
	269: "IAB17_27",
	270: "IAB17_28",
	271: "IAB17_29",
	272: "IAB17_30",
	273: "IAB17_31",
	274: "IAB17_32",
	275: "IAB17_33",
	276: "IAB17_34",
	277: "IAB17_35",
	278: "IAB17_36",
	279: "IAB17_37",
	280: "IAB17_38",
	281: "IAB17_39",
	282: "IAB17_40",
	283: "IAB17_41",
	284: "IAB17_42",
	285: "IAB17_43",
	286: "IAB17_44",
	287: "IAB18",
	288: "IAB18_1",
	289: "IAB18_2",
	290: "IAB18_3",
	291: "IAB18_4",
	292: "IAB18_5",
	293: "IAB18_6",
	294: "IAB19",
	295: "IAB19_1",
	296: "IAB19_2",
	297: "IAB19_3",
	298: "IAB19_4",
	299: "IAB19_5",
	300: "IAB19_6",
	301: "IAB19_7",
	302: "IAB19_8",
	303: "IAB19_9",
	304: "IAB19_10",
	305: "IAB19_11",
	306: "IAB19_12",
	307: "IAB19_13",
	308: "IAB19_14",
	309: "IAB19_15",
	310: "IAB19_16",
	311: "IAB19_17",
	312: "IAB19_18",
	313: "IAB19_19",
	314: "IAB19_20",
	315: "IAB19_21",
	316: "IAB19_22",
	317: "IAB19_23",
	318: "IAB19_24",
	319: "IAB19_25",
	320: "IAB19_26",
	321: "IAB19_27",
	322: "IAB19_28",
	323: "IAB19_29",
	324: "IAB19_30",
	325: "IAB19_31",
	326: "IAB19_32",
	327: "IAB19_33",
	328: "IAB19_34",
	329: "IAB19_35",
	330: "IAB19_36",
	331: "IAB20",
	332: "IAB20_1",
	333: "IAB20_2",
	334: "IAB20_3",
	335: "IAB20_4",
	336: "IAB20_5",
	337: "IAB20_6",
	338: "IAB20_7",
	339: "IAB20_8",
	340: "IAB20_9",
	341: "IAB20_10",
	342: "IAB20_11",
	343: "IAB20_12",
	344: "IAB20_13",
	345: "IAB20_14",
	346: "IAB20_15",
	347: "IAB20_16",
	348: "IAB20_17",
	349: "IAB20_18",
	350: "IAB20_19",
	351: "IAB20_20",
	352: "IAB20_21",
	353: "IAB20_22",
	354: "IAB20_23",
	355: "IAB20_24",
	356: "IAB20_25",
	357: "IAB20_26",
	358: "IAB20_27",
	359: "IAB21",
	360: "IAB21_1",
	361: "IAB21_2",
	362: "IAB21_3",
	363: "IAB22",
	364: "IAB22_1",
	365: "IAB22_2",
	366: "IAB22_3",
	367: "IAB22_4",
	368: "IAB23",
	369: "IAB23_1",
	370: "IAB23_2",
	371: "IAB23_3",
	372: "IAB23_4",
	373: "IAB23_5",
	374: "IAB23_6",
	375: "IAB23_7",
	376: "IAB23_8",
	377: "IAB23_9",
	378: "IAB23_10",
	379: "IAB24",
	380: "IAB25",
	381: "IAB25_1",
	382: "IAB25_2",
	383: "IAB25_3",
	384: "IAB25_4",
	385: "IAB25_5",
	386: "IAB25_6",
	387: "IAB25_7",
	388: "IAB26",
	389: "IAB26_1",
	390: "IAB26_2",
	391: "IAB26_3",
	392: "IAB26_4",
}
var ContentCategory_value = map[string]int32{
	"IAB1":     1,
	"IAB1_1":   2,
	"IAB1_2":   3,
	"IAB1_3":   4,
	"IAB1_4":   5,
	"IAB1_5":   6,
	"IAB1_6":   7,
	"IAB1_7":   8,
	"IAB2":     9,
	"IAB2_1":   10,
	"IAB2_2":   11,
	"IAB2_3":   12,
	"IAB2_4":   13,
	"IAB2_5":   14,
	"IAB2_6":   15,
	"IAB2_7":   16,
	"IAB2_8":   17,
	"IAB2_9":   18,
	"IAB2_10":  19,
	"IAB2_11":  20,
	"IAB2_12":  21,
	"IAB2_13":  22,
	"IAB2_14":  23,
	"IAB2_15":  24,
	"IAB2_16":  25,
	"IAB2_17":  26,
	"IAB2_18":  27,
	"IAB2_19":  28,
	"IAB2_20":  29,
	"IAB2_21":  30,
	"IAB2_22":  31,
	"IAB2_23":  32,
	"IAB3":     33,
	"IAB3_1":   34,
	"IAB3_2":   35,
	"IAB3_3":   36,
	"IAB3_4":   37,
	"IAB3_5":   38,
	"IAB3_6":   39,
	"IAB3_7":   40,
	"IAB3_8":   41,
	"IAB3_9":   42,
	"IAB3_10":  43,
	"IAB3_11":  44,
	"IAB3_12":  45,
	"IAB4":     46,
	"IAB4_1":   47,
	"IAB4_2":   48,
	"IAB4_3":   49,
	"IAB4_4":   50,
	"IAB4_5":   51,
	"IAB4_6":   52,
	"IAB4_7":   53,
	"IAB4_8":   54,
	"IAB4_9":   55,
	"IAB4_10":  56,
	"IAB4_11":  57,
	"IAB5":     58,
	"IAB5_1":   59,
	"IAB5_2":   60,
	"IAB5_3":   61,
	"IAB5_4":   62,
	"IAB5_5":   63,
	"IAB5_6":   64,
	"IAB5_7":   65,
	"IAB5_8":   66,
	"IAB5_9":   67,
	"IAB5_10":  68,
	"IAB5_11":  69,
	"IAB5_12":  70,
	"IAB5_13":  71,
	"IAB5_14":  72,
	"IAB5_15":  73,
	"IAB6":     74,
	"IAB6_1":   75,
	"IAB6_2":   76,
	"IAB6_3":   77,
	"IAB6_4":   78,
	"IAB6_5":   79,
	"IAB6_6":   80,
	"IAB6_7":   81,
	"IAB6_8":   82,
	"IAB6_9":   83,
	"IAB7":     84,
	"IAB7_1":   85,
	"IAB7_2":   86,
	"IAB7_3":   87,
	"IAB7_4":   88,
	"IAB7_5":   89,
	"IAB7_6":   90,
	"IAB7_7":   91,
	"IAB7_8":   92,
	"IAB7_9":   93,
	"IAB7_10":  94,
	"IAB7_11":  95,
	"IAB7_12":  96,
	"IAB7_13":  97,
	"IAB7_14":  98,
	"IAB7_15":  99,
	"IAB7_16":  100,
	"IAB7_17":  101,
	"IAB7_18":  102,
	"IAB7_19":  103,
	"IAB7_20":  104,
	"IAB7_21":  105,
	"IAB7_22":  106,
	"IAB7_23":  107,
	"IAB7_24":  108,
	"IAB7_25":  109,
	"IAB7_26":  110,
	"IAB7_27":  111,
	"IAB7_28":  112,
	"IAB7_29":  113,
	"IAB7_30":  114,
	"IAB7_31":  115,
	"IAB7_32":  116,
	"IAB7_33":  117,
	"IAB7_34":  118,
	"IAB7_35":  119,
	"IAB7_36":  120,
	"IAB7_37":  121,
	"IAB7_38":  122,
	"IAB7_39":  123,
	"IAB7_40":  124,
	"IAB7_41":  125,
	"IAB7_42":  126,
	"IAB7_43":  127,
	"IAB7_44":  128,
	"IAB7_45":  129,
	"IAB8":     130,
	"IAB8_1":   131,
	"IAB8_2":   132,
	"IAB8_3":   133,
	"IAB8_4":   134,
	"IAB8_5":   135,
	"IAB8_6":   136,
	"IAB8_7":   137,
	"IAB8_8":   138,
	"IAB8_9":   139,
	"IAB8_10":  140,
	"IAB8_11":  141,
	"IAB8_12":  142,
	"IAB8_13":  143,
	"IAB8_14":  144,
	"IAB8_15":  145,
	"IAB8_16":  146,
	"IAB8_17":  147,
	"IAB8_18":  148,
	"IAB9":     149,
	"IAB9_1":   150,
	"IAB9_2":   151,
	"IAB9_3":   152,
	"IAB9_4":   153,
	"IAB9_5":   154,
	"IAB9_6":   155,
	"IAB9_7":   156,
	"IAB9_8":   157,
	"IAB9_9":   158,
	"IAB9_10":  159,
	"IAB9_11":  160,
	"IAB9_12":  161,
	"IAB9_13":  162,
	"IAB9_14":  163,
	"IAB9_15":  164,
	"IAB9_16":  165,
	"IAB9_17":  166,
	"IAB9_18":  167,
	"IAB9_19":  168,
	"IAB9_20":  169,
	"IAB9_21":  170,
	"IAB9_22":  171,
	"IAB9_23":  172,
	"IAB9_24":  173,
	"IAB9_25":  174,
	"IAB9_26":  175,
	"IAB9_27":  176,
	"IAB9_28":  177,
	"IAB9_29":  178,
	"IAB9_30":  179,
	"IAB9_31":  180,
	"IAB10":    181,
	"IAB10_1":  182,
	"IAB10_2":  183,
	"IAB10_3":  184,
	"IAB10_4":  185,
	"IAB10_5":  186,
	"IAB10_6":  187,
	"IAB10_7":  188,
	"IAB10_8":  189,
	"IAB10_9":  190,
	"IAB11":    191,
	"IAB11_1":  192,
	"IAB11_2":  193,
	"IAB11_3":  194,
	"IAB11_4":  195,
	"IAB11_5":  196,
	"IAB12":    197,
	"IAB12_1":  198,
	"IAB12_2":  199,
	"IAB12_3":  200,
	"IAB13":    201,
	"IAB13_1":  202,
	"IAB13_2":  203,
	"IAB13_3":  204,
	"IAB13_4":  205,
	"IAB13_5":  206,
	"IAB13_6":  207,
	"IAB13_7":  208,
	"IAB13_8":  209,
	"IAB13_9":  210,
	"IAB13_10": 211,
	"IAB13_11": 212,
	"IAB13_12": 213,
	"IAB14":    214,
	"IAB14_1":  215,
	"IAB14_2":  216,
	"IAB14_3":  217,
	"IAB14_4":  218,
	"IAB14_5":  219,
	"IAB14_6":  220,
	"IAB14_7":  221,
	"IAB14_8":  222,
	"IAB15":    223,
	"IAB15_1":  224,
	"IAB15_2":  225,
	"IAB15_3":  226,
	"IAB15_4":  227,
	"IAB15_5":  228,
	"IAB15_6":  229,
	"IAB15_7":  230,
	"IAB15_8":  231,
	"IAB15_9":  232,
	"IAB15_10": 233,
	"IAB16":    234,
	"IAB16_1":  235,
	"IAB16_2":  236,
	"IAB16_3":  237,
	"IAB16_4":  238,
	"IAB16_5":  239,
	"IAB16_6":  240,
	"IAB16_7":  241,
	"IAB17":    242,
	"IAB17_1":  243,
	"IAB17_2":  244,
	"IAB17_3":  245,
	"IAB17_4":  246,
	"IAB17_5":  247,
	"IAB17_6":  248,
	"IAB17_7":  249,
	"IAB17_8":  250,
	"IAB17_9":  251,
	"IAB17_10": 252,
	"IAB17_11": 253,
	"IAB17_12": 254,
	"IAB17_13": 255,
	"IAB17_14": 256,
	"IAB17_15": 257,
	"IAB17_16": 258,
	"IAB17_17": 259,
	"IAB17_18": 260,
	"IAB17_19": 261,
	"IAB17_20": 262,
	"IAB17_21": 263,
	"IAB17_22": 264,
	"IAB17_23": 265,
	"IAB17_24": 266,
	"IAB17_25": 267,
	"IAB17_26": 268,
	"IAB17_27": 269,
	"IAB17_28": 270,
	"IAB17_29": 271,
	"IAB17_30": 272,
	"IAB17_31": 273,
	"IAB17_32": 274,
	"IAB17_33": 275,
	"IAB17_34": 276,
	"IAB17_35": 277,
	"IAB17_36": 278,
	"IAB17_37": 279,
	"IAB17_38": 280,
	"IAB17_39": 281,
	"IAB17_40": 282,
	"IAB17_41": 283,
	"IAB17_42": 284,
	"IAB17_43": 285,
	"IAB17_44": 286,
	"IAB18":    287,
	"IAB18_1":  288,
	"IAB18_2":  289,
	"IAB18_3":  290,
	"IAB18_4":  291,
	"IAB18_5":  292,
	"IAB18_6":  293,
	"IAB19":    294,
	"IAB19_1":  295,
	"IAB19_2":  296,
	"IAB19_3":  297,
	"IAB19_4":  298,
	"IAB19_5":  299,
	"IAB19_6":  300,
	"IAB19_7":  301,
	"IAB19_8":  302,
	"IAB19_9":  303,
	"IAB19_10": 304,
	"IAB19_11": 305,
	"IAB19_12": 306,
	"IAB19_13": 307,
	"IAB19_14": 308,
	"IAB19_15": 309,
	"IAB19_16": 310,
	"IAB19_17": 311,
	"IAB19_18": 312,
	"IAB19_19": 313,
	"IAB19_20": 314,
	"IAB19_21": 315,
	"IAB19_22": 316,
	"IAB19_23": 317,
	"IAB19_24": 318,
	"IAB19_25": 319,
	"IAB19_26": 320,
	"IAB19_27": 321,
	"IAB19_28": 322,
	"IAB19_29": 323,
	"IAB19_30": 324,
	"IAB19_31": 325,
	"IAB19_32": 326,
	"IAB19_33": 327,
	"IAB19_34": 328,
	"IAB19_35": 329,
	"IAB19_36": 330,
	"IAB20":    331,
	"IAB20_1":  332,
	"IAB20_2":  333,
	"IAB20_3":  334,
	"IAB20_4":  335,
	"IAB20_5":  336,
	"IAB20_6":  337,
	"IAB20_7":  338,
	"IAB20_8":  339,
	"IAB20_9":  340,
	"IAB20_10": 341,
	"IAB20_11": 342,
	"IAB20_12": 343,
	"IAB20_13": 344,
	"IAB20_14": 345,
	"IAB20_15": 346,
	"IAB20_16": 347,
	"IAB20_17": 348,
	"IAB20_18": 349,
	"IAB20_19": 350,
	"IAB20_20": 351,
	"IAB20_21": 352,
	"IAB20_22": 353,
	"IAB20_23": 354,
	"IAB20_24": 355,
	"IAB20_25": 356,
	"IAB20_26": 357,
	"IAB20_27": 358,
	"IAB21":    359,
	"IAB21_1":  360,
	"IAB21_2":  361,
	"IAB21_3":  362,
	"IAB22":    363,
	"IAB22_1":  364,
	"IAB22_2":  365,
	"IAB22_3":  366,
	"IAB22_4":  367,
	"IAB23":    368,
	"IAB23_1":  369,
	"IAB23_2":  370,
	"IAB23_3":  371,
	"IAB23_4":  372,
	"IAB23_5":  373,
	"IAB23_6":  374,
	"IAB23_7":  375,
	"IAB23_8":  376,
	"IAB23_9":  377,
	"IAB23_10": 378,
	"IAB24":    379,
	"IAB25":    380,
	"IAB25_1":  381,
	"IAB25_2":  382,
	"IAB25_3":  383,
	"IAB25_4":  384,
	"IAB25_5":  385,
	"IAB25_6":  386,
	"IAB25_7":  387,
	"IAB26":    388,
	"IAB26_1":  389,
	"IAB26_2":  390,
	"IAB26_3":  391,
	"IAB26_4":  392,
}

func (x ContentCategory) Enum() *ContentCategory {
	p := new(ContentCategory)
	*p = x
	return p
}
func (x ContentCategory) String() string {
	return proto.EnumName(ContentCategory_name, int32(x))
}
func (x *ContentCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContentCategory_value, data, "ContentCategory")
	if err != nil {
		return err
	}
	*x = ContentCategory(value)
	return nil
}
func (ContentCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// creative attributes that can describe an ad being served
// or serve as restrictions of thereof.
type CreativeAttribute int32

const (
	CreativeAttribute_AUDIO_AUTO_PLAY                CreativeAttribute = 1
	CreativeAttribute_AUDIO_USER_INITIATED           CreativeAttribute = 2
	CreativeAttribute_EXPANDABLE_AUTOMATIC           CreativeAttribute = 3
	CreativeAttribute_EXPANDABLE_CLICK_INITIATED     CreativeAttribute = 4
	CreativeAttribute_EXPANDABLE_ROLLOVER_INITIATED  CreativeAttribute = 5
	CreativeAttribute_VIDEO_IN_BANNER_AUTO_PLAY      CreativeAttribute = 6
	CreativeAttribute_VIDEO_IN_BANNER_USER_INITIATED CreativeAttribute = 7
	CreativeAttribute_POP_UP                         CreativeAttribute = 8
	CreativeAttribute_PROVOCATIVE_OR_SUGGESTIVE      CreativeAttribute = 9
	CreativeAttribute_ANNOYING                       CreativeAttribute = 10
	CreativeAttribute_SURVEYS                        CreativeAttribute = 11
	CreativeAttribute_TEXT_ONLY                      CreativeAttribute = 12
	CreativeAttribute_USER_INTERACTIVE               CreativeAttribute = 13
	CreativeAttribute_WINDOWS_DIALOG_OR_ALERT_STYLE  CreativeAttribute = 14
	CreativeAttribute_HAS_AUDIO_ON_OFF_BUTTON        CreativeAttribute = 15
	CreativeAttribute_AD_CAN_BE_SKIPPED              CreativeAttribute = 16
	CreativeAttribute_AD_HAS_THUMBNAIL               CreativeAttribute = 101
	CreativeAttribute_AD_SIZE_IS_FLEXIBLE            CreativeAttribute = 102
	CreativeAttribute_AD_CAN_EXPAND_LEFT             CreativeAttribute = 103
	CreativeAttribute_AD_CAN_EXPAND_RIGHT            CreativeAttribute = 104
	CreativeAttribute_AD_CAN_EXPAND_UP               CreativeAttribute = 105
	CreativeAttribute_AD_CAN_EXPAND_DOWN             CreativeAttribute = 106
	CreativeAttribute_AD_CAN_EXPAND_FULLSCREEN       CreativeAttribute = 107
	CreativeAttribute_AD_SUPPORTS_DYNAMIC_PIXELS     CreativeAttribute = 108
	CreativeAttribute_AD_SUPPORTS_DYNAMIC_CLICK_URL  CreativeAttribute = 109
)

var CreativeAttribute_name = map[int32]string{
	1:   "AUDIO_AUTO_PLAY",
	2:   "AUDIO_USER_INITIATED",
	3:   "EXPANDABLE_AUTOMATIC",
	4:   "EXPANDABLE_CLICK_INITIATED",
	5:   "EXPANDABLE_ROLLOVER_INITIATED",
	6:   "VIDEO_IN_BANNER_AUTO_PLAY",
	7:   "VIDEO_IN_BANNER_USER_INITIATED",
	8:   "POP_UP",
	9:   "PROVOCATIVE_OR_SUGGESTIVE",
	10:  "ANNOYING",
	11:  "SURVEYS",
	12:  "TEXT_ONLY",
	13:  "USER_INTERACTIVE",
	14:  "WINDOWS_DIALOG_OR_ALERT_STYLE",
	15:  "HAS_AUDIO_ON_OFF_BUTTON",
	16:  "AD_CAN_BE_SKIPPED",
	101: "AD_HAS_THUMBNAIL",
	102: "AD_SIZE_IS_FLEXIBLE",
	103: "AD_CAN_EXPAND_LEFT",
	104: "AD_CAN_EXPAND_RIGHT",
	105: "AD_CAN_EXPAND_UP",
	106: "AD_CAN_EXPAND_DOWN",
	107: "AD_CAN_EXPAND_FULLSCREEN",
	108: "AD_SUPPORTS_DYNAMIC_PIXELS",
	109: "AD_SUPPORTS_DYNAMIC_CLICK_URL",
}
var CreativeAttribute_value = map[string]int32{
	"AUDIO_AUTO_PLAY":                1,
	"AUDIO_USER_INITIATED":           2,
	"EXPANDABLE_AUTOMATIC":           3,
	"EXPANDABLE_CLICK_INITIATED":     4,
	"EXPANDABLE_ROLLOVER_INITIATED":  5,
	"VIDEO_IN_BANNER_AUTO_PLAY":      6,
	"VIDEO_IN_BANNER_USER_INITIATED": 7,
	"POP_UP":                        8,
	"PROVOCATIVE_OR_SUGGESTIVE":     9,
	"ANNOYING":                      10,
	"SURVEYS":                       11,
	"TEXT_ONLY":                     12,
	"USER_INTERACTIVE":              13,
	"WINDOWS_DIALOG_OR_ALERT_STYLE": 14,
	"HAS_AUDIO_ON_OFF_BUTTON":       15,
	"AD_CAN_BE_SKIPPED":             16,
	"AD_HAS_THUMBNAIL":              101,
	"AD_SIZE_IS_FLEXIBLE":           102,
	"AD_CAN_EXPAND_LEFT":            103,
	"AD_CAN_EXPAND_RIGHT":           104,
	"AD_CAN_EXPAND_UP":              105,
	"AD_CAN_EXPAND_DOWN":            106,
	"AD_CAN_EXPAND_FULLSCREEN":      107,
	"AD_SUPPORTS_DYNAMIC_PIXELS":    108,
	"AD_SUPPORTS_DYNAMIC_CLICK_URL": 109,
}

func (x CreativeAttribute) Enum() *CreativeAttribute {
	p := new(CreativeAttribute)
	*p = x
	return p
}
func (x CreativeAttribute) String() string {
	return proto.EnumName(CreativeAttribute_name, int32(x))
}
func (x *CreativeAttribute) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CreativeAttribute_value, data, "CreativeAttribute")
	if err != nil {
		return err
	}
	*x = CreativeAttribute(value)
	return nil
}
func (CreativeAttribute) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Boolean-like enumeration used in various attributes.
type Flag int32

const (
	Flag_NO  Flag = 0
	Flag_YES Flag = 1
)

var Flag_name = map[int32]string{
	0: "NO",
	1: "YES",
}
var Flag_value = map[string]int32{
	"NO":  0,
	"YES": 1,
}

func (x Flag) Enum() *Flag {
	p := new(Flag)
	*p = x
	return p
}
func (x Flag) String() string {
	return proto.EnumName(Flag_name, int32(x))
}
func (x *Flag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Flag_value, data, "Flag")
	if err != nil {
		return err
	}
	*x = Flag(value)
	return nil
}
func (Flag) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

// OpenRTB 6.4: API frameworks.
type Enums_BidRequest_Impression_ApiFramework int32

const (
	Enums_BidRequest_Impression_VPAID_1_0 Enums_BidRequest_Impression_ApiFramework = 1
	Enums_BidRequest_Impression_VPAID_2_0 Enums_BidRequest_Impression_ApiFramework = 2
	Enums_BidRequest_Impression_MRAID     Enums_BidRequest_Impression_ApiFramework = 3
	Enums_BidRequest_Impression_MRAID_1   Enums_BidRequest_Impression_ApiFramework = 3
	Enums_BidRequest_Impression_ORMMA     Enums_BidRequest_Impression_ApiFramework = 4
	Enums_BidRequest_Impression_MRAID_2   Enums_BidRequest_Impression_ApiFramework = 5
	// Mopub requests will have MRAID_PLAYABLE in banner.ext.bapis
	// if USER_INTERACTIVE is in banner.battr. Stinger will filter
	// MRAID_PLAYABLE creatives.
	Enums_BidRequest_Impression_MRAID_PLAYABLE Enums_BidRequest_Impression_ApiFramework = 10001
)

var Enums_BidRequest_Impression_ApiFramework_name = map[int32]string{
	1: "VPAID_1_0",
	2: "VPAID_2_0",
	3: "MRAID",
	// Duplicate value: 3: "MRAID_1",
	4:     "ORMMA",
	5:     "MRAID_2",
	10001: "MRAID_PLAYABLE",
}
var Enums_BidRequest_Impression_ApiFramework_value = map[string]int32{
	"VPAID_1_0":      1,
	"VPAID_2_0":      2,
	"MRAID":          3,
	"MRAID_1":        3,
	"ORMMA":          4,
	"MRAID_2":        5,
	"MRAID_PLAYABLE": 10001,
}

func (x Enums_BidRequest_Impression_ApiFramework) Enum() *Enums_BidRequest_Impression_ApiFramework {
	p := new(Enums_BidRequest_Impression_ApiFramework)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_ApiFramework) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_ApiFramework_name, int32(x))
}
func (x *Enums_BidRequest_Impression_ApiFramework) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_ApiFramework_value, data, "Enums_BidRequest_Impression_ApiFramework")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_ApiFramework(value)
	return nil
}
func (Enums_BidRequest_Impression_ApiFramework) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 0}
}

// OpenRTB 6.5: the position of the ad as a relative measure of visibility or
// prominence.
type Enums_BidRequest_Impression_AdPosition int32

const (
	Enums_BidRequest_Impression_POSITION_UNKNOWN         Enums_BidRequest_Impression_AdPosition = 0
	Enums_BidRequest_Impression_ABOVE_THE_FOLD           Enums_BidRequest_Impression_AdPosition = 1
	Enums_BidRequest_Impression_DEPRECATED_MAYBE_VISIBLE Enums_BidRequest_Impression_AdPosition = 2
	Enums_BidRequest_Impression_BELOW_THE_FOLD           Enums_BidRequest_Impression_AdPosition = 3
	Enums_BidRequest_Impression_HEADER                   Enums_BidRequest_Impression_AdPosition = 4
	Enums_BidRequest_Impression_FOOTER                   Enums_BidRequest_Impression_AdPosition = 5
	Enums_BidRequest_Impression_SIDEBAR                  Enums_BidRequest_Impression_AdPosition = 6
	Enums_BidRequest_Impression_FULLSCREEN               Enums_BidRequest_Impression_AdPosition = 7
)

var Enums_BidRequest_Impression_AdPosition_name = map[int32]string{
	0: "POSITION_UNKNOWN",
	1: "ABOVE_THE_FOLD",
	2: "DEPRECATED_MAYBE_VISIBLE",
	3: "BELOW_THE_FOLD",
	4: "HEADER",
	5: "FOOTER",
	6: "SIDEBAR",
	7: "FULLSCREEN",
}
var Enums_BidRequest_Impression_AdPosition_value = map[string]int32{
	"POSITION_UNKNOWN":         0,
	"ABOVE_THE_FOLD":           1,
	"DEPRECATED_MAYBE_VISIBLE": 2,
	"BELOW_THE_FOLD":           3,
	"HEADER":                   4,
	"FOOTER":                   5,
	"SIDEBAR":                  6,
	"FULLSCREEN":               7,
}

func (x Enums_BidRequest_Impression_AdPosition) Enum() *Enums_BidRequest_Impression_AdPosition {
	p := new(Enums_BidRequest_Impression_AdPosition)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_AdPosition) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_AdPosition_name, int32(x))
}
func (x *Enums_BidRequest_Impression_AdPosition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_AdPosition_value, data, "Enums_BidRequest_Impression_AdPosition")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_AdPosition(value)
	return nil
}
func (Enums_BidRequest_Impression_AdPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1}
}

// OpenRTB 6.2: types of ads that can be accepted by the exchange unless
// restricted by publisher site settings.
type Enums_BidRequest_Impression_Banner_AdType int32

const (
	// "Usually mobile".
	Enums_BidRequest_Impression_Banner_XHTML_TEXT Enums_BidRequest_Impression_Banner_AdType = 1
	// "Usually mobile".
	Enums_BidRequest_Impression_Banner_XHTML_BANNER Enums_BidRequest_Impression_Banner_AdType = 2
	// Javascript must be valid XHTML (ie, script tags included).
	Enums_BidRequest_Impression_Banner_JAVASCRIPT Enums_BidRequest_Impression_Banner_AdType = 3
	// Iframe.
	Enums_BidRequest_Impression_Banner_IFRAME Enums_BidRequest_Impression_Banner_AdType = 4
)

var Enums_BidRequest_Impression_Banner_AdType_name = map[int32]string{
	1: "XHTML_TEXT",
	2: "XHTML_BANNER",
	3: "JAVASCRIPT",
	4: "IFRAME",
}
var Enums_BidRequest_Impression_Banner_AdType_value = map[string]int32{
	"XHTML_TEXT":   1,
	"XHTML_BANNER": 2,
	"JAVASCRIPT":   3,
	"IFRAME":       4,
}

func (x Enums_BidRequest_Impression_Banner_AdType) Enum() *Enums_BidRequest_Impression_Banner_AdType {
	p := new(Enums_BidRequest_Impression_Banner_AdType)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Banner_AdType) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Banner_AdType_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Banner_AdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Banner_AdType_value, data, "Enums_BidRequest_Impression_Banner_AdType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Banner_AdType(value)
	return nil
}
func (Enums_BidRequest_Impression_Banner_AdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 0, 0}
}

// OpenRTB 6.11: the directions in which an expandable ad may expand, given the
// positioning of the ad unit on the page and constraints imposed by the content.
type Enums_BidRequest_Impression_Banner_ExpandableDirection int32

const (
	Enums_BidRequest_Impression_Banner_LEFT       Enums_BidRequest_Impression_Banner_ExpandableDirection = 1
	Enums_BidRequest_Impression_Banner_RIGHT      Enums_BidRequest_Impression_Banner_ExpandableDirection = 2
	Enums_BidRequest_Impression_Banner_UP         Enums_BidRequest_Impression_Banner_ExpandableDirection = 3
	Enums_BidRequest_Impression_Banner_DOWN       Enums_BidRequest_Impression_Banner_ExpandableDirection = 4
	Enums_BidRequest_Impression_Banner_FULLSCREEN Enums_BidRequest_Impression_Banner_ExpandableDirection = 5
)

var Enums_BidRequest_Impression_Banner_ExpandableDirection_name = map[int32]string{
	1: "LEFT",
	2: "RIGHT",
	3: "UP",
	4: "DOWN",
	5: "FULLSCREEN",
}
var Enums_BidRequest_Impression_Banner_ExpandableDirection_value = map[string]int32{
	"LEFT":       1,
	"RIGHT":      2,
	"UP":         3,
	"DOWN":       4,
	"FULLSCREEN": 5,
}

func (x Enums_BidRequest_Impression_Banner_ExpandableDirection) Enum() *Enums_BidRequest_Impression_Banner_ExpandableDirection {
	p := new(Enums_BidRequest_Impression_Banner_ExpandableDirection)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Banner_ExpandableDirection) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Banner_ExpandableDirection_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Banner_ExpandableDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Banner_ExpandableDirection_value, data, "Enums_BidRequest_Impression_Banner_ExpandableDirection")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Banner_ExpandableDirection(value)
	return nil
}
func (Enums_BidRequest_Impression_Banner_ExpandableDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 0, 1}
}

// Some exchanges support a "bannertype=rewarded" field for banners. This
// signifies that an end user will recieve a reward for interacting with
// the ad. E.g. if the user clicks the ad, they get game currency in a
// phone game. There aren't other possible "bannertype" values yet, but
// there could be in the future.
type Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType int32

const (
	Enums_BidRequest_Impression_Banner_BannerExtensions_UNKNOWN  Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType = -1
	Enums_BidRequest_Impression_Banner_BannerExtensions_REWARDED Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType = 0
)

var Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType_name = map[int32]string{
	-1: "UNKNOWN",
	0:  "REWARDED",
}
var Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType_value = map[string]int32{
	"UNKNOWN":  -1,
	"REWARDED": 0,
}

func (x Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType) Enum() *Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType {
	p := new(Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType_value, data, "Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType(value)
	return nil
}
func (Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 0, 0, 0}
}

// OpenRTB 6.7: video bid response protocols that could be supported by an
// exchange.
type Enums_BidRequest_Impression_Video_Protocol int32

const (
	Enums_BidRequest_Impression_Video_VAST_1_0         Enums_BidRequest_Impression_Video_Protocol = 1
	Enums_BidRequest_Impression_Video_VAST_2_0         Enums_BidRequest_Impression_Video_Protocol = 2
	Enums_BidRequest_Impression_Video_VAST_3_0         Enums_BidRequest_Impression_Video_Protocol = 3
	Enums_BidRequest_Impression_Video_VAST_1_0_WRAPPER Enums_BidRequest_Impression_Video_Protocol = 4
	Enums_BidRequest_Impression_Video_VAST_2_0_WRAPPER Enums_BidRequest_Impression_Video_Protocol = 5
	Enums_BidRequest_Impression_Video_VAST_3_0_WRAPPER Enums_BidRequest_Impression_Video_Protocol = 6
)

var Enums_BidRequest_Impression_Video_Protocol_name = map[int32]string{
	1: "VAST_1_0",
	2: "VAST_2_0",
	3: "VAST_3_0",
	4: "VAST_1_0_WRAPPER",
	5: "VAST_2_0_WRAPPER",
	6: "VAST_3_0_WRAPPER",
}
var Enums_BidRequest_Impression_Video_Protocol_value = map[string]int32{
	"VAST_1_0":         1,
	"VAST_2_0":         2,
	"VAST_3_0":         3,
	"VAST_1_0_WRAPPER": 4,
	"VAST_2_0_WRAPPER": 5,
	"VAST_3_0_WRAPPER": 6,
}

func (x Enums_BidRequest_Impression_Video_Protocol) Enum() *Enums_BidRequest_Impression_Video_Protocol {
	p := new(Enums_BidRequest_Impression_Video_Protocol)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_Protocol) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_Protocol_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_Protocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_Protocol_value, data, "Enums_BidRequest_Impression_Video_Protocol")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_Protocol(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 0}
}

// OpenRTB 6.17: markup types allowed for video companion ads.
// This table is derived from IAB VAST 2.0+. See www.iab.net/vast/ for more
// information.
type Enums_BidRequest_Impression_Video_CompanionType int32

const (
	Enums_BidRequest_Impression_Video_STATIC Enums_BidRequest_Impression_Video_CompanionType = 1
	Enums_BidRequest_Impression_Video_HTML   Enums_BidRequest_Impression_Video_CompanionType = 2
	Enums_BidRequest_Impression_Video_IFRAME Enums_BidRequest_Impression_Video_CompanionType = 3
)

var Enums_BidRequest_Impression_Video_CompanionType_name = map[int32]string{
	1: "STATIC",
	2: "HTML",
	3: "IFRAME",
}
var Enums_BidRequest_Impression_Video_CompanionType_value = map[string]int32{
	"STATIC": 1,
	"HTML":   2,
	"IFRAME": 3,
}

func (x Enums_BidRequest_Impression_Video_CompanionType) Enum() *Enums_BidRequest_Impression_Video_CompanionType {
	p := new(Enums_BidRequest_Impression_Video_CompanionType)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_CompanionType) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_CompanionType_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_CompanionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_CompanionType_value, data, "Enums_BidRequest_Impression_Video_CompanionType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_CompanionType(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_CompanionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 1}
}

// OpenRTB 6.6: "In-stream" or "linear" video refers to pre-roll, post-roll, or
// mid-roll
// video ads where the user is forced to watch ad in order to see the video
// content.
// “Overlay” or “non-linear” refer to ads that are shown on top of the video
// content.
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG).
type Enums_BidRequest_Impression_Video_Linearity int32

const (
	Enums_BidRequest_Impression_Video_LINEAR     Enums_BidRequest_Impression_Video_Linearity = 1
	Enums_BidRequest_Impression_Video_NON_LINEAR Enums_BidRequest_Impression_Video_Linearity = 2
)

var Enums_BidRequest_Impression_Video_Linearity_name = map[int32]string{
	1: "LINEAR",
	2: "NON_LINEAR",
}
var Enums_BidRequest_Impression_Video_Linearity_value = map[string]int32{
	"LINEAR":     1,
	"NON_LINEAR": 2,
}

func (x Enums_BidRequest_Impression_Video_Linearity) Enum() *Enums_BidRequest_Impression_Video_Linearity {
	p := new(Enums_BidRequest_Impression_Video_Linearity)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_Linearity) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_Linearity_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_Linearity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_Linearity_value, data, "Enums_BidRequest_Impression_Video_Linearity")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_Linearity(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_Linearity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 2}
}

// OpenRTB 6.8: video playback methods.
type Enums_BidRequest_Impression_Video_PlaybackMethod int32

const (
	Enums_BidRequest_Impression_Video_AUTOPLAY_SOUND_ON  Enums_BidRequest_Impression_Video_PlaybackMethod = 1
	Enums_BidRequest_Impression_Video_AUTOPLAY_SOUND_OFF Enums_BidRequest_Impression_Video_PlaybackMethod = 2
	Enums_BidRequest_Impression_Video_CLICK_TO_PLAY      Enums_BidRequest_Impression_Video_PlaybackMethod = 3
	Enums_BidRequest_Impression_Video_MOUSE_OVER         Enums_BidRequest_Impression_Video_PlaybackMethod = 4
)

var Enums_BidRequest_Impression_Video_PlaybackMethod_name = map[int32]string{
	1: "AUTOPLAY_SOUND_ON",
	2: "AUTOPLAY_SOUND_OFF",
	3: "CLICK_TO_PLAY",
	4: "MOUSE_OVER",
}
var Enums_BidRequest_Impression_Video_PlaybackMethod_value = map[string]int32{
	"AUTOPLAY_SOUND_ON":  1,
	"AUTOPLAY_SOUND_OFF": 2,
	"CLICK_TO_PLAY":      3,
	"MOUSE_OVER":         4,
}

func (x Enums_BidRequest_Impression_Video_PlaybackMethod) Enum() *Enums_BidRequest_Impression_Video_PlaybackMethod {
	p := new(Enums_BidRequest_Impression_Video_PlaybackMethod)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_PlaybackMethod) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_PlaybackMethod_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_PlaybackMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_PlaybackMethod_value, data, "Enums_BidRequest_Impression_Video_PlaybackMethod")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_PlaybackMethod(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_PlaybackMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 3}
}

// OpenRTB 6.9: Various options for the video start delay. If the start delay
// value is greater than 0 then the position is mid-roll, and the value
// represents the number of seconds into the content that the ad will be
// displayed. If the start delay time is not available, the exchange can report
// the position of the ad in general terms using this table of negative numbers.
// Beeswax extends this enum to indiciate requests with unknown VideoStartDelay.
type Enums_BidRequest_Impression_Video_VideoStartDelay int32

const (
	Enums_BidRequest_Impression_Video_PRE_ROLL          Enums_BidRequest_Impression_Video_VideoStartDelay = 0
	Enums_BidRequest_Impression_Video_GENERIC_MID_ROLL  Enums_BidRequest_Impression_Video_VideoStartDelay = -1
	Enums_BidRequest_Impression_Video_GENERIC_POST_ROLL Enums_BidRequest_Impression_Video_VideoStartDelay = -2
	Enums_BidRequest_Impression_Video_UNKNOWN           Enums_BidRequest_Impression_Video_VideoStartDelay = -3
)

var Enums_BidRequest_Impression_Video_VideoStartDelay_name = map[int32]string{
	0:  "PRE_ROLL",
	-1: "GENERIC_MID_ROLL",
	-2: "GENERIC_POST_ROLL",
	-3: "UNKNOWN",
}
var Enums_BidRequest_Impression_Video_VideoStartDelay_value = map[string]int32{
	"PRE_ROLL":          0,
	"GENERIC_MID_ROLL":  -1,
	"GENERIC_POST_ROLL": -2,
	"UNKNOWN":           -3,
}

func (x Enums_BidRequest_Impression_Video_VideoStartDelay) Enum() *Enums_BidRequest_Impression_Video_VideoStartDelay {
	p := new(Enums_BidRequest_Impression_Video_VideoStartDelay)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_VideoStartDelay) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_VideoStartDelay_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_VideoStartDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_VideoStartDelay_value, data, "Enums_BidRequest_Impression_Video_VideoStartDelay")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_VideoStartDelay(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_VideoStartDelay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 4}
}

// OpenRTB 6.12: delivery of video content.
type Enums_BidRequest_Impression_Video_ContentDelivery int32

const (
	Enums_BidRequest_Impression_Video_STREAMING   Enums_BidRequest_Impression_Video_ContentDelivery = 1
	Enums_BidRequest_Impression_Video_PROGRESSIVE Enums_BidRequest_Impression_Video_ContentDelivery = 2
)

var Enums_BidRequest_Impression_Video_ContentDelivery_name = map[int32]string{
	1: "STREAMING",
	2: "PROGRESSIVE",
}
var Enums_BidRequest_Impression_Video_ContentDelivery_value = map[string]int32{
	"STREAMING":   1,
	"PROGRESSIVE": 2,
}

func (x Enums_BidRequest_Impression_Video_ContentDelivery) Enum() *Enums_BidRequest_Impression_Video_ContentDelivery {
	p := new(Enums_BidRequest_Impression_Video_ContentDelivery)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_ContentDelivery) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_ContentDelivery_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_ContentDelivery) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_ContentDelivery_value, data, "Enums_BidRequest_Impression_Video_ContentDelivery")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_ContentDelivery(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_ContentDelivery) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 5}
}

// OpenRTB 2.5: The following table lists the various types of video placements
// derived largely from the IAB Digital Video Guidelines.
type Enums_BidRequest_Impression_Video_VideoPlacementType int32

const (
	// The video placement is not defined.
	// Default value.
	Enums_BidRequest_Impression_Video_UNDEFINED_VIDEO_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 0
	// Played before, during or after the streaming video content
	// that the consumer has requested.
	// E.G.: Pre-roll, Mid-roll, Post-roll.
	Enums_BidRequest_Impression_Video_IN_STREAM_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 1
	// Exists within a web banner that leverages the banner space
	// to deliver a video experience as opposed to another static
	// or rich media format.
	// The format relies on the existence of display ad inventory
	// on the page for its delivery.
	Enums_BidRequest_Impression_Video_IN_BANNER_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 2
	// Loads and plays dynamically between paragraphs of editorial content;
	// existing as a standalone branded message.
	Enums_BidRequest_Impression_Video_IN_ARTICLE_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 3
	// In-Feed - Found in content, social, or product feeds.
	Enums_BidRequest_Impression_Video_IN_FEED_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 4
	// Interstitial/Slider/Floating.
	// Covers the entire or a portion of screen area,
	// but is always on screen while displayed
	// (i.e. cannot be scrolled out of view).
	// Note that a full-screen interstitial (e.g., in mobile)
	// can be distinguished from a floating/slider unit by the imp.instl field.
	Enums_BidRequest_Impression_Video_FLOATING_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 5
)

var Enums_BidRequest_Impression_Video_VideoPlacementType_name = map[int32]string{
	0: "UNDEFINED_VIDEO_PLACEMENT",
	1: "IN_STREAM_PLACEMENT",
	2: "IN_BANNER_PLACEMENT",
	3: "IN_ARTICLE_PLACEMENT",
	4: "IN_FEED_PLACEMENT",
	5: "FLOATING_PLACEMENT",
}
var Enums_BidRequest_Impression_Video_VideoPlacementType_value = map[string]int32{
	"UNDEFINED_VIDEO_PLACEMENT": 0,
	"IN_STREAM_PLACEMENT":       1,
	"IN_BANNER_PLACEMENT":       2,
	"IN_ARTICLE_PLACEMENT":      3,
	"IN_FEED_PLACEMENT":         4,
	"FLOATING_PLACEMENT":        5,
}

func (x Enums_BidRequest_Impression_Video_VideoPlacementType) Enum() *Enums_BidRequest_Impression_Video_VideoPlacementType {
	p := new(Enums_BidRequest_Impression_Video_VideoPlacementType)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_VideoPlacementType) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_VideoPlacementType_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_VideoPlacementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_VideoPlacementType_value, data, "Enums_BidRequest_Impression_Video_VideoPlacementType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_VideoPlacementType(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_VideoPlacementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 6}
}

// OpenRTB 2.5: The various modes for when playback terminates.
type Enums_BidRequest_Impression_Video_PlaybackCessationMode int32

const (
	// On Video Completion or when Terminated by User
	Enums_BidRequest_Impression_Video_COMPLETION_OR_USER Enums_BidRequest_Impression_Video_PlaybackCessationMode = 1
	// On Leaving Viewport or when Terminated by User
	Enums_BidRequest_Impression_Video_LEAVING_OR_USER Enums_BidRequest_Impression_Video_PlaybackCessationMode = 2
	// On Leaving Viewport Continues as a Floating/Slider Unit until
	// Video Completion or when Terminated by User
	Enums_BidRequest_Impression_Video_LEAVING_CONTINUES_OR_USER Enums_BidRequest_Impression_Video_PlaybackCessationMode = 3
)

var Enums_BidRequest_Impression_Video_PlaybackCessationMode_name = map[int32]string{
	1: "COMPLETION_OR_USER",
	2: "LEAVING_OR_USER",
	3: "LEAVING_CONTINUES_OR_USER",
}
var Enums_BidRequest_Impression_Video_PlaybackCessationMode_value = map[string]int32{
	"COMPLETION_OR_USER":        1,
	"LEAVING_OR_USER":           2,
	"LEAVING_CONTINUES_OR_USER": 3,
}

func (x Enums_BidRequest_Impression_Video_PlaybackCessationMode) Enum() *Enums_BidRequest_Impression_Video_PlaybackCessationMode {
	p := new(Enums_BidRequest_Impression_Video_PlaybackCessationMode)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_PlaybackCessationMode) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_PlaybackCessationMode_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_PlaybackCessationMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_PlaybackCessationMode_value, data, "Enums_BidRequest_Impression_Video_PlaybackCessationMode")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_PlaybackCessationMode(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_PlaybackCessationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 7}
}

// Some exchanges support a "videotype=rewarded" field for videos. This
// signifies that an end user will recieve a reward for interacting with
// the ad. E.g. if the user watches the whole video, they get game currency
// in a phone game. There aren't other possible "videotype" values yet, but
// there could be in the future.
type Enums_BidRequest_Impression_Video_VideoExtensions_VideoType int32

const (
	Enums_BidRequest_Impression_Video_VideoExtensions_UNKNOWN  Enums_BidRequest_Impression_Video_VideoExtensions_VideoType = -1
	Enums_BidRequest_Impression_Video_VideoExtensions_REWARDED Enums_BidRequest_Impression_Video_VideoExtensions_VideoType = 0
)

var Enums_BidRequest_Impression_Video_VideoExtensions_VideoType_name = map[int32]string{
	-1: "UNKNOWN",
	0:  "REWARDED",
}
var Enums_BidRequest_Impression_Video_VideoExtensions_VideoType_value = map[string]int32{
	"UNKNOWN":  -1,
	"REWARDED": 0,
}

func (x Enums_BidRequest_Impression_Video_VideoExtensions_VideoType) Enum() *Enums_BidRequest_Impression_Video_VideoExtensions_VideoType {
	p := new(Enums_BidRequest_Impression_Video_VideoExtensions_VideoType)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_Video_VideoExtensions_VideoType) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_Video_VideoExtensions_VideoType_name, int32(x))
}
func (x *Enums_BidRequest_Impression_Video_VideoExtensions_VideoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_Video_VideoExtensions_VideoType_value, data, "Enums_BidRequest_Impression_Video_VideoExtensions_VideoType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_VideoExtensions_VideoType(value)
	return nil
}
func (Enums_BidRequest_Impression_Video_VideoExtensions_VideoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 0, 0}
}

// OpenRTB Native 7.1: Core layouts. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
type Enums_BidRequest_Impression_NativeRequest_LayoutId int32

const (
	Enums_BidRequest_Impression_NativeRequest_CONTENT_WALL   Enums_BidRequest_Impression_NativeRequest_LayoutId = 1
	Enums_BidRequest_Impression_NativeRequest_APP_WALL       Enums_BidRequest_Impression_NativeRequest_LayoutId = 2
	Enums_BidRequest_Impression_NativeRequest_NEWS_FEED      Enums_BidRequest_Impression_NativeRequest_LayoutId = 3
	Enums_BidRequest_Impression_NativeRequest_CHAT_LIST      Enums_BidRequest_Impression_NativeRequest_LayoutId = 4
	Enums_BidRequest_Impression_NativeRequest_CAROUSEL       Enums_BidRequest_Impression_NativeRequest_LayoutId = 5
	Enums_BidRequest_Impression_NativeRequest_CONTENT_STREAM Enums_BidRequest_Impression_NativeRequest_LayoutId = 6
	Enums_BidRequest_Impression_NativeRequest_GRID           Enums_BidRequest_Impression_NativeRequest_LayoutId = 7
)

var Enums_BidRequest_Impression_NativeRequest_LayoutId_name = map[int32]string{
	1: "CONTENT_WALL",
	2: "APP_WALL",
	3: "NEWS_FEED",
	4: "CHAT_LIST",
	5: "CAROUSEL",
	6: "CONTENT_STREAM",
	7: "GRID",
}
var Enums_BidRequest_Impression_NativeRequest_LayoutId_value = map[string]int32{
	"CONTENT_WALL":   1,
	"APP_WALL":       2,
	"NEWS_FEED":      3,
	"CHAT_LIST":      4,
	"CAROUSEL":       5,
	"CONTENT_STREAM": 6,
	"GRID":           7,
}

func (x Enums_BidRequest_Impression_NativeRequest_LayoutId) Enum() *Enums_BidRequest_Impression_NativeRequest_LayoutId {
	p := new(Enums_BidRequest_Impression_NativeRequest_LayoutId)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_NativeRequest_LayoutId) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_NativeRequest_LayoutId_name, int32(x))
}
func (x *Enums_BidRequest_Impression_NativeRequest_LayoutId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_NativeRequest_LayoutId_value, data, "Enums_BidRequest_Impression_NativeRequest_LayoutId")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_LayoutId(value)
	return nil
}
func (Enums_BidRequest_Impression_NativeRequest_LayoutId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 2, 0}
}

// OpenRTB Native 7.2: Below is a list of the core ad unit ids described
// by IAB here:
// http://www.iab.net/media/file/IABNativeAdvertisingPlaybook120413.pdf
// In feed unit is essentially a layout, it has been removed from the list.
// The in feed units can be identified via the layout parameter on the
// request. An implementing exchange may not support all asset variants
// or introduce new ones unique to that system.
type Enums_BidRequest_Impression_NativeRequest_AdUnitId int32

const (
	Enums_BidRequest_Impression_NativeRequest_PAID_SEARCH_UNIT      Enums_BidRequest_Impression_NativeRequest_AdUnitId = 1
	Enums_BidRequest_Impression_NativeRequest_RECOMMENDATION_WIDGET Enums_BidRequest_Impression_NativeRequest_AdUnitId = 2
	Enums_BidRequest_Impression_NativeRequest_PROMOTED_LISTING      Enums_BidRequest_Impression_NativeRequest_AdUnitId = 3
	Enums_BidRequest_Impression_NativeRequest_IAB_IN_AD_NATIVE      Enums_BidRequest_Impression_NativeRequest_AdUnitId = 4
	Enums_BidRequest_Impression_NativeRequest_CUSTOM                Enums_BidRequest_Impression_NativeRequest_AdUnitId = 5
)

var Enums_BidRequest_Impression_NativeRequest_AdUnitId_name = map[int32]string{
	1: "PAID_SEARCH_UNIT",
	2: "RECOMMENDATION_WIDGET",
	3: "PROMOTED_LISTING",
	4: "IAB_IN_AD_NATIVE",
	5: "CUSTOM",
}
var Enums_BidRequest_Impression_NativeRequest_AdUnitId_value = map[string]int32{
	"PAID_SEARCH_UNIT":      1,
	"RECOMMENDATION_WIDGET": 2,
	"PROMOTED_LISTING":      3,
	"IAB_IN_AD_NATIVE":      4,
	"CUSTOM":                5,
}

func (x Enums_BidRequest_Impression_NativeRequest_AdUnitId) Enum() *Enums_BidRequest_Impression_NativeRequest_AdUnitId {
	p := new(Enums_BidRequest_Impression_NativeRequest_AdUnitId)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_NativeRequest_AdUnitId) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_NativeRequest_AdUnitId_name, int32(x))
}
func (x *Enums_BidRequest_Impression_NativeRequest_AdUnitId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_NativeRequest_AdUnitId_value, data, "Enums_BidRequest_Impression_NativeRequest_AdUnitId")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_AdUnitId(value)
	return nil
}
func (Enums_BidRequest_Impression_NativeRequest_AdUnitId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 2, 1}
}

// The context in which the ad appears - what type of content is
// surrounding the ad on the page at a high level. This maps directly to
// the new Deep Dive on In-Feed Ad Units. This denotes the primary
// context, but does not imply other content may not exist on the page -
// for example it's expected that most content platforms have some
// social components, etc.
type Enums_BidRequest_Impression_NativeRequest_Context int32

const (
	// Content-centric context such as newsfeed, article, image gallery, video
	// gallery, or similar.
	Enums_BidRequest_Impression_NativeRequest_CONTENT_CENTRIC Enums_BidRequest_Impression_NativeRequest_Context = 1
	// Social-centric context such as social network feed, email, chat, or
	// similar.
	Enums_BidRequest_Impression_NativeRequest_SOCIAL_CENTRIC Enums_BidRequest_Impression_NativeRequest_Context = 2
	// Product context such as product listings, details, recommendations,
	// reviews, or similar.
	Enums_BidRequest_Impression_NativeRequest_PRODUCT Enums_BidRequest_Impression_NativeRequest_Context = 3
)

var Enums_BidRequest_Impression_NativeRequest_Context_name = map[int32]string{
	1: "CONTENT_CENTRIC",
	2: "SOCIAL_CENTRIC",
	3: "PRODUCT",
}
var Enums_BidRequest_Impression_NativeRequest_Context_value = map[string]int32{
	"CONTENT_CENTRIC": 1,
	"SOCIAL_CENTRIC":  2,
	"PRODUCT":         3,
}

func (x Enums_BidRequest_Impression_NativeRequest_Context) Enum() *Enums_BidRequest_Impression_NativeRequest_Context {
	p := new(Enums_BidRequest_Impression_NativeRequest_Context)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_NativeRequest_Context) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_NativeRequest_Context_name, int32(x))
}
func (x *Enums_BidRequest_Impression_NativeRequest_Context) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_NativeRequest_Context_value, data, "Enums_BidRequest_Impression_NativeRequest_Context")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_Context(value)
	return nil
}
func (Enums_BidRequest_Impression_NativeRequest_Context) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 2, 2}
}

// Next-level context in which the ad appears. Again this reflects the
// primary context, and does not imply no presence of other
// elements. For example, an article is likely to contain images but is
// still first and foremost an article. SubType should only be combined
// with the primary context type as indicated (ie for a context type of 1,
// only context subtypes that start with 1 are valid).
type Enums_BidRequest_Impression_NativeRequest_ContextSubtype int32

const (
	// General or mixed content.
	Enums_BidRequest_Impression_NativeRequest_GENERAL_OR_MIXED Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 10
	// Primarily article content (which of course could include images, etc
	// as part of the article)
	Enums_BidRequest_Impression_NativeRequest_ARTICLE Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 11
	// Primarily video content
	Enums_BidRequest_Impression_NativeRequest_VIDEO Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 12
	// Primarily audio content
	Enums_BidRequest_Impression_NativeRequest_AUDIO Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 13
	// Primarily image content
	Enums_BidRequest_Impression_NativeRequest_IMAGE Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 14
	// User-generated content - forums, comments, etc
	Enums_BidRequest_Impression_NativeRequest_USER_GENERATED Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 15
	// General social content such as a general social network
	Enums_BidRequest_Impression_NativeRequest_GENERAL_SOCIAL Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 20
	// Primarily email content
	Enums_BidRequest_Impression_NativeRequest_EMAIL Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 21
	// Primarily chat/IM content
	Enums_BidRequest_Impression_NativeRequest_CHAT_IM Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 22
	// Content focused on selling products, whether digital or physical
	Enums_BidRequest_Impression_NativeRequest_SELLING_PRODUCTS Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 30
	// Application store/marketplace
	Enums_BidRequest_Impression_NativeRequest_APPLICATION Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 31
	// Product reviews site primarily (which may sell product secondarily)
	Enums_BidRequest_Impression_NativeRequest_REVIEW_SITE Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 32
)

var Enums_BidRequest_Impression_NativeRequest_ContextSubtype_name = map[int32]string{
	10: "GENERAL_OR_MIXED",
	11: "ARTICLE",
	12: "VIDEO",
	13: "AUDIO",
	14: "IMAGE",
	15: "USER_GENERATED",
	20: "GENERAL_SOCIAL",
	21: "EMAIL",
	22: "CHAT_IM",
	30: "SELLING_PRODUCTS",
	31: "APPLICATION",
	32: "REVIEW_SITE",
}
var Enums_BidRequest_Impression_NativeRequest_ContextSubtype_value = map[string]int32{
	"GENERAL_OR_MIXED": 10,
	"ARTICLE":          11,
	"VIDEO":            12,
	"AUDIO":            13,
	"IMAGE":            14,
	"USER_GENERATED":   15,
	"GENERAL_SOCIAL":   20,
	"EMAIL":            21,
	"CHAT_IM":          22,
	"SELLING_PRODUCTS": 30,
	"APPLICATION":      31,
	"REVIEW_SITE":      32,
}

func (x Enums_BidRequest_Impression_NativeRequest_ContextSubtype) Enum() *Enums_BidRequest_Impression_NativeRequest_ContextSubtype {
	p := new(Enums_BidRequest_Impression_NativeRequest_ContextSubtype)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_NativeRequest_ContextSubtype) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_NativeRequest_ContextSubtype_name, int32(x))
}
func (x *Enums_BidRequest_Impression_NativeRequest_ContextSubtype) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_NativeRequest_ContextSubtype_value, data, "Enums_BidRequest_Impression_NativeRequest_ContextSubtype")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_ContextSubtype(value)
	return nil
}
func (Enums_BidRequest_Impression_NativeRequest_ContextSubtype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 2, 3}
}

// The FORMAT of the ad you are purchasing, separate from the surrounding
// context
type Enums_BidRequest_Impression_NativeRequest_PlacementType int32

const (
	// In the feed of content - for example as an item inside the organic
	// feed/grid/listing/carousel.
	Enums_BidRequest_Impression_NativeRequest_FEED Enums_BidRequest_Impression_NativeRequest_PlacementType = 1
	// In the atomic unit of the content - IE in the article page or
	// single image page
	Enums_BidRequest_Impression_NativeRequest_ATOMIC_UNIT Enums_BidRequest_Impression_NativeRequest_PlacementType = 2
	// Outside the core content - for example in the ads section on the right
	// rail, as a banner-style placement near the content, etc.
	Enums_BidRequest_Impression_NativeRequest_OUTSIDE_THE_CORE Enums_BidRequest_Impression_NativeRequest_PlacementType = 3
	// Recommendation widget, most commonly presented below the article
	// content.
	Enums_BidRequest_Impression_NativeRequest_WIDGET Enums_BidRequest_Impression_NativeRequest_PlacementType = 4
)

var Enums_BidRequest_Impression_NativeRequest_PlacementType_name = map[int32]string{
	1: "FEED",
	2: "ATOMIC_UNIT",
	3: "OUTSIDE_THE_CORE",
	4: "WIDGET",
}
var Enums_BidRequest_Impression_NativeRequest_PlacementType_value = map[string]int32{
	"FEED":             1,
	"ATOMIC_UNIT":      2,
	"OUTSIDE_THE_CORE": 3,
	"WIDGET":           4,
}

func (x Enums_BidRequest_Impression_NativeRequest_PlacementType) Enum() *Enums_BidRequest_Impression_NativeRequest_PlacementType {
	p := new(Enums_BidRequest_Impression_NativeRequest_PlacementType)
	*p = x
	return p
}
func (x Enums_BidRequest_Impression_NativeRequest_PlacementType) String() string {
	return proto.EnumName(Enums_BidRequest_Impression_NativeRequest_PlacementType_name, int32(x))
}
func (x *Enums_BidRequest_Impression_NativeRequest_PlacementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Impression_NativeRequest_PlacementType_value, data, "Enums_BidRequest_Impression_NativeRequest_PlacementType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_PlacementType(value)
	return nil
}
func (Enums_BidRequest_Impression_NativeRequest_PlacementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 2, 4}
}

// OpenRTB 6.13: Options for the content context; what type of content is it.
type Enums_BidRequest_Content_Context int32

const (
	Enums_BidRequest_Content_VIDEO           Enums_BidRequest_Content_Context = 1
	Enums_BidRequest_Content_GAME            Enums_BidRequest_Content_Context = 2
	Enums_BidRequest_Content_MUSIC           Enums_BidRequest_Content_Context = 3
	Enums_BidRequest_Content_APPLICATION     Enums_BidRequest_Content_Context = 4
	Enums_BidRequest_Content_TEXT            Enums_BidRequest_Content_Context = 5
	Enums_BidRequest_Content_OTHER           Enums_BidRequest_Content_Context = 6
	Enums_BidRequest_Content_CONTEXT_UNKNOWN Enums_BidRequest_Content_Context = 7
)

var Enums_BidRequest_Content_Context_name = map[int32]string{
	1: "VIDEO",
	2: "GAME",
	3: "MUSIC",
	4: "APPLICATION",
	5: "TEXT",
	6: "OTHER",
	7: "CONTEXT_UNKNOWN",
}
var Enums_BidRequest_Content_Context_value = map[string]int32{
	"VIDEO":           1,
	"GAME":            2,
	"MUSIC":           3,
	"APPLICATION":     4,
	"TEXT":            5,
	"OTHER":           6,
	"CONTEXT_UNKNOWN": 7,
}

func (x Enums_BidRequest_Content_Context) Enum() *Enums_BidRequest_Content_Context {
	p := new(Enums_BidRequest_Content_Context)
	*p = x
	return p
}
func (x Enums_BidRequest_Content_Context) String() string {
	return proto.EnumName(Enums_BidRequest_Content_Context_name, int32(x))
}
func (x *Enums_BidRequest_Content_Context) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Content_Context_value, data, "Enums_BidRequest_Content_Context")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_Context(value)
	return nil
}
func (Enums_BidRequest_Content_Context) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 1, 0}
}

// OpenRTB 6.14: video quality.
// See http://www.iab.net/media/file/long-form-video-final.pdf
type Enums_BidRequest_Content_VideoQuality int32

const (
	Enums_BidRequest_Content_QUALITY_UNKNOWN Enums_BidRequest_Content_VideoQuality = 0
	Enums_BidRequest_Content_PROFESSIONAL    Enums_BidRequest_Content_VideoQuality = 1
	Enums_BidRequest_Content_PROSUMER        Enums_BidRequest_Content_VideoQuality = 2
	Enums_BidRequest_Content_USER_GENERATED  Enums_BidRequest_Content_VideoQuality = 3
)

var Enums_BidRequest_Content_VideoQuality_name = map[int32]string{
	0: "QUALITY_UNKNOWN",
	1: "PROFESSIONAL",
	2: "PROSUMER",
	3: "USER_GENERATED",
}
var Enums_BidRequest_Content_VideoQuality_value = map[string]int32{
	"QUALITY_UNKNOWN": 0,
	"PROFESSIONAL":    1,
	"PROSUMER":        2,
	"USER_GENERATED":  3,
}

func (x Enums_BidRequest_Content_VideoQuality) Enum() *Enums_BidRequest_Content_VideoQuality {
	p := new(Enums_BidRequest_Content_VideoQuality)
	*p = x
	return p
}
func (x Enums_BidRequest_Content_VideoQuality) String() string {
	return proto.EnumName(Enums_BidRequest_Content_VideoQuality_name, int32(x))
}
func (x *Enums_BidRequest_Content_VideoQuality) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Content_VideoQuality_value, data, "Enums_BidRequest_Content_VideoQuality")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_VideoQuality(value)
	return nil
}
func (Enums_BidRequest_Content_VideoQuality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 1, 1}
}

// OpenRTB 6.18: media ratings using the QAG categorization.
// See http://www.iab.net/ne_guidelines
type Enums_BidRequest_Content_QAGMediaRating int32

const (
	Enums_BidRequest_Content_UNKNOWN       Enums_BidRequest_Content_QAGMediaRating = -1
	Enums_BidRequest_Content_ALL_AUDIENCES Enums_BidRequest_Content_QAGMediaRating = 1
	Enums_BidRequest_Content_EVERYONE_12   Enums_BidRequest_Content_QAGMediaRating = 2
	Enums_BidRequest_Content_MATURE        Enums_BidRequest_Content_QAGMediaRating = 3
)

var Enums_BidRequest_Content_QAGMediaRating_name = map[int32]string{
	-1: "UNKNOWN",
	1:  "ALL_AUDIENCES",
	2:  "EVERYONE_12",
	3:  "MATURE",
}
var Enums_BidRequest_Content_QAGMediaRating_value = map[string]int32{
	"UNKNOWN":       -1,
	"ALL_AUDIENCES": 1,
	"EVERYONE_12":   2,
	"MATURE":        3,
}

func (x Enums_BidRequest_Content_QAGMediaRating) Enum() *Enums_BidRequest_Content_QAGMediaRating {
	p := new(Enums_BidRequest_Content_QAGMediaRating)
	*p = x
	return p
}
func (x Enums_BidRequest_Content_QAGMediaRating) String() string {
	return proto.EnumName(Enums_BidRequest_Content_QAGMediaRating_name, int32(x))
}
func (x *Enums_BidRequest_Content_QAGMediaRating) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Content_QAGMediaRating_value, data, "Enums_BidRequest_Content_QAGMediaRating")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_QAGMediaRating(value)
	return nil
}
func (Enums_BidRequest_Content_QAGMediaRating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 1, 2}
}

type Enums_BidRequest_Content_SourceRelationship int32

const (
	Enums_BidRequest_Content_INDIRECT Enums_BidRequest_Content_SourceRelationship = 0
	Enums_BidRequest_Content_DIRECT   Enums_BidRequest_Content_SourceRelationship = 1
)

var Enums_BidRequest_Content_SourceRelationship_name = map[int32]string{
	0: "INDIRECT",
	1: "DIRECT",
}
var Enums_BidRequest_Content_SourceRelationship_value = map[string]int32{
	"INDIRECT": 0,
	"DIRECT":   1,
}

func (x Enums_BidRequest_Content_SourceRelationship) Enum() *Enums_BidRequest_Content_SourceRelationship {
	p := new(Enums_BidRequest_Content_SourceRelationship)
	*p = x
	return p
}
func (x Enums_BidRequest_Content_SourceRelationship) String() string {
	return proto.EnumName(Enums_BidRequest_Content_SourceRelationship_name, int32(x))
}
func (x *Enums_BidRequest_Content_SourceRelationship) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Content_SourceRelationship_value, data, "Enums_BidRequest_Content_SourceRelationship")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_SourceRelationship(value)
	return nil
}
func (Enums_BidRequest_Content_SourceRelationship) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 1, 3}
}

// OpenRTB 6.10: connection type.
type Enums_BidRequest_Device_ConnectionType int32

const (
	Enums_BidRequest_Device_CONNECTION_UNKNOWN Enums_BidRequest_Device_ConnectionType = 0
	Enums_BidRequest_Device_ETHERNET           Enums_BidRequest_Device_ConnectionType = 1
	Enums_BidRequest_Device_WIFI               Enums_BidRequest_Device_ConnectionType = 2
	Enums_BidRequest_Device_CELL_UNKNOWN       Enums_BidRequest_Device_ConnectionType = 3
	Enums_BidRequest_Device_CELL_2G            Enums_BidRequest_Device_ConnectionType = 4
	Enums_BidRequest_Device_CELL_3G            Enums_BidRequest_Device_ConnectionType = 5
	Enums_BidRequest_Device_CELL_4G            Enums_BidRequest_Device_ConnectionType = 6
)

var Enums_BidRequest_Device_ConnectionType_name = map[int32]string{
	0: "CONNECTION_UNKNOWN",
	1: "ETHERNET",
	2: "WIFI",
	3: "CELL_UNKNOWN",
	4: "CELL_2G",
	5: "CELL_3G",
	6: "CELL_4G",
}
var Enums_BidRequest_Device_ConnectionType_value = map[string]int32{
	"CONNECTION_UNKNOWN": 0,
	"ETHERNET":           1,
	"WIFI":               2,
	"CELL_UNKNOWN":       3,
	"CELL_2G":            4,
	"CELL_3G":            5,
	"CELL_4G":            6,
}

func (x Enums_BidRequest_Device_ConnectionType) Enum() *Enums_BidRequest_Device_ConnectionType {
	p := new(Enums_BidRequest_Device_ConnectionType)
	*p = x
	return p
}
func (x Enums_BidRequest_Device_ConnectionType) String() string {
	return proto.EnumName(Enums_BidRequest_Device_ConnectionType_name, int32(x))
}
func (x *Enums_BidRequest_Device_ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Device_ConnectionType_value, data, "Enums_BidRequest_Device_ConnectionType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Device_ConnectionType(value)
	return nil
}
func (Enums_BidRequest_Device_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 2, 0}
}

// The type of device from which the impression originated.
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG).
type Enums_BidRequest_Device_DeviceType int32

const (
	Enums_BidRequest_Device_UNKNOWN          Enums_BidRequest_Device_DeviceType = -1
	Enums_BidRequest_Device_MOBILE           Enums_BidRequest_Device_DeviceType = 1
	Enums_BidRequest_Device_PC               Enums_BidRequest_Device_DeviceType = 2
	Enums_BidRequest_Device_CONNECTED_TV     Enums_BidRequest_Device_DeviceType = 3
	Enums_BidRequest_Device_PHONE            Enums_BidRequest_Device_DeviceType = 4
	Enums_BidRequest_Device_TABLET           Enums_BidRequest_Device_DeviceType = 5
	Enums_BidRequest_Device_CONNECTED_DEVICE Enums_BidRequest_Device_DeviceType = 6
	Enums_BidRequest_Device_SET_TOP_BOX      Enums_BidRequest_Device_DeviceType = 7
)

var Enums_BidRequest_Device_DeviceType_name = map[int32]string{
	-1: "UNKNOWN",
	1:  "MOBILE",
	2:  "PC",
	3:  "CONNECTED_TV",
	4:  "PHONE",
	5:  "TABLET",
	6:  "CONNECTED_DEVICE",
	7:  "SET_TOP_BOX",
}
var Enums_BidRequest_Device_DeviceType_value = map[string]int32{
	"UNKNOWN":          -1,
	"MOBILE":           1,
	"PC":               2,
	"CONNECTED_TV":     3,
	"PHONE":            4,
	"TABLET":           5,
	"CONNECTED_DEVICE": 6,
	"SET_TOP_BOX":      7,
}

func (x Enums_BidRequest_Device_DeviceType) Enum() *Enums_BidRequest_Device_DeviceType {
	p := new(Enums_BidRequest_Device_DeviceType)
	*p = x
	return p
}
func (x Enums_BidRequest_Device_DeviceType) String() string {
	return proto.EnumName(Enums_BidRequest_Device_DeviceType_name, int32(x))
}
func (x *Enums_BidRequest_Device_DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Device_DeviceType_value, data, "Enums_BidRequest_Device_DeviceType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Device_DeviceType(value)
	return nil
}
func (Enums_BidRequest_Device_DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 2, 1}
}

// OpenRTB 6.15: how the geographic information was determined.
type Enums_BidRequest_Geo_LocationType int32

const (
	Enums_BidRequest_Geo_GPS_LOCATION Enums_BidRequest_Geo_LocationType = 1
	Enums_BidRequest_Geo_IP           Enums_BidRequest_Geo_LocationType = 2
	Enums_BidRequest_Geo_USER         Enums_BidRequest_Geo_LocationType = 3
)

var Enums_BidRequest_Geo_LocationType_name = map[int32]string{
	1: "GPS_LOCATION",
	2: "IP",
	3: "USER",
}
var Enums_BidRequest_Geo_LocationType_value = map[string]int32{
	"GPS_LOCATION": 1,
	"IP":           2,
	"USER":         3,
}

func (x Enums_BidRequest_Geo_LocationType) Enum() *Enums_BidRequest_Geo_LocationType {
	p := new(Enums_BidRequest_Geo_LocationType)
	*p = x
	return p
}
func (x Enums_BidRequest_Geo_LocationType) String() string {
	return proto.EnumName(Enums_BidRequest_Geo_LocationType_name, int32(x))
}
func (x *Enums_BidRequest_Geo_LocationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_Geo_LocationType_value, data, "Enums_BidRequest_Geo_LocationType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Geo_LocationType(value)
	return nil
}
func (Enums_BidRequest_Geo_LocationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 3, 0}
}

// UserID types.
// The enum value less then 100 should be in sync with
// buzz/mysql/data/version 0.5/insert_segment_user_type.sql
type Enums_BidRequest_User_UserIdType int32

const (
	Enums_BidRequest_User_UNKNOWN         Enums_BidRequest_User_UserIdType = -1
	Enums_BidRequest_User_BEESWAX         Enums_BidRequest_User_UserIdType = 0
	Enums_BidRequest_User_CUSTOMER        Enums_BidRequest_User_UserIdType = 1
	Enums_BidRequest_User_IDFA            Enums_BidRequest_User_UserIdType = 2
	Enums_BidRequest_User_IDFA_MD5        Enums_BidRequest_User_UserIdType = 3
	Enums_BidRequest_User_IDFA_SHA1       Enums_BidRequest_User_UserIdType = 4
	Enums_BidRequest_User_AD_ID           Enums_BidRequest_User_UserIdType = 5
	Enums_BidRequest_User_AD_ID_MD5       Enums_BidRequest_User_UserIdType = 6
	Enums_BidRequest_User_AD_ID_SHA1      Enums_BidRequest_User_UserIdType = 7
	Enums_BidRequest_User_OTHER_MOBILE_ID Enums_BidRequest_User_UserIdType = 8
)

var Enums_BidRequest_User_UserIdType_name = map[int32]string{
	-1: "UNKNOWN",
	0:  "BEESWAX",
	1:  "CUSTOMER",
	2:  "IDFA",
	3:  "IDFA_MD5",
	4:  "IDFA_SHA1",
	5:  "AD_ID",
	6:  "AD_ID_MD5",
	7:  "AD_ID_SHA1",
	8:  "OTHER_MOBILE_ID",
}
var Enums_BidRequest_User_UserIdType_value = map[string]int32{
	"UNKNOWN":         -1,
	"BEESWAX":         0,
	"CUSTOMER":        1,
	"IDFA":            2,
	"IDFA_MD5":        3,
	"IDFA_SHA1":       4,
	"AD_ID":           5,
	"AD_ID_MD5":       6,
	"AD_ID_SHA1":      7,
	"OTHER_MOBILE_ID": 8,
}

func (x Enums_BidRequest_User_UserIdType) Enum() *Enums_BidRequest_User_UserIdType {
	p := new(Enums_BidRequest_User_UserIdType)
	*p = x
	return p
}
func (x Enums_BidRequest_User_UserIdType) String() string {
	return proto.EnumName(Enums_BidRequest_User_UserIdType_name, int32(x))
}
func (x *Enums_BidRequest_User_UserIdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidRequest_User_UserIdType_value, data, "Enums_BidRequest_User_UserIdType")
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_User_UserIdType(value)
	return nil
}
func (Enums_BidRequest_User_UserIdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 4, 0}
}

// The following table lists the options for a bidder to signal
// the exchange as to why it did not offer a bid for the impression.
type Enums_BidResponse_NoBidReason int32

const (
	Enums_BidResponse_UNKNOWN_ERROR              Enums_BidResponse_NoBidReason = 0
	Enums_BidResponse_TECHNICAL_ERROR            Enums_BidResponse_NoBidReason = 1
	Enums_BidResponse_INVALID_REQUEST            Enums_BidResponse_NoBidReason = 2
	Enums_BidResponse_KNOWN_WEB_SPIDER           Enums_BidResponse_NoBidReason = 3
	Enums_BidResponse_SUSPECTED_NONHUMAN_TRAFFIC Enums_BidResponse_NoBidReason = 4
	Enums_BidResponse_CLOUD_DATACENTER_PROXYIP   Enums_BidResponse_NoBidReason = 5
	Enums_BidResponse_UNSUPPORTED_DEVICE         Enums_BidResponse_NoBidReason = 6
	Enums_BidResponse_BLOCKED_PUBLISHER          Enums_BidResponse_NoBidReason = 7
	Enums_BidResponse_UNMATCHED_USER             Enums_BidResponse_NoBidReason = 8
)

var Enums_BidResponse_NoBidReason_name = map[int32]string{
	0: "UNKNOWN_ERROR",
	1: "TECHNICAL_ERROR",
	2: "INVALID_REQUEST",
	3: "KNOWN_WEB_SPIDER",
	4: "SUSPECTED_NONHUMAN_TRAFFIC",
	5: "CLOUD_DATACENTER_PROXYIP",
	6: "UNSUPPORTED_DEVICE",
	7: "BLOCKED_PUBLISHER",
	8: "UNMATCHED_USER",
}
var Enums_BidResponse_NoBidReason_value = map[string]int32{
	"UNKNOWN_ERROR":              0,
	"TECHNICAL_ERROR":            1,
	"INVALID_REQUEST":            2,
	"KNOWN_WEB_SPIDER":           3,
	"SUSPECTED_NONHUMAN_TRAFFIC": 4,
	"CLOUD_DATACENTER_PROXYIP":   5,
	"UNSUPPORTED_DEVICE":         6,
	"BLOCKED_PUBLISHER":          7,
	"UNMATCHED_USER":             8,
}

func (x Enums_BidResponse_NoBidReason) Enum() *Enums_BidResponse_NoBidReason {
	p := new(Enums_BidResponse_NoBidReason)
	*p = x
	return p
}
func (x Enums_BidResponse_NoBidReason) String() string {
	return proto.EnumName(Enums_BidResponse_NoBidReason_name, int32(x))
}
func (x *Enums_BidResponse_NoBidReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_BidResponse_NoBidReason_value, data, "Enums_BidResponse_NoBidReason")
	if err != nil {
		return err
	}
	*x = Enums_BidResponse_NoBidReason(value)
	return nil
}
func (Enums_BidResponse_NoBidReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 1, 0}
}

// Exchange Id.
// These values are obtained from inventory_source table in fes_buzz_db.
type Enums_Inventory_Source int32

const (
	Enums_Inventory_UNKNOWN_SOURCE  Enums_Inventory_Source = -1
	Enums_Inventory_GOOGLE_ADX      Enums_Inventory_Source = 0
	Enums_Inventory_LIVERAIL        Enums_Inventory_Source = 1
	Enums_Inventory_BRIGHTROLL      Enums_Inventory_Source = 2
	Enums_Inventory_MOPUB           Enums_Inventory_Source = 3
	Enums_Inventory_AERSERV         Enums_Inventory_Source = 4
	Enums_Inventory_PULSEPOINT      Enums_Inventory_Source = 5
	Enums_Inventory_RUBICON         Enums_Inventory_Source = 6
	Enums_Inventory_ADAPTV          Enums_Inventory_Source = 7
	Enums_Inventory_MILLENNIAL      Enums_Inventory_Source = 8
	Enums_Inventory_APPNEXUS        Enums_Inventory_Source = 9
	Enums_Inventory_OPENX           Enums_Inventory_Source = 10
	Enums_Inventory_PUBMATIC        Enums_Inventory_Source = 11
	Enums_Inventory_OPERA_MEDIA     Enums_Inventory_Source = 12
	Enums_Inventory_RTK             Enums_Inventory_Source = 13
	Enums_Inventory_INNERACTIVE     Enums_Inventory_Source = 14
	Enums_Inventory_TREMOR          Enums_Inventory_Source = 15
	Enums_Inventory_INDEX_EXCHANGE  Enums_Inventory_Source = 16
	Enums_Inventory_YAHOO           Enums_Inventory_Source = 17
	Enums_Inventory_SMAATO          Enums_Inventory_Source = 18
	Enums_Inventory_APP_LOVIN       Enums_Inventory_Source = 19
	Enums_Inventory_MOLABS          Enums_Inventory_Source = 20
	Enums_Inventory_SPOTX           Enums_Inventory_Source = 21
	Enums_Inventory_FYBER           Enums_Inventory_Source = 22
	Enums_Inventory_ADBUDDIZ        Enums_Inventory_Source = 23
	Enums_Inventory_ADCONDUCTOR     Enums_Inventory_Source = 24
	Enums_Inventory_ADEASY          Enums_Inventory_Source = 25
	Enums_Inventory_ADFORM          Enums_Inventory_Source = 26
	Enums_Inventory_ADLANTIC        Enums_Inventory_Source = 27
	Enums_Inventory_ADMAX           Enums_Inventory_Source = 28
	Enums_Inventory_ADMEDIA         Enums_Inventory_Source = 29
	Enums_Inventory_ADMETA          Enums_Inventory_Source = 30
	Enums_Inventory_ADMIXER         Enums_Inventory_Source = 31
	Enums_Inventory_ADMIZED         Enums_Inventory_Source = 32
	Enums_Inventory_ADOP            Enums_Inventory_Source = 33
	Enums_Inventory_ADTHINK         Enums_Inventory_Source = 34
	Enums_Inventory_ADRIVER         Enums_Inventory_Source = 35
	Enums_Inventory_ADRU            Enums_Inventory_Source = 36
	Enums_Inventory_ADSCALE         Enums_Inventory_Source = 37
	Enums_Inventory_ADSNATIVE       Enums_Inventory_Source = 38
	Enums_Inventory_ADSKOM          Enums_Inventory_Source = 39
	Enums_Inventory_ADSPRUCE        Enums_Inventory_Source = 40
	Enums_Inventory_ADSTIR          Enums_Inventory_Source = 41
	Enums_Inventory_ADSUPPLY        Enums_Inventory_Source = 42
	Enums_Inventory_ADUNITY         Enums_Inventory_Source = 43
	Enums_Inventory_ADYOULIKE       Enums_Inventory_Source = 44
	Enums_Inventory_AMBIENT         Enums_Inventory_Source = 45
	Enums_Inventory_ANCORA          Enums_Inventory_Source = 46
	Enums_Inventory_AOL             Enums_Inventory_Source = 47
	Enums_Inventory_APPVADOR        Enums_Inventory_Source = 48
	Enums_Inventory_AVOCARROT       Enums_Inventory_Source = 49
	Enums_Inventory_AXONIX          Enums_Inventory_Source = 50
	Enums_Inventory_BEACHFRONT      Enums_Inventory_Source = 51
	Enums_Inventory_BETWEEN         Enums_Inventory_Source = 52
	Enums_Inventory_BIDTELLECT      Enums_Inventory_Source = 53
	Enums_Inventory_BLUEWATERADS    Enums_Inventory_Source = 54
	Enums_Inventory_CAULY           Enums_Inventory_Source = 55
	Enums_Inventory_CENTRO          Enums_Inventory_Source = 56
	Enums_Inventory_CHAMELEON       Enums_Inventory_Source = 57
	Enums_Inventory_CLICKONOMETRICS Enums_Inventory_Source = 58
	Enums_Inventory_CONVERGE        Enums_Inventory_Source = 59
	Enums_Inventory_COULL           Enums_Inventory_Source = 60
	Enums_Inventory_DISH            Enums_Inventory_Source = 61
	Enums_Inventory_EXPERIAN        Enums_Inventory_Source = 62
	Enums_Inventory_FALKTECH        Enums_Inventory_Source = 63
	Enums_Inventory_FMX             Enums_Inventory_Source = 64
	Enums_Inventory_FIDELITY        Enums_Inventory_Source = 65
	Enums_Inventory_FLUCT           Enums_Inventory_Source = 66
	Enums_Inventory_COX             Enums_Inventory_Source = 67
	Enums_Inventory_GENIEE          Enums_Inventory_Source = 68
	Enums_Inventory_GMO             Enums_Inventory_Source = 69
	Enums_Inventory_FLOOR6          Enums_Inventory_Source = 70
	Enums_Inventory_GUMGUM          Enums_Inventory_Source = 71
	Enums_Inventory_IBILLBOARD      Enums_Inventory_Source = 72
	Enums_Inventory_IMOIBLE         Enums_Inventory_Source = 73
	Enums_Inventory_KARGO           Enums_Inventory_Source = 74
	Enums_Inventory_KIOSKED         Enums_Inventory_Source = 75
	Enums_Inventory_KRUX            Enums_Inventory_Source = 76
	Enums_Inventory_LIGATUS         Enums_Inventory_Source = 77
	Enums_Inventory_LIVEINTENT      Enums_Inventory_Source = 78
	Enums_Inventory_LKQD            Enums_Inventory_Source = 79
	Enums_Inventory_LUPON           Enums_Inventory_Source = 80
	Enums_Inventory_MADS            Enums_Inventory_Source = 81
	Enums_Inventory_MEDIABONG       Enums_Inventory_Source = 82
	Enums_Inventory_MICROAD         Enums_Inventory_Source = 83
	Enums_Inventory_MOBFOX          Enums_Inventory_Source = 84
	Enums_Inventory_MOBSMART        Enums_Inventory_Source = 85
	Enums_Inventory_MOCOPLEX        Enums_Inventory_Source = 86
	Enums_Inventory_NASMEDIA        Enums_Inventory_Source = 87
	Enums_Inventory_NATIVEADS       Enums_Inventory_Source = 88
	Enums_Inventory_NETSPRINT       Enums_Inventory_Source = 89
	Enums_Inventory_OOYALA          Enums_Inventory_Source = 90
	Enums_Inventory_OPTIMATIC       Enums_Inventory_Source = 91
	Enums_Inventory_POWERLINKS      Enums_Inventory_Source = 92
	Enums_Inventory_PROFITX         Enums_Inventory_Source = 93
	Enums_Inventory_PUBNATIVE       Enums_Inventory_Source = 94
	Enums_Inventory_REALVU          Enums_Inventory_Source = 95
	Enums_Inventory_REPUBLER        Enums_Inventory_Source = 96
	Enums_Inventory_SARA            Enums_Inventory_Source = 97
	Enums_Inventory_SCALEOUT        Enums_Inventory_Source = 98
	Enums_Inventory_SHARETHROUGH    Enums_Inventory_Source = 99
	Enums_Inventory_SMARTADSERVER   Enums_Inventory_Source = 100
	Enums_Inventory_SONOBI          Enums_Inventory_Source = 101
	Enums_Inventory_SORTABLE        Enums_Inventory_Source = 102
	Enums_Inventory_SSPICYADS       Enums_Inventory_Source = 103
	Enums_Inventory_STICKYADS       Enums_Inventory_Source = 104
	Enums_Inventory_SWITCHCONCEPTS  Enums_Inventory_Source = 105
	Enums_Inventory_TEADS           Enums_Inventory_Source = 106
	Enums_Inventory_THIRDPRESENCE   Enums_Inventory_Source = 107
	Enums_Inventory_THRONE          Enums_Inventory_Source = 108
	Enums_Inventory_TPMN            Enums_Inventory_Source = 109
	Enums_Inventory_TRIPLELIFT      Enums_Inventory_Source = 110
	Enums_Inventory_UCFUNNEL        Enums_Inventory_Source = 111
	Enums_Inventory_UNRULYX         Enums_Inventory_Source = 112
	Enums_Inventory_VDOPIA          Enums_Inventory_Source = 113
	Enums_Inventory_VI              Enums_Inventory_Source = 114
	Enums_Inventory_VMG             Enums_Inventory_Source = 115
	Enums_Inventory_VIDMATIC        Enums_Inventory_Source = 116
	Enums_Inventory_VMAX            Enums_Inventory_Source = 117
	Enums_Inventory_VRTCAL          Enums_Inventory_Source = 118
	Enums_Inventory_VUNGLE          Enums_Inventory_Source = 119
	Enums_Inventory_WORDPRESS       Enums_Inventory_Source = 120
	Enums_Inventory_XROST           Enums_Inventory_Source = 121
	Enums_Inventory_YIELDLAB        Enums_Inventory_Source = 122
	Enums_Inventory_YIELDONE        Enums_Inventory_Source = 123
	Enums_Inventory_YIELDONE_ADS    Enums_Inventory_Source = 124
	Enums_Inventory_YIELDONE_INNITY Enums_Inventory_Source = 125
	Enums_Inventory_YUME            Enums_Inventory_Source = 126
	Enums_Inventory_ZEDO            Enums_Inventory_Source = 127
	Enums_Inventory_ZEOTAP          Enums_Inventory_Source = 128
)

var Enums_Inventory_Source_name = map[int32]string{
	-1:  "UNKNOWN_SOURCE",
	0:   "GOOGLE_ADX",
	1:   "LIVERAIL",
	2:   "BRIGHTROLL",
	3:   "MOPUB",
	4:   "AERSERV",
	5:   "PULSEPOINT",
	6:   "RUBICON",
	7:   "ADAPTV",
	8:   "MILLENNIAL",
	9:   "APPNEXUS",
	10:  "OPENX",
	11:  "PUBMATIC",
	12:  "OPERA_MEDIA",
	13:  "RTK",
	14:  "INNERACTIVE",
	15:  "TREMOR",
	16:  "INDEX_EXCHANGE",
	17:  "YAHOO",
	18:  "SMAATO",
	19:  "APP_LOVIN",
	20:  "MOLABS",
	21:  "SPOTX",
	22:  "FYBER",
	23:  "ADBUDDIZ",
	24:  "ADCONDUCTOR",
	25:  "ADEASY",
	26:  "ADFORM",
	27:  "ADLANTIC",
	28:  "ADMAX",
	29:  "ADMEDIA",
	30:  "ADMETA",
	31:  "ADMIXER",
	32:  "ADMIZED",
	33:  "ADOP",
	34:  "ADTHINK",
	35:  "ADRIVER",
	36:  "ADRU",
	37:  "ADSCALE",
	38:  "ADSNATIVE",
	39:  "ADSKOM",
	40:  "ADSPRUCE",
	41:  "ADSTIR",
	42:  "ADSUPPLY",
	43:  "ADUNITY",
	44:  "ADYOULIKE",
	45:  "AMBIENT",
	46:  "ANCORA",
	47:  "AOL",
	48:  "APPVADOR",
	49:  "AVOCARROT",
	50:  "AXONIX",
	51:  "BEACHFRONT",
	52:  "BETWEEN",
	53:  "BIDTELLECT",
	54:  "BLUEWATERADS",
	55:  "CAULY",
	56:  "CENTRO",
	57:  "CHAMELEON",
	58:  "CLICKONOMETRICS",
	59:  "CONVERGE",
	60:  "COULL",
	61:  "DISH",
	62:  "EXPERIAN",
	63:  "FALKTECH",
	64:  "FMX",
	65:  "FIDELITY",
	66:  "FLUCT",
	67:  "COX",
	68:  "GENIEE",
	69:  "GMO",
	70:  "FLOOR6",
	71:  "GUMGUM",
	72:  "IBILLBOARD",
	73:  "IMOIBLE",
	74:  "KARGO",
	75:  "KIOSKED",
	76:  "KRUX",
	77:  "LIGATUS",
	78:  "LIVEINTENT",
	79:  "LKQD",
	80:  "LUPON",
	81:  "MADS",
	82:  "MEDIABONG",
	83:  "MICROAD",
	84:  "MOBFOX",
	85:  "MOBSMART",
	86:  "MOCOPLEX",
	87:  "NASMEDIA",
	88:  "NATIVEADS",
	89:  "NETSPRINT",
	90:  "OOYALA",
	91:  "OPTIMATIC",
	92:  "POWERLINKS",
	93:  "PROFITX",
	94:  "PUBNATIVE",
	95:  "REALVU",
	96:  "REPUBLER",
	97:  "SARA",
	98:  "SCALEOUT",
	99:  "SHARETHROUGH",
	100: "SMARTADSERVER",
	101: "SONOBI",
	102: "SORTABLE",
	103: "SSPICYADS",
	104: "STICKYADS",
	105: "SWITCHCONCEPTS",
	106: "TEADS",
	107: "THIRDPRESENCE",
	108: "THRONE",
	109: "TPMN",
	110: "TRIPLELIFT",
	111: "UCFUNNEL",
	112: "UNRULYX",
	113: "VDOPIA",
	114: "VI",
	115: "VMG",
	116: "VIDMATIC",
	117: "VMAX",
	118: "VRTCAL",
	119: "VUNGLE",
	120: "WORDPRESS",
	121: "XROST",
	122: "YIELDLAB",
	123: "YIELDONE",
	124: "YIELDONE_ADS",
	125: "YIELDONE_INNITY",
	126: "YUME",
	127: "ZEDO",
	128: "ZEOTAP",
}
var Enums_Inventory_Source_value = map[string]int32{
	"UNKNOWN_SOURCE":  -1,
	"GOOGLE_ADX":      0,
	"LIVERAIL":        1,
	"BRIGHTROLL":      2,
	"MOPUB":           3,
	"AERSERV":         4,
	"PULSEPOINT":      5,
	"RUBICON":         6,
	"ADAPTV":          7,
	"MILLENNIAL":      8,
	"APPNEXUS":        9,
	"OPENX":           10,
	"PUBMATIC":        11,
	"OPERA_MEDIA":     12,
	"RTK":             13,
	"INNERACTIVE":     14,
	"TREMOR":          15,
	"INDEX_EXCHANGE":  16,
	"YAHOO":           17,
	"SMAATO":          18,
	"APP_LOVIN":       19,
	"MOLABS":          20,
	"SPOTX":           21,
	"FYBER":           22,
	"ADBUDDIZ":        23,
	"ADCONDUCTOR":     24,
	"ADEASY":          25,
	"ADFORM":          26,
	"ADLANTIC":        27,
	"ADMAX":           28,
	"ADMEDIA":         29,
	"ADMETA":          30,
	"ADMIXER":         31,
	"ADMIZED":         32,
	"ADOP":            33,
	"ADTHINK":         34,
	"ADRIVER":         35,
	"ADRU":            36,
	"ADSCALE":         37,
	"ADSNATIVE":       38,
	"ADSKOM":          39,
	"ADSPRUCE":        40,
	"ADSTIR":          41,
	"ADSUPPLY":        42,
	"ADUNITY":         43,
	"ADYOULIKE":       44,
	"AMBIENT":         45,
	"ANCORA":          46,
	"AOL":             47,
	"APPVADOR":        48,
	"AVOCARROT":       49,
	"AXONIX":          50,
	"BEACHFRONT":      51,
	"BETWEEN":         52,
	"BIDTELLECT":      53,
	"BLUEWATERADS":    54,
	"CAULY":           55,
	"CENTRO":          56,
	"CHAMELEON":       57,
	"CLICKONOMETRICS": 58,
	"CONVERGE":        59,
	"COULL":           60,
	"DISH":            61,
	"EXPERIAN":        62,
	"FALKTECH":        63,
	"FMX":             64,
	"FIDELITY":        65,
	"FLUCT":           66,
	"COX":             67,
	"GENIEE":          68,
	"GMO":             69,
	"FLOOR6":          70,
	"GUMGUM":          71,
	"IBILLBOARD":      72,
	"IMOIBLE":         73,
	"KARGO":           74,
	"KIOSKED":         75,
	"KRUX":            76,
	"LIGATUS":         77,
	"LIVEINTENT":      78,
	"LKQD":            79,
	"LUPON":           80,
	"MADS":            81,
	"MEDIABONG":       82,
	"MICROAD":         83,
	"MOBFOX":          84,
	"MOBSMART":        85,
	"MOCOPLEX":        86,
	"NASMEDIA":        87,
	"NATIVEADS":       88,
	"NETSPRINT":       89,
	"OOYALA":          90,
	"OPTIMATIC":       91,
	"POWERLINKS":      92,
	"PROFITX":         93,
	"PUBNATIVE":       94,
	"REALVU":          95,
	"REPUBLER":        96,
	"SARA":            97,
	"SCALEOUT":        98,
	"SHARETHROUGH":    99,
	"SMARTADSERVER":   100,
	"SONOBI":          101,
	"SORTABLE":        102,
	"SSPICYADS":       103,
	"STICKYADS":       104,
	"SWITCHCONCEPTS":  105,
	"TEADS":           106,
	"THIRDPRESENCE":   107,
	"THRONE":          108,
	"TPMN":            109,
	"TRIPLELIFT":      110,
	"UCFUNNEL":        111,
	"UNRULYX":         112,
	"VDOPIA":          113,
	"VI":              114,
	"VMG":             115,
	"VIDMATIC":        116,
	"VMAX":            117,
	"VRTCAL":          118,
	"VUNGLE":          119,
	"WORDPRESS":       120,
	"XROST":           121,
	"YIELDLAB":        122,
	"YIELDONE":        123,
	"YIELDONE_ADS":    124,
	"YIELDONE_INNITY": 125,
	"YUME":            126,
	"ZEDO":            127,
	"ZEOTAP":          128,
}

func (x Enums_Inventory_Source) Enum() *Enums_Inventory_Source {
	p := new(Enums_Inventory_Source)
	*p = x
	return p
}
func (x Enums_Inventory_Source) String() string {
	return proto.EnumName(Enums_Inventory_Source_name, int32(x))
}
func (x *Enums_Inventory_Source) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_Inventory_Source_value, data, "Enums_Inventory_Source")
	if err != nil {
		return err
	}
	*x = Enums_Inventory_Source(value)
	return nil
}
func (Enums_Inventory_Source) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 2, 0} }

// Placement Type of the OpenRTB Bid Request
type Enums_Inventory_PlacementType int32

const (
	Enums_Inventory_UNKNOWN_PLACEMENT_TYPE Enums_Inventory_PlacementType = -1
	Enums_Inventory_BANNER                 Enums_Inventory_PlacementType = 0
	Enums_Inventory_VIDEO                  Enums_Inventory_PlacementType = 1
	Enums_Inventory_NATIVE                 Enums_Inventory_PlacementType = 2
	Enums_Inventory_BANNER_AND_VIDEO       Enums_Inventory_PlacementType = 3
)

var Enums_Inventory_PlacementType_name = map[int32]string{
	-1: "UNKNOWN_PLACEMENT_TYPE",
	0:  "BANNER",
	1:  "VIDEO",
	2:  "NATIVE",
	3:  "BANNER_AND_VIDEO",
}
var Enums_Inventory_PlacementType_value = map[string]int32{
	"UNKNOWN_PLACEMENT_TYPE": -1,
	"BANNER":                 0,
	"VIDEO":                  1,
	"NATIVE":                 2,
	"BANNER_AND_VIDEO":       3,
}

func (x Enums_Inventory_PlacementType) Enum() *Enums_Inventory_PlacementType {
	p := new(Enums_Inventory_PlacementType)
	*p = x
	return p
}
func (x Enums_Inventory_PlacementType) String() string {
	return proto.EnumName(Enums_Inventory_PlacementType_name, int32(x))
}
func (x *Enums_Inventory_PlacementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_Inventory_PlacementType_value, data, "Enums_Inventory_PlacementType")
	if err != nil {
		return err
	}
	*x = Enums_Inventory_PlacementType(value)
	return nil
}
func (Enums_Inventory_PlacementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 2, 1}
}

// Environment type of the bid request.
type Enums_Inventory_EnvironmentType int32

const (
	Enums_Inventory_UNKNOWN_ENVIRONMENT_TYPE Enums_Inventory_EnvironmentType = -1
	Enums_Inventory_WEB                      Enums_Inventory_EnvironmentType = 0
	Enums_Inventory_APP                      Enums_Inventory_EnvironmentType = 1
)

var Enums_Inventory_EnvironmentType_name = map[int32]string{
	-1: "UNKNOWN_ENVIRONMENT_TYPE",
	0:  "WEB",
	1:  "APP",
}
var Enums_Inventory_EnvironmentType_value = map[string]int32{
	"UNKNOWN_ENVIRONMENT_TYPE": -1,
	"WEB": 0,
	"APP": 1,
}

func (x Enums_Inventory_EnvironmentType) Enum() *Enums_Inventory_EnvironmentType {
	p := new(Enums_Inventory_EnvironmentType)
	*p = x
	return p
}
func (x Enums_Inventory_EnvironmentType) String() string {
	return proto.EnumName(Enums_Inventory_EnvironmentType_name, int32(x))
}
func (x *Enums_Inventory_EnvironmentType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_Inventory_EnvironmentType_value, data, "Enums_Inventory_EnvironmentType")
	if err != nil {
		return err
	}
	*x = Enums_Inventory_EnvironmentType(value)
	return nil
}
func (Enums_Inventory_EnvironmentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 2, 2}
}

// DataCenter, a.k.a. AWS region.
type Enums_Inventory_DataCenter int32

const (
	Enums_Inventory_UNKNOWN             Enums_Inventory_DataCenter = 0
	Enums_Inventory_UNKNOWN_DATA_CENTER Enums_Inventory_DataCenter = 0
	Enums_Inventory_US_EAST_1           Enums_Inventory_DataCenter = 1
	Enums_Inventory_US_WEST_2           Enums_Inventory_DataCenter = 2
	Enums_Inventory_EU_WEST_1           Enums_Inventory_DataCenter = 3
)

var Enums_Inventory_DataCenter_name = map[int32]string{
	0: "UNKNOWN",
	// Duplicate value: 0: "UNKNOWN_DATA_CENTER",
	1: "US_EAST_1",
	2: "US_WEST_2",
	3: "EU_WEST_1",
}
var Enums_Inventory_DataCenter_value = map[string]int32{
	"UNKNOWN":             0,
	"UNKNOWN_DATA_CENTER": 0,
	"US_EAST_1":           1,
	"US_WEST_2":           2,
	"EU_WEST_1":           3,
}

func (x Enums_Inventory_DataCenter) Enum() *Enums_Inventory_DataCenter {
	p := new(Enums_Inventory_DataCenter)
	*p = x
	return p
}
func (x Enums_Inventory_DataCenter) String() string {
	return proto.EnumName(Enums_Inventory_DataCenter_name, int32(x))
}
func (x *Enums_Inventory_DataCenter) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_Inventory_DataCenter_value, data, "Enums_Inventory_DataCenter")
	if err != nil {
		return err
	}
	*x = Enums_Inventory_DataCenter(value)
	return nil
}
func (Enums_Inventory_DataCenter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 2, 3}
}

// Continents are nonoverlapping geographic areas. Continent-to-DataCenter
// is one-to-many. DataCenter-to-Continent is one-to-one.
// For example, US-EAST-1 and US-WEST-2 are in NAM, and EU_WEST_1 is in EMEA.
// The data centers within a continent share things like budget and user data,
// neither of which crosses continent boundaries.
// For more information, https://docs.google.com/document/d/1oACWofpsEZsjXNVNnEINZYAutEtAmvWbznTLLx-Aa9c
type Enums_Inventory_Continent int32

const (
	// Keep continents in sync with Buzz
	Enums_Inventory_UNKNOWN_CONTINENT Enums_Inventory_Continent = 0
	Enums_Inventory_NAM               Enums_Inventory_Continent = 1
	Enums_Inventory_EMEA              Enums_Inventory_Continent = 2
)

var Enums_Inventory_Continent_name = map[int32]string{
	0: "UNKNOWN_CONTINENT",
	1: "NAM",
	2: "EMEA",
}
var Enums_Inventory_Continent_value = map[string]int32{
	"UNKNOWN_CONTINENT": 0,
	"NAM":               1,
	"EMEA":              2,
}

func (x Enums_Inventory_Continent) Enum() *Enums_Inventory_Continent {
	p := new(Enums_Inventory_Continent)
	*p = x
	return p
}
func (x Enums_Inventory_Continent) String() string {
	return proto.EnumName(Enums_Inventory_Continent_name, int32(x))
}
func (x *Enums_Inventory_Continent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_Inventory_Continent_value, data, "Enums_Inventory_Continent")
	if err != nil {
		return err
	}
	*x = Enums_Inventory_Continent(value)
	return nil
}
func (Enums_Inventory_Continent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 2, 4}
}

// Impression trackers are explicit fields in the BidResponse sent back to the
// exchange. The exchange is responsible for pinging the bidder and this helps
// reduce discrepancy between the exchange and the bidder.
// Exchanges support ImpressionTracker for certain segments of their inventory,
// and whether it supports third party impression urls in impression trackers,
// are captured by the enum below.
// The values in this enum are bit vectors.
// |-----------------|------|-----|------|---|---|
// |3rd_Party_Impurls|Native|Video|Banner|App|Web|
// |-----------------|------|-----|------|---|---|
// If 3rd_Party_Impurls is 1, they will be populated into the impression tracker
// BidResponse field. Otherwise they will be rendered in the creative markup.
type Enums_Inventory_ImpressionTracker int32

const (
	Enums_Inventory_NEVER_USE_TRACKER                   Enums_Inventory_ImpressionTracker = 0
	Enums_Inventory_ALWAYS_USE_TRACKER                  Enums_Inventory_ImpressionTracker = 63
	Enums_Inventory_APP_BANNER_USE_TRACKER              Enums_Inventory_ImpressionTracker = 38
	Enums_Inventory_ALWAYS_USE_TRACKER_FOR_BEESWAX_ONLY Enums_Inventory_ImpressionTracker = 31
	// 3rd Party impression urls will be rendered in the markup.
	Enums_Inventory_VIDEO_USE_TRACKER_FOR_BEESWAX_ONLY Enums_Inventory_ImpressionTracker = 11
)

var Enums_Inventory_ImpressionTracker_name = map[int32]string{
	0:  "NEVER_USE_TRACKER",
	63: "ALWAYS_USE_TRACKER",
	38: "APP_BANNER_USE_TRACKER",
	31: "ALWAYS_USE_TRACKER_FOR_BEESWAX_ONLY",
	11: "VIDEO_USE_TRACKER_FOR_BEESWAX_ONLY",
}
var Enums_Inventory_ImpressionTracker_value = map[string]int32{
	"NEVER_USE_TRACKER":                   0,
	"ALWAYS_USE_TRACKER":                  63,
	"APP_BANNER_USE_TRACKER":              38,
	"ALWAYS_USE_TRACKER_FOR_BEESWAX_ONLY": 31,
	"VIDEO_USE_TRACKER_FOR_BEESWAX_ONLY":  11,
}

func (x Enums_Inventory_ImpressionTracker) Enum() *Enums_Inventory_ImpressionTracker {
	p := new(Enums_Inventory_ImpressionTracker)
	*p = x
	return p
}
func (x Enums_Inventory_ImpressionTracker) String() string {
	return proto.EnumName(Enums_Inventory_ImpressionTracker_name, int32(x))
}
func (x *Enums_Inventory_ImpressionTracker) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_Inventory_ImpressionTracker_value, data, "Enums_Inventory_ImpressionTracker")
	if err != nil {
		return err
	}
	*x = Enums_Inventory_ImpressionTracker(value)
	return nil
}
func (Enums_Inventory_ImpressionTracker) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 2, 5}
}

// Suppliers can request that we notify them about clicks and provide us
// with a click url macro. They can either request that we do it by
// redirecting the click itself to their click url and giving them a url to
// redirect the click back to, or by sending them a server call without the
// click.
// NO_CLICK_TRACKER means that the supplier does not want click
// notifications.
// CLICK_TRACKER_WITH_REDIRECT means that the supplier wants us to redirect
// the click to their click url and they'll redirect back to the url we
// provide.
// CLICK_TRACKER_WITHOUT_REDIRECT means that the supplier wants us to send
// them a server call to notify them about clicks.
type Enums_Inventory_SupplierClickTracker int32

const (
	Enums_Inventory_NO_CLICK_TRACKER               Enums_Inventory_SupplierClickTracker = 0
	Enums_Inventory_CLICK_TRACKER_WITH_REDIRECT    Enums_Inventory_SupplierClickTracker = 1
	Enums_Inventory_CLICK_TRACKER_WITHOUT_REDIRECT Enums_Inventory_SupplierClickTracker = 2
)

var Enums_Inventory_SupplierClickTracker_name = map[int32]string{
	0: "NO_CLICK_TRACKER",
	1: "CLICK_TRACKER_WITH_REDIRECT",
	2: "CLICK_TRACKER_WITHOUT_REDIRECT",
}
var Enums_Inventory_SupplierClickTracker_value = map[string]int32{
	"NO_CLICK_TRACKER":               0,
	"CLICK_TRACKER_WITH_REDIRECT":    1,
	"CLICK_TRACKER_WITHOUT_REDIRECT": 2,
}

func (x Enums_Inventory_SupplierClickTracker) Enum() *Enums_Inventory_SupplierClickTracker {
	p := new(Enums_Inventory_SupplierClickTracker)
	*p = x
	return p
}
func (x Enums_Inventory_SupplierClickTracker) String() string {
	return proto.EnumName(Enums_Inventory_SupplierClickTracker_name, int32(x))
}
func (x *Enums_Inventory_SupplierClickTracker) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enums_Inventory_SupplierClickTracker_value, data, "Enums_Inventory_SupplierClickTracker")
	if err != nil {
		return err
	}
	*x = Enums_Inventory_SupplierClickTracker(value)
	return nil
}
func (Enums_Inventory_SupplierClickTracker) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 2, 6}
}

type Enums struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums) Reset()                    { *m = Enums{} }
func (m *Enums) String() string            { return proto.CompactTextString(m) }
func (*Enums) ProtoMessage()               {}
func (*Enums) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Enums_BidRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest) Reset()                    { *m = Enums_BidRequest{} }
func (m *Enums_BidRequest) String() string            { return proto.CompactTextString(m) }
func (*Enums_BidRequest) ProtoMessage()               {}
func (*Enums_BidRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type Enums_BidRequest_Impression struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Impression) Reset()         { *m = Enums_BidRequest_Impression{} }
func (m *Enums_BidRequest_Impression) String() string { return proto.CompactTextString(m) }
func (*Enums_BidRequest_Impression) ProtoMessage()    {}
func (*Enums_BidRequest_Impression) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0}
}

type Enums_BidRequest_Impression_Banner struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Impression_Banner) Reset()         { *m = Enums_BidRequest_Impression_Banner{} }
func (m *Enums_BidRequest_Impression_Banner) String() string { return proto.CompactTextString(m) }
func (*Enums_BidRequest_Impression_Banner) ProtoMessage()    {}
func (*Enums_BidRequest_Impression_Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 0}
}

type Enums_BidRequest_Impression_Banner_BannerExtensions struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Impression_Banner_BannerExtensions) Reset() {
	*m = Enums_BidRequest_Impression_Banner_BannerExtensions{}
}
func (m *Enums_BidRequest_Impression_Banner_BannerExtensions) String() string {
	return proto.CompactTextString(m)
}
func (*Enums_BidRequest_Impression_Banner_BannerExtensions) ProtoMessage() {}
func (*Enums_BidRequest_Impression_Banner_BannerExtensions) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 0, 0}
}

type Enums_BidRequest_Impression_Video struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Impression_Video) Reset()         { *m = Enums_BidRequest_Impression_Video{} }
func (m *Enums_BidRequest_Impression_Video) String() string { return proto.CompactTextString(m) }
func (*Enums_BidRequest_Impression_Video) ProtoMessage()    {}
func (*Enums_BidRequest_Impression_Video) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1}
}

type Enums_BidRequest_Impression_Video_VideoExtensions struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Impression_Video_VideoExtensions) Reset() {
	*m = Enums_BidRequest_Impression_Video_VideoExtensions{}
}
func (m *Enums_BidRequest_Impression_Video_VideoExtensions) String() string {
	return proto.CompactTextString(m)
}
func (*Enums_BidRequest_Impression_Video_VideoExtensions) ProtoMessage() {}
func (*Enums_BidRequest_Impression_Video_VideoExtensions) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 1, 0}
}

type Enums_BidRequest_Impression_NativeRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Impression_NativeRequest) Reset() {
	*m = Enums_BidRequest_Impression_NativeRequest{}
}
func (m *Enums_BidRequest_Impression_NativeRequest) String() string { return proto.CompactTextString(m) }
func (*Enums_BidRequest_Impression_NativeRequest) ProtoMessage()    {}
func (*Enums_BidRequest_Impression_NativeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0, 0, 2}
}

type Enums_BidRequest_Content struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Content) Reset()                    { *m = Enums_BidRequest_Content{} }
func (m *Enums_BidRequest_Content) String() string            { return proto.CompactTextString(m) }
func (*Enums_BidRequest_Content) ProtoMessage()               {}
func (*Enums_BidRequest_Content) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0, 1} }

type Enums_BidRequest_Device struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Device) Reset()                    { *m = Enums_BidRequest_Device{} }
func (m *Enums_BidRequest_Device) String() string            { return proto.CompactTextString(m) }
func (*Enums_BidRequest_Device) ProtoMessage()               {}
func (*Enums_BidRequest_Device) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0, 2} }

type Enums_BidRequest_Geo struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_Geo) Reset()                    { *m = Enums_BidRequest_Geo{} }
func (m *Enums_BidRequest_Geo) String() string            { return proto.CompactTextString(m) }
func (*Enums_BidRequest_Geo) ProtoMessage()               {}
func (*Enums_BidRequest_Geo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0, 3} }

type Enums_BidRequest_User struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidRequest_User) Reset()                    { *m = Enums_BidRequest_User{} }
func (m *Enums_BidRequest_User) String() string            { return proto.CompactTextString(m) }
func (*Enums_BidRequest_User) ProtoMessage()               {}
func (*Enums_BidRequest_User) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0, 4} }

type Enums_BidResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_BidResponse) Reset()                    { *m = Enums_BidResponse{} }
func (m *Enums_BidResponse) String() string            { return proto.CompactTextString(m) }
func (*Enums_BidResponse) ProtoMessage()               {}
func (*Enums_BidResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 1} }

// Following constants are defined by Beeswax and are not a part of the
// Openrtb standard.
type Enums_Inventory struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enums_Inventory) Reset()                    { *m = Enums_Inventory{} }
func (m *Enums_Inventory) String() string            { return proto.CompactTextString(m) }
func (*Enums_Inventory) ProtoMessage()               {}
func (*Enums_Inventory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 2} }

func init() {
	proto.RegisterType((*Enums)(nil), "openrtb.Enums")
	proto.RegisterType((*Enums_BidRequest)(nil), "openrtb.Enums.BidRequest")
	proto.RegisterType((*Enums_BidRequest_Impression)(nil), "openrtb.Enums.BidRequest.Impression")
	proto.RegisterType((*Enums_BidRequest_Impression_Banner)(nil), "openrtb.Enums.BidRequest.Impression.Banner")
	proto.RegisterType((*Enums_BidRequest_Impression_Banner_BannerExtensions)(nil), "openrtb.Enums.BidRequest.Impression.Banner.BannerExtensions")
	proto.RegisterType((*Enums_BidRequest_Impression_Video)(nil), "openrtb.Enums.BidRequest.Impression.Video")
	proto.RegisterType((*Enums_BidRequest_Impression_Video_VideoExtensions)(nil), "openrtb.Enums.BidRequest.Impression.Video.VideoExtensions")
	proto.RegisterType((*Enums_BidRequest_Impression_NativeRequest)(nil), "openrtb.Enums.BidRequest.Impression.NativeRequest")
	proto.RegisterType((*Enums_BidRequest_Content)(nil), "openrtb.Enums.BidRequest.Content")
	proto.RegisterType((*Enums_BidRequest_Device)(nil), "openrtb.Enums.BidRequest.Device")
	proto.RegisterType((*Enums_BidRequest_Geo)(nil), "openrtb.Enums.BidRequest.Geo")
	proto.RegisterType((*Enums_BidRequest_User)(nil), "openrtb.Enums.BidRequest.User")
	proto.RegisterType((*Enums_BidResponse)(nil), "openrtb.Enums.BidResponse")
	proto.RegisterType((*Enums_Inventory)(nil), "openrtb.Enums.Inventory")
	proto.RegisterEnum("openrtb.ContentCategory", ContentCategory_name, ContentCategory_value)
	proto.RegisterEnum("openrtb.CreativeAttribute", CreativeAttribute_name, CreativeAttribute_value)
	proto.RegisterEnum("openrtb.Flag", Flag_name, Flag_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_ApiFramework", Enums_BidRequest_Impression_ApiFramework_name, Enums_BidRequest_Impression_ApiFramework_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_AdPosition", Enums_BidRequest_Impression_AdPosition_name, Enums_BidRequest_Impression_AdPosition_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Banner_AdType", Enums_BidRequest_Impression_Banner_AdType_name, Enums_BidRequest_Impression_Banner_AdType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Banner_ExpandableDirection", Enums_BidRequest_Impression_Banner_ExpandableDirection_name, Enums_BidRequest_Impression_Banner_ExpandableDirection_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType", Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType_name, Enums_BidRequest_Impression_Banner_BannerExtensions_BannerType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_Protocol", Enums_BidRequest_Impression_Video_Protocol_name, Enums_BidRequest_Impression_Video_Protocol_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_CompanionType", Enums_BidRequest_Impression_Video_CompanionType_name, Enums_BidRequest_Impression_Video_CompanionType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_Linearity", Enums_BidRequest_Impression_Video_Linearity_name, Enums_BidRequest_Impression_Video_Linearity_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_PlaybackMethod", Enums_BidRequest_Impression_Video_PlaybackMethod_name, Enums_BidRequest_Impression_Video_PlaybackMethod_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_VideoStartDelay", Enums_BidRequest_Impression_Video_VideoStartDelay_name, Enums_BidRequest_Impression_Video_VideoStartDelay_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_ContentDelivery", Enums_BidRequest_Impression_Video_ContentDelivery_name, Enums_BidRequest_Impression_Video_ContentDelivery_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_VideoPlacementType", Enums_BidRequest_Impression_Video_VideoPlacementType_name, Enums_BidRequest_Impression_Video_VideoPlacementType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_PlaybackCessationMode", Enums_BidRequest_Impression_Video_PlaybackCessationMode_name, Enums_BidRequest_Impression_Video_PlaybackCessationMode_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_Video_VideoExtensions_VideoType", Enums_BidRequest_Impression_Video_VideoExtensions_VideoType_name, Enums_BidRequest_Impression_Video_VideoExtensions_VideoType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_NativeRequest_LayoutId", Enums_BidRequest_Impression_NativeRequest_LayoutId_name, Enums_BidRequest_Impression_NativeRequest_LayoutId_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_NativeRequest_AdUnitId", Enums_BidRequest_Impression_NativeRequest_AdUnitId_name, Enums_BidRequest_Impression_NativeRequest_AdUnitId_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_NativeRequest_Context", Enums_BidRequest_Impression_NativeRequest_Context_name, Enums_BidRequest_Impression_NativeRequest_Context_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_NativeRequest_ContextSubtype", Enums_BidRequest_Impression_NativeRequest_ContextSubtype_name, Enums_BidRequest_Impression_NativeRequest_ContextSubtype_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Impression_NativeRequest_PlacementType", Enums_BidRequest_Impression_NativeRequest_PlacementType_name, Enums_BidRequest_Impression_NativeRequest_PlacementType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Content_Context", Enums_BidRequest_Content_Context_name, Enums_BidRequest_Content_Context_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Content_VideoQuality", Enums_BidRequest_Content_VideoQuality_name, Enums_BidRequest_Content_VideoQuality_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Content_QAGMediaRating", Enums_BidRequest_Content_QAGMediaRating_name, Enums_BidRequest_Content_QAGMediaRating_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Content_SourceRelationship", Enums_BidRequest_Content_SourceRelationship_name, Enums_BidRequest_Content_SourceRelationship_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Device_ConnectionType", Enums_BidRequest_Device_ConnectionType_name, Enums_BidRequest_Device_ConnectionType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Device_DeviceType", Enums_BidRequest_Device_DeviceType_name, Enums_BidRequest_Device_DeviceType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_Geo_LocationType", Enums_BidRequest_Geo_LocationType_name, Enums_BidRequest_Geo_LocationType_value)
	proto.RegisterEnum("openrtb.Enums_BidRequest_User_UserIdType", Enums_BidRequest_User_UserIdType_name, Enums_BidRequest_User_UserIdType_value)
	proto.RegisterEnum("openrtb.Enums_BidResponse_NoBidReason", Enums_BidResponse_NoBidReason_name, Enums_BidResponse_NoBidReason_value)
	proto.RegisterEnum("openrtb.Enums_Inventory_Source", Enums_Inventory_Source_name, Enums_Inventory_Source_value)
	proto.RegisterEnum("openrtb.Enums_Inventory_PlacementType", Enums_Inventory_PlacementType_name, Enums_Inventory_PlacementType_value)
	proto.RegisterEnum("openrtb.Enums_Inventory_EnvironmentType", Enums_Inventory_EnvironmentType_name, Enums_Inventory_EnvironmentType_value)
	proto.RegisterEnum("openrtb.Enums_Inventory_DataCenter", Enums_Inventory_DataCenter_name, Enums_Inventory_DataCenter_value)
	proto.RegisterEnum("openrtb.Enums_Inventory_Continent", Enums_Inventory_Continent_name, Enums_Inventory_Continent_value)
	proto.RegisterEnum("openrtb.Enums_Inventory_ImpressionTracker", Enums_Inventory_ImpressionTracker_name, Enums_Inventory_ImpressionTracker_value)
	proto.RegisterEnum("openrtb.Enums_Inventory_SupplierClickTracker", Enums_Inventory_SupplierClickTracker_name, Enums_Inventory_SupplierClickTracker_value)
}

func init() { proto.RegisterFile("beeswax/openrtb/openrtb_common.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 5230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x9a, 0x67, 0x78, 0x1c, 0xb7,
	0xd5, 0xef, 0xc5, 0x2e, 0x41, 0xed, 0xaf, 0x95, 0x2c, 0xdb, 0x74, 0x6c, 0xbf, 0x59, 0x27, 0xf1,
	0x8d, 0x73, 0x63, 0x73, 0x67, 0x7b, 0x9a, 0x83, 0x9d, 0xc1, 0x2e, 0x61, 0xce, 0x0e, 0xc6, 0x53,
	0x96, 0x4b, 0xa7, 0x4c, 0x28, 0x6a, 0x63, 0x33, 0x96, 0x96, 0x32, 0xb9, 0x92, 0xad, 0x54, 0xa7,
	0xd8, 0xe9, 0xbd, 0xf7, 0xde, 0x7b, 0xef, 0xbd, 0xf7, 0xde, 0x7b, 0xef, 0xbd, 0xf7, 0xfb, 0x00,
	0x98, 0x9d, 0x81, 0xe5, 0xdc, 0x3c, 0x2f, 0xbf, 0xf0, 0xfc, 0x80, 0x01, 0x70, 0x70, 0x70, 0x70,
	0x70, 0x30, 0x3b, 0xe4, 0x66, 0x87, 0x06, 0x83, 0xad, 0xab, 0x57, 0xaf, 0xb9, 0x68, 0xe3, 0xd8,
	0x60, 0xb8, 0x39, 0x3a, 0x34, 0xfe, 0x9f, 0xac, 0x6d, 0x1c, 0x3d, 0xba, 0x31, 0xbc, 0xf0, 0xd8,
	0xe6, 0xc6, 0x68, 0xa3, 0x30, 0x97, 0x96, 0x16, 0x7f, 0x74, 0x01, 0x99, 0x61, 0xc3, 0xe3, 0x47,
	0xb7, 0xe6, 0xaf, 0x3b, 0x48, 0x48, 0x6b, 0xfd, 0x70, 0x30, 0xb8, 0xea, 0xf8, 0x60, 0x6b, 0x34,
	0xff, 0xb2, 0xbd, 0x84, 0xf0, 0xa3, 0xc7, 0x36, 0x07, 0x5b, 0x5b, 0xeb, 0x1b, 0xc3, 0xf9, 0x1f,
	0x4c, 0x90, 0xd9, 0xd6, 0xea, 0x70, 0x38, 0xd8, 0x9c, 0x77, 0x08, 0xb4, 0xc4, 0xae, 0x19, 0x0d,
	0x86, 0xb2, 0x76, 0xab, 0xb8, 0x40, 0x88, 0x2e, 0x8b, 0x4e, 0x1e, 0x1b, 0x14, 0x0e, 0x90, 0xb9,
	0xd8, 0x5b, 0xf2, 0xc4, 0xb2, 0x87, 0x7f, 0x8f, 0xff, 0x26, 0x0a, 0xbb, 0xc8, 0xf6, 0x80, 0x2d,
	0xd3, 0xc0, 0x61, 0x0e, 0xb6, 0x15, 0xdb, 0x64, 0x96, 0x1e, 0x56, 0x4f, 0xef, 0x21, 0xa4, 0xbf,
	0x18, 0x75, 0xdd, 0x24, 0x62, 0xfd, 0x08, 0x13, 0x05, 0x90, 0x5d, 0x9a, 0x5b, 0xd4, 0xf3, 0x58,
	0x80, 0x49, 0xf9, 0xc4, 0x25, 0xb4, 0x47, 0x43, 0x3b, 0xe0, 0x7e, 0x84, 0xa9, 0x02, 0x21, 0xb3,
	0xbc, 0x1d, 0xd0, 0x2e, 0xc3, 0x74, 0xd1, 0x25, 0xfb, 0xd9, 0x35, 0xc7, 0x56, 0x87, 0x87, 0x57,
	0x0f, 0x1d, 0x19, 0x38, 0xeb, 0x9b, 0x83, 0xb5, 0xd1, 0xfa, 0xc6, 0xb0, 0xb0, 0x9d, 0x4c, 0xbb,
	0xac, 0x2d, 0xbb, 0xdb, 0x41, 0x66, 0x02, 0xde, 0x59, 0x8c, 0x30, 0x59, 0x98, 0x25, 0x93, 0xb1,
	0x8f, 0x29, 0x59, 0xe9, 0x48, 0xe5, 0xa6, 0x65, 0xcf, 0xed, 0xd8, 0x75, 0x43, 0x3b, 0x60, 0xcc,
	0xc3, 0xcc, 0xfc, 0xfb, 0x66, 0xc9, 0x4c, 0x6f, 0xfd, 0xf0, 0x60, 0x63, 0xbe, 0x45, 0xf6, 0x2a,
	0xc1, 0x98, 0xe4, 0x45, 0x64, 0x87, 0x2a, 0xfa, 0x5f, 0xcf, 0xf1, 0x04, 0xd9, 0xee, 0x4b, 0x73,
	0xaf, 0x6d, 0x1c, 0x91, 0x35, 0x3d, 0x1a, 0x46, 0x49, 0x29, 0x59, 0xc0, 0x44, 0x46, 0x56, 0xb2,
	0x80, 0xc9, 0x8c, 0xca, 0xc9, 0x02, 0xa6, 0x0a, 0x07, 0x08, 0xc6, 0x4f, 0x26, 0xcb, 0x01, 0xf5,
	0x7d, 0x16, 0x60, 0x3a, 0x2b, 0xb5, 0x8c, 0xd2, 0x99, 0xac, 0xb4, 0x6c, 0x94, 0xce, 0x16, 0x4b,
	0x64, 0xb7, 0xbd, 0x71, 0xf4, 0xd8, 0xea, 0x70, 0x7d, 0x63, 0xa8, 0x94, 0x25, 0x64, 0x36, 0x8c,
	0x68, 0xc4, 0x6d, 0x4c, 0xc8, 0xc9, 0x4b, 0xeb, 0x62, 0xd2, 0x30, 0xe3, 0x54, 0xf1, 0x7c, 0xb2,
	0xc3, 0x5d, 0x1f, 0x0e, 0x56, 0x37, 0xd7, 0x47, 0x27, 0x65, 0x85, 0xcb, 0x3d, 0x46, 0x03, 0x4c,
	0x48, 0x0b, 0x79, 0xc2, 0x4b, 0x52, 0x9e, 0x2c, 0x1e, 0x22, 0x7b, 0xfc, 0x23, 0xab, 0x27, 0x0f,
	0xad, 0xae, 0x5d, 0xd9, 0x1d, 0x8c, 0xae, 0xd8, 0x38, 0x5c, 0x38, 0x8d, 0xec, 0xa3, 0x71, 0x24,
	0x7c, 0x97, 0xae, 0x24, 0xa1, 0x88, 0x3d, 0x27, 0x11, 0x1e, 0x26, 0x0a, 0x07, 0x49, 0xe1, 0xd4,
	0xe2, 0x76, 0x1b, 0x93, 0x85, 0x7d, 0x64, 0xb7, 0xed, 0x72, 0x7b, 0x29, 0x89, 0x44, 0x22, 0x2b,
	0x31, 0x25, 0xc7, 0xe8, 0x8a, 0x38, 0x64, 0x89, 0xe8, 0xc9, 0xb9, 0x16, 0x47, 0xa9, 0xed, 0xc3,
	0xd1, 0xea, 0xe6, 0xc8, 0x19, 0x1c, 0x59, 0x3d, 0x29, 0x4d, 0xe4, 0x07, 0x2c, 0x09, 0x84, 0xeb,
	0x62, 0x5b, 0xe1, 0x6c, 0x82, 0x0e, 0xf3, 0x58, 0xc0, 0xed, 0xa4, 0xcb, 0x1d, 0x5d, 0x6a, 0xac,
	0xc2, 0x39, 0x64, 0xdf, 0xb8, 0xda, 0x17, 0x61, 0xa4, 0xeb, 0xff, 0x95, 0xd7, 0x1b, 0x6b, 0xf7,
	0xcf, 0xac, 0xb4, 0x58, 0x22, 0x7b, 0xed, 0x8d, 0xe1, 0x68, 0x30, 0x94, 0x43, 0xae, 0x9f, 0x18,
	0x6c, 0x9e, 0x2c, 0xec, 0x26, 0x3b, 0xc2, 0x28, 0x60, 0xb4, 0xcb, 0xbd, 0x0e, 0x26, 0x0a, 0x7b,
	0xc9, 0x4e, 0x3f, 0x10, 0x9d, 0x80, 0x85, 0x21, 0xef, 0x31, 0x4c, 0x16, 0x5f, 0x35, 0x41, 0x0a,
	0x4a, 0x53, 0xff, 0xc8, 0xea, 0xda, 0xe0, 0xe8, 0x60, 0x38, 0x52, 0xe6, 0x3e, 0x9b, 0x9c, 0x19,
	0x7b, 0x0e, 0x6b, 0x73, 0x8f, 0x39, 0x49, 0x8f, 0x3b, 0x4c, 0xcd, 0xd4, 0x66, 0x5d, 0xe6, 0x45,
	0xd8, 0x56, 0x38, 0x9d, 0xec, 0xe7, 0x5e, 0xa2, 0x3b, 0x36, 0x2a, 0x26, 0xd2, 0x0a, 0xed, 0xf6,
	0x46, 0xc5, 0x64, 0xe1, 0x0c, 0x72, 0x80, 0x7b, 0x09, 0x0d, 0x22, 0x6e, 0xbb, 0xcc, 0xa8, 0x99,
	0x92, 0xc6, 0xe7, 0x5e, 0xd2, 0x66, 0xcc, 0x31, 0x8a, 0xa7, 0xa5, 0xf1, 0xdb, 0xae, 0xa0, 0x11,
	0xf7, 0x3a, 0x46, 0xf9, 0x4c, 0x71, 0x8d, 0x9c, 0x36, 0x5e, 0x3d, 0x7b, 0xb0, 0xb5, 0xb5, 0x2a,
	0xf7, 0x4a, 0x77, 0xe3, 0xf0, 0x40, 0x36, 0xb0, 0x45, 0xd7, 0x77, 0x59, 0xc4, 0x85, 0x97, 0x88,
	0x20, 0x89, 0x43, 0x26, 0x97, 0x7f, 0x3f, 0xd9, 0xeb, 0x32, 0xda, 0x93, 0xfd, 0x8c, 0x0b, 0x27,
	0xe5, 0xfc, 0xc6, 0x85, 0xb6, 0xf0, 0x22, 0xee, 0xc5, 0x2c, 0xcc, 0xaa, 0xa7, 0xe6, 0xbf, 0x32,
	0x4d, 0x76, 0x7b, 0xab, 0xa3, 0xf5, 0x13, 0x83, 0x34, 0x98, 0x14, 0x47, 0x64, 0xbb, 0xbb, 0x7a,
	0x72, 0xe3, 0xf8, 0x88, 0x1f, 0x96, 0xdb, 0x5b, 0x36, 0x62, 0x5e, 0x94, 0x2c, 0x53, 0xd7, 0xd5,
	0x9b, 0x81, 0xfa, 0xbe, 0xa6, 0x49, 0x69, 0x73, 0x8f, 0x2d, 0x87, 0x6a, 0x4e, 0x98, 0x92, 0x68,
	0x2f, 0xd2, 0x28, 0x71, 0x79, 0x28, 0x27, 0xb6, 0x8b, 0x6c, 0xb7, 0x69, 0x20, 0x9d, 0xc5, 0xc5,
	0x4c, 0xa1, 0x40, 0xf6, 0x8c, 0xfb, 0xd2, 0xe6, 0xc4, 0xac, 0xf4, 0xef, 0x4e, 0xc0, 0x1d, 0xcc,
	0x15, 0xb7, 0xc8, 0x76, 0x7a, 0x38, 0x1e, 0xae, 0xcb, 0x51, 0x0f, 0x10, 0xf8, 0x94, 0x3b, 0x49,
	0xc8, 0x68, 0x60, 0x2f, 0x26, 0xb1, 0xc7, 0xa5, 0xc1, 0xcf, 0x24, 0xa7, 0x05, 0xcc, 0x16, 0xdd,
	0x2e, 0xf3, 0x1c, 0xaa, 0x66, 0xbe, 0xcc, 0x9d, 0x0e, 0x93, 0x26, 0x97, 0x0d, 0x02, 0xd1, 0x15,
	0x11, 0x73, 0xd4, 0xd8, 0xd2, 0x03, 0xd4, 0xde, 0xe4, 0xb4, 0x95, 0xc8, 0xc5, 0x70, 0x12, 0x8f,
	0x46, 0xd2, 0x0d, 0xa6, 0xe5, 0x7e, 0xb1, 0xe3, 0x30, 0x12, 0x5d, 0xcc, 0x14, 0x2f, 0x26, 0x73,
	0xca, 0x8b, 0xae, 0x19, 0x49, 0xdb, 0x8d, 0xb5, 0xb3, 0x99, 0x17, 0x05, 0x6a, 0xfb, 0x15, 0xc8,
	0x9e, 0x50, 0xd8, 0x9c, 0xba, 0x59, 0xd9, 0x64, 0x61, 0x27, 0x99, 0xf3, 0x03, 0xe1, 0xc4, 0x76,
	0x84, 0xa9, 0xe2, 0x27, 0x26, 0xc8, 0x9e, 0xb4, 0x87, 0xf0, 0xf8, 0xa1, 0x91, 0x8e, 0x35, 0xda,
	0xdd, 0xa9, 0x2b, 0xad, 0xdc, 0xe5, 0x7d, 0xe6, 0x80, 0xc8, 0x56, 0xa9, 0x47, 0x60, 0xa7, 0x8c,
	0x72, 0xca, 0xd1, 0xb0, 0x4b, 0x8a, 0x34, 0x76, 0xb8, 0xc0, 0x6e, 0x29, 0xf2, 0x2e, 0xed, 0x30,
	0xec, 0x91, 0xe3, 0xca, 0xe5, 0x49, 0x74, 0x47, 0x11, 0x73, 0xb0, 0x57, 0x96, 0x8d, 0xfb, 0xd5,
	0x3a, 0xe1, 0x80, 0x6c, 0xc2, 0xba, 0x94, 0xbb, 0x38, 0x4d, 0x0e, 0xa0, 0x4c, 0xcf, 0xbb, 0x38,
	0x28, 0x75, 0x08, 0x99, 0xeb, 0x2a, 0x87, 0xd2, 0xba, 0x86, 0x38, 0x47, 0xee, 0x08, 0xea, 0xfb,
	0x2e, 0xb7, 0x95, 0xf5, 0x70, 0xae, 0x2c, 0x08, 0x58, 0x8f, 0xb3, 0xe5, 0x24, 0xe4, 0x11, 0xc3,
	0xff, 0x14, 0x5d, 0xb2, 0xfb, 0x86, 0x9b, 0x63, 0x3b, 0x99, 0x56, 0x4b, 0xab, 0xb6, 0x13, 0x8d,
	0x44, 0x97, 0xdb, 0x7a, 0x39, 0x94, 0xcd, 0x45, 0x1c, 0x85, 0xdc, 0x61, 0x49, 0xb4, 0xc8, 0x12,
	0x5b, 0x04, 0x4c, 0x47, 0xfb, 0x74, 0x55, 0xa6, 0x8b, 0xc7, 0xc9, 0x2e, 0x7a, 0x6c, 0xbd, 0xbd,
	0xb9, 0x7a, 0x74, 0x70, 0xf5, 0xc6, 0xe6, 0x95, 0xd2, 0x3b, 0x7a, 0x6a, 0x5d, 0x75, 0x58, 0xcd,
	0x50, 0xc7, 0xd5, 0x1d, 0x64, 0xa6, 0x1b, 0x50, 0x2e, 0xdd, 0x68, 0x27, 0x99, 0x53, 0x62, 0x52,
	0xc2, 0x94, 0x2c, 0x17, 0x41, 0xb7, 0x4b, 0x31, 0x9d, 0x97, 0x5b, 0x98, 0x29, 0xec, 0x27, 0x7b,
	0x34, 0xc8, 0xb8, 0x44, 0x5b, 0x2e, 0xc3, 0x63, 0xbd, 0xf9, 0x49, 0x4c, 0x14, 0x9f, 0x39, 0x41,
	0x08, 0x3d, 0xec, 0x6f, 0x6c, 0xad, 0xab, 0xc3, 0x45, 0xfa, 0x86, 0x08, 0xb9, 0x72, 0x98, 0x71,
	0x20, 0xd9, 0x26, 0xad, 0x49, 0x5b, 0xa2, 0xa7, 0x75, 0x6f, 0x0b, 0x57, 0x4e, 0xf1, 0x26, 0xe4,
	0x0c, 0x87, 0xf9, 0x01, 0xb3, 0xa5, 0xc5, 0x93, 0x2e, 0x5d, 0x69, 0xb1, 0xa4, 0xc7, 0x43, 0x2e,
	0xfb, 0x9e, 0x94, 0x2d, 0x5a, 0xcc, 0x15, 0xcb, 0x79, 0x0b, 0x35, 0xdb, 0x45, 0x46, 0x1d, 0x15,
	0xf3, 0x09, 0x99, 0x6d, 0x0b, 0x11, 0xa9, 0x48, 0xbf, 0x93, 0xcc, 0x49, 0xc3, 0xb4, 0x68, 0x80,
	0xd9, 0x53, 0x8e, 0xad, 0xb9, 0xf9, 0xcf, 0x4c, 0xa6, 0x5e, 0x37, 0x1c, 0x15, 0x0f, 0xe7, 0x0e,
	0x98, 0x39, 0x85, 0x8a, 0xfa, 0x1d, 0x19, 0xe9, 0xb5, 0x51, 0xe2, 0x90, 0xdb, 0x98, 0x3a, 0x75,
	0xf5, 0xa6, 0xe5, 0x53, 0xea, 0x10, 0x9e, 0x51, 0x26, 0x8a, 0x16, 0xe5, 0x69, 0x92, 0xb9, 0x71,
	0x3f, 0xca, 0x26, 0x3b, 0x57, 0x5c, 0x26, 0xbb, 0x54, 0xe0, 0xbb, 0xf4, 0xf8, 0xea, 0x11, 0x79,
	0x64, 0xec, 0x27, 0x7b, 0x2f, 0x8d, 0xa9, 0xcb, 0xa3, 0x15, 0xc3, 0x22, 0x20, 0xbb, 0xfc, 0x40,
	0xb4, 0x65, 0xb8, 0x14, 0x1e, 0x4d, 0xb7, 0xba, 0x1f, 0x88, 0x30, 0xee, 0xaa, 0x38, 0x72, 0x63,
	0x9f, 0x9c, 0x2a, 0xf6, 0xc8, 0x9e, 0x4b, 0x69, 0xa7, 0x3b, 0x38, 0xbc, 0xbe, 0x1a, 0xac, 0x8e,
	0xd6, 0x87, 0x97, 0xff, 0x7f, 0x4e, 0xda, 0x7d, 0x64, 0x37, 0x75, 0xdd, 0x44, 0x7a, 0x3a, 0xf3,
	0x6c, 0x16, 0x6a, 0x7f, 0x62, 0x3d, 0x16, 0xac, 0x08, 0x8f, 0x25, 0x25, 0x4b, 0x1f, 0x70, 0x5d,
	0x1a, 0xc5, 0xd2, 0x8b, 0x8a, 0x17, 0x92, 0x42, 0xb8, 0x71, 0x7c, 0x73, 0x6d, 0x10, 0x0c, 0x8e,
	0xa8, 0xb0, 0xb7, 0x75, 0xc5, 0xfa, 0x31, 0xa9, 0x0f, 0xf7, 0x1c, 0x1e, 0x30, 0x5b, 0x06, 0x66,
	0x42, 0x66, 0x53, 0x79, 0x62, 0xfe, 0x11, 0x93, 0x64, 0xd6, 0x19, 0x9c, 0x58, 0x5f, 0x1b, 0x14,
	0x4f, 0xaa, 0x0d, 0x39, 0xd4, 0x99, 0x85, 0xf2, 0x61, 0x15, 0x2d, 0x3d, 0x8f, 0xd9, 0xa7, 0xb8,
	0xc0, 0x2e, 0xb2, 0x9d, 0x49, 0xab, 0x79, 0x2c, 0xd2, 0x36, 0x5f, 0xe6, 0x6d, 0x8e, 0x49, 0x15,
	0xf3, 0x98, 0xeb, 0x66, 0x4f, 0x2a, 0x7f, 0x54, 0x25, 0x56, 0x47, 0x3b, 0xa1, 0x82, 0x72, 0x47,
	0x2f, 0xb4, 0x82, 0x4a, 0x07, 0xb3, 0xc5, 0xeb, 0x27, 0x08, 0xd1, 0x5a, 0xfc, 0x97, 0xa4, 0x43,
	0x4e, 0x53, 0xb4, 0xb8, 0xcb, 0x30, 0x21, 0x53, 0x1c, 0xdf, 0x4e, 0x47, 0xd4, 0x1a, 0x32, 0x27,
	0x89, 0x7a, 0xda, 0xe9, 0xfd, 0x45, 0xe1, 0xa5, 0xf1, 0x2a, 0x92, 0xee, 0x1d, 0xe9, 0x0c, 0x22,
	0x7f, 0xd0, 0x61, 0x3d, 0x6e, 0x33, 0xcc, 0x4a, 0x53, 0x86, 0x2c, 0x4a, 0x22, 0xe1, 0x27, 0x2d,
	0xd1, 0xc7, 0xdc, 0x7c, 0x93, 0x4c, 0x75, 0x06, 0x1b, 0x45, 0x8b, 0xec, 0x72, 0x37, 0xd6, 0x56,
	0x33, 0x43, 0x80, 0xec, 0xea, 0xf8, 0x61, 0xe2, 0x8a, 0xd4, 0x85, 0x94, 0x02, 0xdc, 0xc7, 0xa4,
	0x9c, 0x7c, 0x7a, 0x1c, 0xbc, 0x62, 0x82, 0x4c, 0xc7, 0x5b, 0x83, 0xcd, 0xe2, 0xf3, 0x27, 0x08,
	0x91, 0x02, 0x3f, 0xfc, 0x5f, 0x26, 0xb3, 0x93, 0xcc, 0xb5, 0x18, 0x0b, 0x97, 0x69, 0x5f, 0xdb,
	0x53, 0x07, 0x56, 0x75, 0x16, 0x6d, 0x27, 0xd3, 0xdc, 0x69, 0x53, 0x9d, 0x30, 0x49, 0x29, 0xe9,
	0x3a, 0x55, 0x7d, 0x44, 0x28, 0x0a, 0x17, 0x69, 0x09, 0xd3, 0x2a, 0xfe, 0x39, 0x09, 0x77, 0x30,
	0x23, 0x6b, 0x94, 0xa8, 0x1e, 0x54, 0xdb, 0x46, 0xa3, 0x7a, 0x72, 0x4e, 0x3a, 0xad, 0x72, 0xf2,
	0x44, 0x9b, 0x4f, 0xb6, 0xd9, 0x3e, 0xff, 0xdb, 0x09, 0xb2, 0x53, 0xe5, 0xc1, 0x5b, 0xc7, 0x36,
	0x86, 0x5b, 0x83, 0xe2, 0x77, 0x27, 0xc8, 0x4e, 0x6f, 0x43, 0x95, 0xac, 0x6e, 0x6d, 0x0c, 0xa5,
	0xe3, 0xa5, 0x6a, 0x27, 0x2c, 0x08, 0x44, 0x80, 0x6d, 0xb2, 0x9f, 0x88, 0xd9, 0x8b, 0x1e, 0xb7,
	0xa9, 0x9b, 0x16, 0xaa, 0x93, 0x93, 0x7b, 0x3d, 0xea, 0xca, 0xfc, 0x84, 0x5d, 0x1a, 0xb3, 0x30,
	0x8d, 0x70, 0xba, 0xe9, 0x32, 0x6b, 0x25, 0xa1, 0xcf, 0xe5, 0x3e, 0x9f, 0x2a, 0x9c, 0x43, 0xe6,
	0xc3, 0x38, 0xf4, 0xf5, 0x1a, 0x78, 0xc2, 0x5b, 0x8c, 0xbb, 0xd4, 0x4b, 0xa2, 0x80, 0xb6, 0xdb,
	0xdc, 0xc6, 0xb4, 0x8c, 0x22, 0xb6, 0x2b, 0x62, 0x27, 0x71, 0x68, 0x44, 0xe5, 0xb1, 0x21, 0xd3,
	0x83, 0x40, 0xf4, 0x57, 0xb8, 0x8f, 0x19, 0xe9, 0x8c, 0xb1, 0x17, 0xc6, 0xbe, 0x2f, 0x82, 0x1b,
	0xac, 0xe1, 0x69, 0x64, 0x5f, 0xcb, 0x15, 0xf6, 0x92, 0x4c, 0x0d, 0xe2, 0x96, 0xcb, 0x43, 0xb9,
	0x9d, 0xe7, 0xd4, 0xa6, 0xf3, 0xba, 0x34, 0xb2, 0x17, 0x99, 0xa3, 0x4f, 0xec, 0xed, 0xf3, 0xdf,
	0x29, 0x90, 0x1d, 0x7c, 0x78, 0x62, 0x30, 0x1c, 0x6d, 0x6c, 0x9e, 0x2c, 0x7e, 0x69, 0x37, 0x99,
	0xd5, 0x7b, 0xa5, 0x70, 0x96, 0x7c, 0x58, 0x6b, 0x1c, 0x8a, 0x38, 0xb0, 0x99, 0xb9, 0x54, 0x7b,
	0x08, 0xe9, 0x08, 0xd1, 0x71, 0x59, 0x42, 0x9d, 0x74, 0xb5, 0x5c, 0xde, 0x63, 0x81, 0x3c, 0x3d,
	0x54, 0x6d, 0x4b, 0x25, 0xde, 0x2a, 0xfb, 0xd2, 0x71, 0x47, 0xf8, 0x71, 0x4b, 0x3b, 0x3f, 0x65,
	0x41, 0xc8, 0x82, 0x9e, 0x4e, 0xc1, 0xfd, 0xd8, 0x0d, 0x99, 0x2f, 0xb8, 0x4c, 0x51, 0x64, 0x65,
	0x10, 0xb7, 0xb8, 0x2d, 0x3c, 0xcc, 0x4a, 0x4f, 0xa5, 0x0e, 0xf5, 0xa3, 0x1e, 0xe6, 0x54, 0x96,
	0xc8, 0x5d, 0x97, 0x79, 0x9e, 0x3c, 0xa9, 0xb6, 0xa7, 0x69, 0x83, 0xc7, 0xfa, 0x71, 0x88, 0x1d,
	0x2a, 0x60, 0xf9, 0xcc, 0xeb, 0x83, 0xa8, 0x20, 0x13, 0xb7, 0xba, 0x2a, 0xdf, 0xdd, 0x29, 0x5d,
	0x59, 0xf8, 0x2c, 0xa0, 0x49, 0x97, 0x39, 0x9c, 0x62, 0x57, 0x61, 0x8e, 0x4c, 0x05, 0xd1, 0x12,
	0x76, 0xcb, 0x1a, 0x2e, 0x53, 0x2d, 0x6a, 0xab, 0x73, 0x7c, 0x8f, 0xda, 0x17, 0x01, 0xeb, 0x8a,
	0x40, 0x9f, 0x8d, 0xdc, 0x73, 0x58, 0x3f, 0x61, 0x7d, 0x7b, 0x91, 0x7a, 0x1d, 0x06, 0xc8, 0x31,
	0x56, 0xe8, 0xa2, 0x10, 0xd8, 0xa7, 0x32, 0xea, 0x2e, 0xa5, 0x91, 0x40, 0x41, 0x79, 0x99, 0xef,
	0x27, 0xae, 0xe8, 0x71, 0x0f, 0xfb, 0xf5, 0x76, 0x74, 0x69, 0x2b, 0xd4, 0xa7, 0x69, 0xe8, 0x8b,
	0xa8, 0x8f, 0xd3, 0xa4, 0xd8, 0x5e, 0x69, 0xb1, 0x00, 0x07, 0x95, 0xe6, 0x4e, 0x2b, 0x76, 0x1c,
	0x7e, 0x19, 0x4e, 0x57, 0x51, 0xd8, 0xb1, 0x85, 0x27, 0xcf, 0x54, 0x11, 0xe0, 0x0c, 0x3d, 0x69,
	0x46, 0xc3, 0x15, 0x9c, 0xa9, 0xe5, 0xb6, 0x08, 0xba, 0x98, 0xd7, 0xcd, 0x5c, 0xea, 0xc9, 0x79,
	0x9d, 0xa5, 0xdd, 0xbc, 0x4b, 0xfb, 0xb8, 0x89, 0xb2, 0xa7, 0xa3, 0xa7, 0x77, 0xb6, 0x6e, 0xd1,
	0x65, 0x11, 0xc5, 0x39, 0x69, 0x05, 0xef, 0xb3, 0x00, 0xe7, 0x8e, 0xe1, 0x32, 0xe6, 0xe0, 0x7f,
	0xe4, 0x5e, 0xa2, 0x8e, 0xf0, 0x71, 0x53, 0x5d, 0x1c, 0x2d, 0x72, 0x6f, 0x09, 0x45, 0x0d, 0x81,
	0x5c, 0x44, 0x9c, 0xa7, 0x9f, 0x09, 0x62, 0xdc, 0x4c, 0x17, 0x87, 0x36, 0x75, 0x19, 0x6e, 0xae,
	0x37, 0x55, 0x98, 0x26, 0x3f, 0xb7, 0xd0, 0xe3, 0x85, 0x4b, 0xa2, 0x8b, 0xf3, 0xb5, 0x86, 0xa1,
	0x1f, 0xc4, 0x36, 0xc3, 0xff, 0x49, 0x6b, 0x22, 0x1e, 0xe0, 0x96, 0x69, 0x4d, 0xec, 0xfb, 0xee,
	0x0a, 0x2e, 0xd0, 0xfd, 0xc9, 0x43, 0x7f, 0x05, 0xb7, 0xd2, 0xfd, 0xad, 0x88, 0xd8, 0xe5, 0x4b,
	0x0c, 0xff, 0x57, 0xd5, 0x75, 0x5b, 0x5c, 0xe6, 0xab, 0xb7, 0x56, 0x5d, 0x78, 0xb6, 0x08, 0x28,
	0x2e, 0x94, 0xeb, 0x46, 0x85, 0x8b, 0x8b, 0xd2, 0x85, 0xef, 0x51, 0x47, 0x04, 0x58, 0x50, 0xcd,
	0x7b, 0xc2, 0xa6, 0x41, 0x20, 0x22, 0x94, 0x54, 0x8b, 0xbe, 0xf0, 0x78, 0x1f, 0x96, 0x72, 0x41,
	0x46, 0xed, 0xc5, 0x76, 0x20, 0xbc, 0x08, 0x65, 0x1d, 0x5b, 0xa2, 0x65, 0x79, 0x66, 0x56, 0x54,
	0x25, 0x77, 0x22, 0xe6, 0xba, 0x32, 0xe0, 0x57, 0x65, 0x28, 0x6b, 0xb9, 0x31, 0x5b, 0xa6, 0x11,
	0x0b, 0xa8, 0x13, 0xa2, 0x26, 0x2d, 0x6c, 0xd3, 0xd8, 0x5d, 0x41, 0x5d, 0x65, 0x78, 0x32, 0x5d,
	0x13, 0x68, 0xa4, 0x19, 0x69, 0x97, 0xb9, 0x4c, 0x78, 0x68, 0xaa, 0xe3, 0x51, 0xde, 0x67, 0x84,
	0x27, 0xba, 0x4c, 0x26, 0x74, 0x21, 0x6e, 0xa3, 0x02, 0x97, 0xf0, 0x7a, 0x2c, 0xe8, 0x30, 0xdc,
	0x56, 0x75, 0x24, 0x62, 0xd7, 0xc5, 0xed, 0xd4, 0xd5, 0x93, 0x87, 0x8b, 0xb8, 0xbd, 0x3a, 0x2b,
	0xfa, 0x3e, 0x0b, 0x38, 0xf5, 0x70, 0x07, 0x49, 0x6d, 0xea, 0x2e, 0xc9, 0x30, 0x82, 0x8b, 0xe5,
	0x54, 0xdb, 0xdd, 0x3e, 0xee, 0xa8, 0x8a, 0xb9, 0xc3, 0xe4, 0xb9, 0x0a, 0xaa, 0x5c, 0xc8, 0x95,
	0x59, 0x62, 0x4b, 0x3e, 0x61, 0x8b, 0x3e, 0x6c, 0xa9, 0x59, 0x87, 0x79, 0x9c, 0x31, 0x38, 0xb2,
	0xb0, 0xd3, 0x15, 0x60, 0x2a, 0x71, 0x70, 0x85, 0x08, 0x6a, 0x68, 0xab, 0x07, 0xe2, 0x6e, 0x27,
	0xee, 0xa2, 0x23, 0xe7, 0xcc, 0x5b, 0xdc, 0x75, 0x5b, 0x82, 0x06, 0x0e, 0x16, 0xa5, 0x41, 0x78,
	0x57, 0xa8, 0x6c, 0x84, 0xcb, 0xde, 0x97, 0x68, 0xd0, 0x11, 0xb8, 0x44, 0x96, 0x2f, 0x71, 0x11,
	0x2e, 0x31, 0x07, 0x4b, 0x52, 0xe5, 0xa5, 0x20, 0xee, 0xc3, 0x95, 0xc5, 0x2e, 0xef, 0xd0, 0x28,
	0x0e, 0xd1, 0x95, 0x7d, 0xc9, 0xdd, 0xce, 0x55, 0x82, 0x0b, 0x4f, 0xdd, 0xb8, 0x97, 0x2e, 0x75,
	0x20, 0x64, 0x47, 0x6e, 0xec, 0x0b, 0x0f, 0xbe, 0x2c, 0xec, 0x4a, 0x63, 0x5e, 0x2a, 0xad, 0xa6,
	0x3c, 0xb4, 0x25, 0xbc, 0x0e, 0x02, 0x95, 0x77, 0x71, 0x3b, 0x10, 0xd4, 0x41, 0x98, 0x1e, 0x60,
	0x6d, 0xd1, 0x47, 0x24, 0x67, 0xdc, 0x15, 0xad, 0xb0, 0x4b, 0x83, 0x08, 0xb1, 0x26, 0x5b, 0xf8,
	0x2e, 0xeb, 0xa3, 0x27, 0xc9, 0xa3, 0xa1, 0x76, 0xf4, 0x65, 0x75, 0x51, 0x50, 0x4e, 0x28, 0x07,
	0xe8, 0xeb, 0x7b, 0x43, 0x14, 0xfa, 0x81, 0x0c, 0x23, 0x2b, 0xb2, 0x4f, 0x21, 0x56, 0xa8, 0x4b,
	0x71, 0x99, 0xac, 0x12, 0x7e, 0xc4, 0x75, 0x44, 0xb8, 0x93, 0x8a, 0x38, 0x62, 0x99, 0x05, 0x2e,
	0xf7, 0x96, 0x42, 0xdc, 0x39, 0x4d, 0xbf, 0xdb, 0x3c, 0xea, 0xe3, 0x2e, 0xf2, 0x59, 0x3f, 0x6e,
	0xa5, 0xde, 0x7d, 0x57, 0xd9, 0x4d, 0xc0, 0xa8, 0xdb, 0x8b, 0x91, 0xe8, 0xcb, 0xbd, 0x0c, 0xa5,
	0x2c, 0xc0, 0xdd, 0xe4, 0xd4, 0x42, 0x1a, 0x50, 0xac, 0xca, 0x72, 0xb5, 0x37, 0x44, 0x1c, 0xe1,
	0x90, 0xf4, 0xa3, 0x70, 0x91, 0x06, 0x2c, 0x5a, 0x0c, 0x44, 0xdc, 0x59, 0xc4, 0x9a, 0x3c, 0x31,
	0xd4, 0x7c, 0xa8, 0x23, 0x43, 0x1e, 0x0b, 0x70, 0x58, 0x85, 0x0f, 0xe1, 0x89, 0x16, 0xc7, 0x40,
	0x35, 0x17, 0x81, 0x3a, 0x90, 0x71, 0x77, 0x75, 0xe5, 0x0c, 0x7d, 0x6e, 0xaf, 0xc8, 0x59, 0x5d,
	0xae, 0x6f, 0xa0, 0xdc, 0x5e, 0x52, 0x78, 0x85, 0xba, 0x3d, 0x2c, 0xf3, 0xc8, 0x5e, 0xb4, 0x85,
	0x67, 0x33, 0x3f, 0x0a, 0xb1, 0x2e, 0xcd, 0x1d, 0x29, 0x1b, 0xdc, 0x43, 0x8e, 0x14, 0x2d, 0xf2,
	0xc0, 0xf1, 0x03, 0x16, 0xca, 0xac, 0x08, 0x57, 0xaa, 0x98, 0xb6, 0x18, 0xc8, 0x73, 0xff, 0x88,
	0x4a, 0xef, 0xfc, 0xae, 0x87, 0xa3, 0xd2, 0x04, 0x51, 0xc0, 0x7d, 0x97, 0xb9, 0xbc, 0x1d, 0x61,
	0x28, 0x75, 0x88, 0xed, 0x76, 0xec, 0x79, 0xcc, 0xc5, 0x86, 0x34, 0x48, 0xec, 0x05, 0xb1, 0xbb,
	0xd2, 0xc7, 0x31, 0xd9, 0x41, 0xcf, 0x11, 0x3e, 0xa7, 0xb8, 0x4a, 0x1e, 0xee, 0x3d, 0x8e, 0x4d,
	0xe9, 0x68, 0xbd, 0x6e, 0x07, 0x5b, 0xea, 0xcd, 0x05, 0x77, 0xb4, 0x61, 0x47, 0xb2, 0xff, 0x9e,
	0x8c, 0x48, 0xc7, 0x55, 0xa3, 0x20, 0xb2, 0xa9, 0x8b, 0x13, 0x4a, 0x8e, 0xbd, 0x8e, 0xcb, 0x70,
	0xb5, 0x9c, 0xce, 0xb2, 0xd0, 0xfa, 0x85, 0xb8, 0x46, 0xaa, 0xde, 0x0f, 0x44, 0x18, 0x41, 0x5d,
	0xf0, 0x57, 0x38, 0x73, 0x1d, 0x97, 0xb6, 0x70, 0xcf, 0x8c, 0xa4, 0xde, 0xf7, 0x92, 0x26, 0x1d,
	0x53, 0x22, 0x27, 0x7a, 0x6f, 0xb9, 0xe9, 0xb2, 0x12, 0xee, 0xa9, 0x40, 0x72, 0x1f, 0x39, 0xfc,
	0x4a, 0xdc, 0x65, 0xb8, 0xaf, 0x94, 0x2e, 0x63, 0x8e, 0xc0, 0xfd, 0x0a, 0x3b, 0xc9, 0xec, 0x65,
	0x4c, 0x44, 0xd4, 0xc7, 0xb5, 0x13, 0xc5, 0xa3, 0xa7, 0xde, 0x45, 0xce, 0x23, 0x07, 0xc7, 0xc7,
	0x5b, 0x76, 0x4b, 0x4e, 0xa2, 0x15, 0x9f, 0x9d, 0x92, 0x5e, 0xa5, 0x6f, 0xa2, 0xb6, 0x99, 0x19,
	0x35, 0x21, 0xb3, 0xa9, 0x97, 0xa8, 0x63, 0x3d, 0xbd, 0xb5, 0x53, 0x2f, 0xbd, 0xf1, 0x63, 0xaa,
	0x78, 0x09, 0xd9, 0xcb, 0x86, 0x27, 0xd6, 0x37, 0x37, 0x86, 0xd9, 0x80, 0x37, 0x27, 0x67, 0x64,
	0xc9, 0x83, 0xd7, 0xe3, 0x81, 0xf0, 0xfe, 0xe3, 0x90, 0x73, 0x64, 0x6a, 0x99, 0xb5, 0xb0, 0x4d,
	0xc5, 0x3c, 0xdf, 0xc7, 0x44, 0x71, 0x8d, 0x10, 0x67, 0x75, 0xb4, 0x6a, 0x0f, 0x86, 0xa3, 0xc1,
	0xa6, 0x5e, 0xa0, 0x71, 0xd2, 0x79, 0x3a, 0xd9, 0x3f, 0xee, 0x53, 0xe6, 0x07, 0x89, 0x4e, 0x10,
	0xb0, 0x4d, 0x1a, 0x3b, 0x0e, 0x13, 0xa6, 0xde, 0x25, 0xe9, 0xcb, 0x51, 0x1c, 0x26, 0xcb, 0x2c,
	0x8c, 0x12, 0x4b, 0xdf, 0xb3, 0x59, 0xac, 0xb1, 0x84, 0x29, 0x75, 0xcd, 0xa9, 0x92, 0x1d, 0xf2,
	0xea, 0xb0, 0x3e, 0x1c, 0x0c, 0x47, 0x32, 0x7d, 0x18, 0x77, 0xab, 0x2f, 0xf9, 0xfa, 0xe5, 0xc5,
	0x1c, 0x99, 0xf2, 0x68, 0x57, 0x67, 0x63, 0xac, 0xcb, 0x28, 0x26, 0x8b, 0xaf, 0x9e, 0x20, 0xfb,
	0xf2, 0x57, 0x85, 0xd1, 0xe6, 0xea, 0xda, 0x95, 0x83, 0x4d, 0xd9, 0xde, 0x93, 0xe9, 0xb8, 0xcc,
	0x31, 0x64, 0x2e, 0x63, 0x2f, 0x29, 0xa5, 0x0e, 0x92, 0x02, 0x75, 0x97, 0xe9, 0x4a, 0x78, 0x83,
	0xf2, 0x8b, 0x0b, 0xf3, 0xe4, 0xa0, 0x3c, 0x44, 0x53, 0x33, 0x9a, 0x75, 0xb7, 0x28, 0x9c, 0x4f,
	0xce, 0xbb, 0x71, 0x9b, 0xa4, 0x2d, 0x82, 0x24, 0x4d, 0x15, 0x13, 0xe1, 0xb9, 0x2b, 0x38, 0xb7,
	0x70, 0x0b, 0x52, 0xd4, 0xaf, 0x5b, 0xfe, 0xeb, 0x73, 0x3b, 0x8b, 0x57, 0x91, 0x03, 0xe1, 0xf1,
	0x63, 0xc7, 0x8e, 0xac, 0x0f, 0x36, 0xed, 0x23, 0xeb, 0x6b, 0x57, 0x8e, 0x75, 0x3e, 0x40, 0xe0,
	0x89, 0x24, 0x7d, 0x3d, 0x95, 0xa9, 0x7c, 0x2e, 0x39, 0xeb, 0x06, 0x45, 0xc9, 0x32, 0x8f, 0x16,
	0x93, 0x80, 0x8d, 0xef, 0x0a, 0x85, 0x22, 0x39, 0xe7, 0xc6, 0x0f, 0x88, 0x38, 0xca, 0x9f, 0x99,
	0xbc, 0xe0, 0xe3, 0xb7, 0xcc, 0x5e, 0x2f, 0xd9, 0xab, 0xa3, 0xc1, 0xe5, 0x1b, 0x9b, 0x27, 0x55,
	0x42, 0x4b, 0x5b, 0x25, 0xed, 0x4c, 0x52, 0x4a, 0x4a, 0xe9, 0x6b, 0x39, 0x29, 0x5b, 0xe9, 0x9b,
	0x4e, 0x29, 0x97, 0x75, 0xd6, 0xae, 0xe4, 0x0a, 0x66, 0x32, 0xb9, 0xaa, 0x73, 0x24, 0x25, 0xd7,
	0x30, 0x97, 0xc9, 0x75, 0x6c, 0x4f, 0x7b, 0xb7, 0xb0, 0x23, 0x2d, 0xb5, 0x92, 0x12, 0x48, 0x26,
	0x5b, 0xd8, 0x99, 0xc9, 0x65, 0xec, 0xca, 0xe4, 0x0a, 0x76, 0x67, 0x72, 0x55, 0xe7, 0x44, 0x4a,
	0xae, 0x61, 0x6f, 0x26, 0xd7, 0x81, 0x4c, 0x6e, 0xe8, 0x64, 0x48, 0xc9, 0x4d, 0x14, 0xd4, 0x91,
	0xa2, 0xc6, 0x5a, 0xc0, 0xfe, 0x1c, 0x4a, 0x38, 0x90, 0x83, 0xa5, 0xdf, 0x2d, 0x68, 0x28, 0xe3,
	0x60, 0x0e, 0x15, 0x9c, 0x9e, 0x43, 0x15, 0x67, 0xe4, 0x50, 0xc3, 0x99, 0x39, 0xd4, 0x31, 0x9f,
	0x43, 0x03, 0x67, 0xe5, 0xd0, 0xd4, 0xd9, 0x90, 0x9e, 0xe1, 0x02, 0xce, 0xce, 0xa1, 0xa4, 0xd3,
	0x21, 0x0d, 0x96, 0x4e, 0x87, 0x34, 0x94, 0x75, 0x3a, 0xc4, 0x69, 0xab, 0x8c, 0x9b, 0xa6, 0x73,
	0x29, 0x27, 0x25, 0x14, 0x33, 0xd9, 0xc2, 0x79, 0x99, 0x5c, 0xc6, 0xcd, 0x32, 0xb9, 0x82, 0x9b,
	0x67, 0x72, 0x55, 0xa7, 0x42, 0x4a, 0xae, 0xe1, 0xfc, 0x4c, 0xae, 0xeb, 0x44, 0x48, 0xc9, 0x0d,
	0xdc, 0x32, 0x93, 0x9b, 0x3a, 0x0d, 0xd2, 0x63, 0x2d, 0xe0, 0x56, 0x39, 0x94, 0x74, 0x12, 0xa4,
	0xc1, 0xc2, 0xad, 0x53, 0xe5, 0x2a, 0xb8, 0x30, 0x6d, 0x5c, 0x49, 0x4a, 0xb8, 0x28, 0x93, 0x2d,
	0x2c, 0x64, 0x72, 0x59, 0x27, 0x40, 0x4a, 0xae, 0xc0, 0xca, 0xe4, 0x2a, 0xca, 0x99, 0x5c, 0x43,
	0x25, 0x93, 0xeb, 0xa8, 0x66, 0x72, 0x03, 0xb5, 0x4c, 0x6e, 0xa2, 0x9e, 0xaa, 0x50, 0x91, 0xca,
	0x35, 0x72, 0x28, 0xa1, 0x99, 0xea, 0x53, 0xc5, 0x6d, 0xd2, 0xe7, 0xab, 0x49, 0x09, 0xb7, 0xcd,
	0x64, 0x0b, 0xb7, 0xcb, 0xe4, 0x32, 0x6e, 0x9f, 0xc9, 0x15, 0xdc, 0x21, 0x93, 0xab, 0xb8, 0x38,
	0x93, 0x6b, 0xb8, 0x63, 0x26, 0xd7, 0x41, 0x33, 0xb9, 0x81, 0x56, 0x26, 0x37, 0x61, 0xa7, 0x2a,
	0x54, 0xa5, 0x3e, 0x4e, 0x0e, 0x25, 0xb0, 0x1c, 0x2c, 0xb4, 0x73, 0x28, 0xa3, 0x93, 0x43, 0x25,
	0x4d, 0x76, 0x14, 0x54, 0xc1, 0xd3, 0x39, 0xd4, 0x70, 0x49, 0x3a, 0x46, 0x2d, 0x29, 0x61, 0x29,
	0x93, 0x2d, 0xb8, 0x99, 0x5c, 0x46, 0x37, 0x93, 0x2b, 0xf0, 0x32, 0xb9, 0x0a, 0x91, 0xc9, 0x35,
	0xf8, 0x99, 0x5c, 0xc7, 0xa5, 0x99, 0xdc, 0x40, 0x90, 0xc9, 0x4d, 0x84, 0xe9, 0xa8, 0x75, 0x44,
	0x69, 0x69, 0x3d, 0x29, 0x21, 0xce, 0x64, 0x0b, 0xbd, 0x4c, 0x2e, 0x63, 0x39, 0x93, 0x2b, 0xe8,
	0x67, 0x72, 0x55, 0xa7, 0x36, 0x4a, 0xae, 0xe1, 0xb2, 0x4c, 0xae, 0xe3, 0x4e, 0x99, 0xdc, 0xc0,
	0x9d, 0x33, 0xb9, 0x89, 0xbb, 0xa4, 0x13, 0xaf, 0x4b, 0xcb, 0xdd, 0x35, 0x87, 0x12, 0x92, 0x1c,
	0x2c, 0xdc, 0x2d, 0x87, 0x32, 0x56, 0x73, 0xa8, 0xe0, 0x50, 0x0e, 0x55, 0xac, 0xe5, 0x50, 0xc3,
	0xe1, 0x1c, 0xea, 0x18, 0xe4, 0xd0, 0xc0, 0xdd, 0x73, 0x68, 0xe2, 0xf2, 0x0c, 0xac, 0x05, 0x5c,
	0x91, 0x43, 0x09, 0xeb, 0x39, 0x58, 0xb8, 0x47, 0x0e, 0x65, 0x5c, 0x99, 0x43, 0x05, 0x47, 0x72,
	0xa8, 0xe2, 0x68, 0x0e, 0x35, 0x0c, 0x73, 0xa8, 0xeb, 0xc4, 0x45, 0x43, 0x03, 0xc7, 0x72, 0x68,
	0xe2, 0xaa, 0x0c, 0xca, 0x0b, 0xd8, 0xcc, 0xa1, 0x84, 0xad, 0x1c, 0x2c, 0x8c, 0x72, 0x28, 0xe3,
	0x78, 0x0e, 0x15, 0x9c, 0xc8, 0xa1, 0x8a, 0xab, 0x73, 0xa8, 0xe1, 0x9a, 0x1c, 0xea, 0x38, 0x99,
	0x43, 0x03, 0xf7, 0xcc, 0xa1, 0x89, 0x7b, 0x65, 0x50, 0x59, 0xc0, 0xbd, 0x73, 0x28, 0xe1, 0x3e,
	0x39, 0x58, 0xb8, 0x6f, 0x0e, 0x65, 0xdc, 0xaf, 0xb0, 0x6b, 0x0c, 0x15, 0x5c, 0x3b, 0x91, 0x53,
	0x15, 0xf7, 0x9f, 0x28, 0xec, 0x50, 0xbe, 0xd4, 0xc0, 0x03, 0x26, 0x64, 0x92, 0x23, 0xc5, 0xa4,
	0x84, 0x07, 0xe6, 0x60, 0xe1, 0x41, 0x39, 0x94, 0x71, 0x5d, 0x0e, 0x15, 0x5c, 0x9f, 0x43, 0x15,
	0x0f, 0xce, 0xa1, 0x86, 0x87, 0xe4, 0x50, 0xc7, 0x43, 0x73, 0x68, 0xe0, 0x61, 0x39, 0x34, 0xf1,
	0xf0, 0xb1, 0x36, 0x0d, 0xe9, 0x55, 0x8f, 0x30, 0xa8, 0x84, 0x47, 0x1a, 0x64, 0xe1, 0x51, 0x06,
	0x95, 0xf1, 0x68, 0x83, 0x2a, 0x78, 0x8c, 0x41, 0x55, 0x3c, 0xd6, 0xa0, 0x1a, 0x1e, 0x67, 0x50,
	0x1d, 0x8f, 0x37, 0xa8, 0x81, 0x27, 0x8c, 0x67, 0xdf, 0xc4, 0x13, 0xc7, 0x5a, 0x35, 0x93, 0x12,
	0x9e, 0x94, 0x83, 0x85, 0x27, 0xe7, 0x50, 0xc6, 0x53, 0x72, 0xa8, 0xe0, 0xa9, 0x39, 0x54, 0xf1,
	0xb4, 0x1c, 0x6a, 0x78, 0x7a, 0x0e, 0x75, 0x3c, 0x23, 0x87, 0x06, 0x9e, 0x99, 0x43, 0x13, 0xcf,
	0x1a, 0x6b, 0xd3, 0x94, 0xb3, 0x7f, 0xb6, 0x41, 0x25, 0x3c, 0xc7, 0x20, 0x0b, 0xcf, 0x35, 0xa8,
	0x8c, 0xe7, 0x19, 0x54, 0xc1, 0xf3, 0x0d, 0xaa, 0xe2, 0x05, 0x06, 0xd5, 0xf0, 0x42, 0x83, 0xea,
	0x78, 0x91, 0x41, 0x0d, 0xbc, 0xd8, 0xa0, 0x26, 0x5e, 0x92, 0x93, 0xb5, 0x80, 0x97, 0x1a, 0x54,
	0xc2, 0xcb, 0x0c, 0xb2, 0xf0, 0x72, 0x83, 0xca, 0x78, 0x85, 0x41, 0x15, 0xbc, 0xd2, 0xa0, 0x2a,
	0x5e, 0x65, 0x50, 0x0d, 0xaf, 0x36, 0xa8, 0x8e, 0xd7, 0x18, 0xd4, 0xc0, 0x6b, 0x0d, 0x6a, 0xe2,
	0x75, 0x39, 0x95, 0x17, 0xf0, 0x7a, 0x83, 0x4a, 0x78, 0x83, 0x4c, 0x72, 0x66, 0x64, 0x72, 0xb2,
	0x80, 0x37, 0x8e, 0x6b, 0x4a, 0x0b, 0x49, 0x09, 0x6f, 0x32, 0xc8, 0xc2, 0x9b, 0x0d, 0x2a, 0xe3,
	0x2d, 0x06, 0x55, 0xf0, 0x56, 0x83, 0xaa, 0x78, 0x9b, 0x41, 0x35, 0xbc, 0xdd, 0xa0, 0x3a, 0xde,
	0x61, 0x50, 0x03, 0xef, 0x34, 0xa8, 0x89, 0x77, 0x65, 0x9a, 0x94, 0xf0, 0xee, 0xac, 0x46, 0xe6,
	0x5e, 0xef, 0x31, 0xc8, 0xc2, 0x7b, 0x0d, 0x2a, 0xe3, 0x7d, 0x06, 0x55, 0xf0, 0x7e, 0x83, 0xaa,
	0xf8, 0x40, 0xd6, 0xa3, 0x85, 0x0f, 0x66, 0x35, 0x32, 0xdf, 0xfa, 0x90, 0x41, 0x16, 0x3e, 0x6c,
	0x50, 0x19, 0x1f, 0xc9, 0x5a, 0x95, 0xf1, 0xd1, 0xac, 0x46, 0x66, 0x1e, 0x1f, 0x33, 0xc8, 0xc2,
	0xc7, 0x0d, 0x2a, 0xe3, 0x13, 0x06, 0x55, 0xf0, 0x49, 0x83, 0xaa, 0xf8, 0x94, 0x41, 0x35, 0x7c,
	0xda, 0xa0, 0x3a, 0x3e, 0x63, 0x50, 0x03, 0x9f, 0x35, 0xa8, 0x89, 0xcf, 0xc9, 0xcb, 0xc1, 0xf6,
	0x74, 0xf4, 0x05, 0x7c, 0xde, 0xc4, 0x12, 0xbe, 0x60, 0xa2, 0x85, 0x2f, 0x66, 0x6a, 0x57, 0xf0,
	0xa5, 0xac, 0x1b, 0x99, 0x93, 0x7c, 0xd9, 0x20, 0x0b, 0x5f, 0x31, 0xa8, 0x8c, 0xaf, 0x1a, 0x54,
	0xc1, 0xd7, 0x0c, 0xaa, 0xe2, 0xeb, 0x06, 0xd5, 0xf0, 0x0d, 0x83, 0xea, 0xf8, 0xa6, 0x41, 0x0d,
	0x7c, 0x2b, 0x1b, 0xbb, 0x8a, 0x6f, 0x67, 0x35, 0x32, 0xff, 0xf8, 0x8e, 0x41, 0x16, 0xbe, 0x6b,
	0x50, 0x19, 0xdf, 0x33, 0xa8, 0x82, 0xef, 0x1b, 0x54, 0xc5, 0x0f, 0x0c, 0xaa, 0xe1, 0x87, 0x06,
	0xd5, 0xf1, 0x23, 0x83, 0x1a, 0xf8, 0xb1, 0x41, 0x4d, 0xfc, 0x24, 0x33, 0x8a, 0xca, 0x48, 0x7e,
	0x9a, 0x29, 0x56, 0xc3, 0xcf, 0xb2, 0x07, 0x65, 0x52, 0xf1, 0x73, 0x83, 0x2c, 0xfc, 0xc2, 0xa0,
	0x32, 0x7e, 0x69, 0x50, 0x05, 0xbf, 0x32, 0xa8, 0x8a, 0x5f, 0x1b, 0x54, 0xc3, 0x6f, 0x0c, 0xaa,
	0xe3, 0xb7, 0xd9, 0x68, 0x75, 0xfc, 0x2e, 0xab, 0x91, 0xc9, 0xc4, 0xef, 0x0d, 0xb2, 0xf0, 0x07,
	0x83, 0xca, 0xf8, 0xa3, 0x41, 0x15, 0xfc, 0xc9, 0xa0, 0x2a, 0xfe, 0x6c, 0x50, 0x0d, 0x7f, 0x31,
	0xa8, 0x8e, 0xbf, 0x1a, 0xd4, 0xc0, 0xdf, 0x0c, 0x6a, 0xe2, 0xef, 0x99, 0x19, 0x54, 0x7a, 0xf1,
	0x0f, 0x13, 0x4b, 0xf8, 0xa7, 0x89, 0x16, 0xfe, 0x65, 0x62, 0x19, 0xff, 0x36, 0xb1, 0x82, 0x6b,
	0x27, 0x0d, 0xac, 0xe2, 0xfe, 0x26, 0xd6, 0xf0, 0x00, 0x13, 0xeb, 0x78, 0xa0, 0x89, 0x0d, 0x3c,
	0xc8, 0xc4, 0x26, 0xae, 0x33, 0xd0, 0x5a, 0xc0, 0xf5, 0x26, 0x96, 0xf0, 0x60, 0x13, 0x2d, 0x3c,
	0xc4, 0xc4, 0x32, 0x1e, 0x6a, 0x62, 0x05, 0x0f, 0x33, 0xb1, 0x8a, 0x87, 0x9b, 0x58, 0xc3, 0x23,
	0x4c, 0xac, 0xe3, 0x91, 0x26, 0x36, 0xf0, 0x28, 0x13, 0x9b, 0x78, 0xb4, 0x81, 0xe5, 0x05, 0x3c,
	0xc6, 0xc4, 0x12, 0x1e, 0x6b, 0xa2, 0x85, 0xc7, 0x99, 0x58, 0xc6, 0xe3, 0x4d, 0xac, 0xe0, 0x09,
	0x26, 0x56, 0xf1, 0x44, 0x13, 0x6b, 0x78, 0x92, 0x89, 0x75, 0x3c, 0xd9, 0xc4, 0x06, 0x9e, 0x62,
	0x62, 0x13, 0x4f, 0x35, 0xb0, 0xb2, 0x80, 0xa7, 0x99, 0x58, 0xc2, 0xd3, 0x4d, 0xb4, 0xf0, 0x0c,
	0x13, 0xcb, 0x78, 0xa6, 0x89, 0x15, 0x3c, 0x6b, 0x72, 0xec, 0x96, 0x0d, 0x3c, 0x7b, 0x72, 0xec,
	0x26, 0x32, 0x2d, 0x79, 0x8e, 0x41, 0x16, 0x9e, 0x6b, 0x50, 0x19, 0xcf, 0x33, 0xa8, 0x82, 0xe7,
	0x1b, 0x54, 0xc5, 0x0b, 0x0c, 0xaa, 0xe1, 0x85, 0x59, 0xff, 0x4d, 0xbc, 0x28, 0xab, 0x91, 0x07,
	0xff, 0x8b, 0x0d, 0xb2, 0xf0, 0x12, 0x83, 0xca, 0x78, 0xa9, 0x41, 0x15, 0xbc, 0xcc, 0xa0, 0x2a,
	0x5e, 0x6e, 0x50, 0x0d, 0xaf, 0x30, 0xa8, 0x8e, 0x57, 0x1a, 0xd4, 0xc0, 0xab, 0x0c, 0x6a, 0xe2,
	0xd5, 0xd9, 0xc4, 0x55, 0x06, 0xf0, 0x1a, 0x13, 0x4b, 0x78, 0xad, 0x89, 0x16, 0x5e, 0x67, 0x62,
	0x19, 0xaf, 0x37, 0xb1, 0x82, 0x37, 0x98, 0x58, 0xc5, 0x1b, 0x4d, 0xac, 0xe1, 0x4d, 0x26, 0xd6,
	0xf1, 0x66, 0x13, 0x1b, 0x78, 0x8b, 0x89, 0x4d, 0xbc, 0xd5, 0x40, 0x6b, 0x01, 0x6f, 0x33, 0xb1,
	0x84, 0xb7, 0x9b, 0x68, 0xe1, 0x1d, 0x26, 0x96, 0xf1, 0x4e, 0x13, 0x2b, 0x78, 0x97, 0x89, 0x55,
	0xbc, 0xdb, 0xc4, 0x1a, 0xde, 0x63, 0x62, 0x1d, 0xef, 0x35, 0xb1, 0x81, 0xf7, 0x99, 0xd8, 0xc4,
	0xfb, 0x0d, 0x2c, 0x2f, 0xe0, 0x03, 0x26, 0x96, 0xf0, 0x41, 0x13, 0x2d, 0x7c, 0xc8, 0xc4, 0x32,
	0x3e, 0x6c, 0x62, 0x05, 0x1f, 0x31, 0xb1, 0x8a, 0x8f, 0x9a, 0x58, 0xc3, 0xc7, 0xc6, 0xee, 0x61,
	0x2d, 0xe0, 0xe3, 0xe3, 0xe5, 0xb2, 0x64, 0x86, 0xf1, 0x09, 0x83, 0x2c, 0x7c, 0xd2, 0xa0, 0x32,
	0x3e, 0x65, 0x50, 0x05, 0x9f, 0x36, 0xa8, 0x8a, 0xcf, 0x18, 0x54, 0xc3, 0x67, 0x0d, 0xaa, 0xe3,
	0x73, 0x06, 0x35, 0xf0, 0x79, 0x83, 0x9a, 0xf8, 0xc2, 0x58, 0x31, 0x39, 0xfa, 0x02, 0xbe, 0x68,
	0x62, 0x09, 0x5f, 0x32, 0xd1, 0xc2, 0x97, 0x4d, 0x2c, 0xe3, 0x2b, 0x26, 0x56, 0xf0, 0x55, 0x13,
	0xab, 0xf8, 0x9a, 0x89, 0x35, 0x7c, 0xdd, 0xc4, 0x3a, 0xbe, 0x61, 0x62, 0x03, 0xdf, 0x34, 0xb1,
	0x89, 0x6f, 0x19, 0x68, 0x2d, 0xe0, 0xdb, 0x26, 0x96, 0xf0, 0x1d, 0x13, 0x2d, 0x7c, 0xd7, 0xc4,
	0x32, 0xbe, 0x67, 0x62, 0x05, 0xdf, 0x37, 0xb1, 0x8a, 0x1f, 0x98, 0x58, 0xc3, 0x0f, 0x4d, 0xac,
	0xe3, 0x47, 0xd9, 0xba, 0x94, 0xf0, 0xe3, 0xcc, 0x4e, 0x32, 0xdf, 0xfa, 0x89, 0x41, 0x16, 0x7e,
	0x6a, 0x50, 0x19, 0x3f, 0xcb, 0x5a, 0x59, 0xf8, 0x79, 0x56, 0x23, 0x73, 0xaa, 0x5f, 0x18, 0x64,
	0xe1, 0x97, 0x06, 0x95, 0xf1, 0x2b, 0x83, 0x2a, 0xf8, 0x75, 0xd6, 0x47, 0x19, 0xbf, 0xc9, 0x6a,
	0x64, 0x86, 0xf5, 0x5b, 0x83, 0x2c, 0xfc, 0xce, 0xa0, 0x32, 0x7e, 0x6f, 0x50, 0x05, 0x7f, 0x30,
	0xa8, 0x8a, 0x3f, 0x1a, 0x54, 0xc3, 0x9f, 0x0c, 0xaa, 0xe3, 0xcf, 0x06, 0x35, 0xf0, 0x17, 0x83,
	0x9a, 0xf8, 0x6b, 0x66, 0x12, 0x95, 0x61, 0xfd, 0x2d, 0x53, 0xac, 0x82, 0xbf, 0x67, 0x72, 0x15,
	0xff, 0xc8, 0x1a, 0xc9, 0x9c, 0xe6, 0x9f, 0x06, 0x59, 0xf8, 0x97, 0x41, 0x65, 0xfc, 0xdb, 0xa0,
	0x0a, 0xae, 0x9d, 0xca, 0xa9, 0x8a, 0xfb, 0x1b, 0x54, 0xc3, 0x03, 0x0c, 0xaa, 0xe3, 0x81, 0x53,
	0xe3, 0xd1, 0x6a, 0x78, 0x50, 0x56, 0x23, 0x13, 0x95, 0xeb, 0x0c, 0xb2, 0x70, 0xbd, 0x41, 0x65,
	0x3c, 0xd8, 0xa0, 0x0a, 0x1e, 0x32, 0x75, 0xc1, 0xe3, 0x67, 0xc8, 0x3e, 0x7b, 0x73, 0xa0, 0x3e,
	0xf2, 0xa2, 0xa3, 0xd1, 0xe6, 0xfa, 0xa1, 0xe3, 0xa3, 0x41, 0x61, 0x3f, 0xd9, 0xab, 0xbe, 0x3c,
	0x4a, 0x68, 0x3c, 0xfe, 0xb8, 0x6f, 0xa2, 0x70, 0x06, 0x39, 0xa0, 0x0b, 0xd5, 0xa7, 0x1e, 0xdc,
	0xe3, 0x11, 0x57, 0x9f, 0x7a, 0xa8, 0xaf, 0xda, 0x58, 0xdf, 0xa7, 0x9e, 0x43, 0x5b, 0x2e, 0x53,
	0x6d, 0xf4, 0x0f, 0x09, 0xea, 0x07, 0x71, 0xa3, 0x46, 0xbf, 0x5b, 0xcd, 0x5b, 0x4e, 0x17, 0x6e,
	0x4a, 0xce, 0x36, 0xea, 0x03, 0xe1, 0xba, 0xa2, 0x77, 0x83, 0xce, 0x67, 0x0a, 0x67, 0x93, 0x33,
	0xf5, 0xab, 0xe0, 0xfc, 0x8b, 0xba, 0x5c, 0xab, 0xd9, 0x42, 0x91, 0x9c, 0x73, 0x6a, 0xf5, 0x29,
	0xfa, 0xa9, 0x97, 0xa9, 0xbe, 0xf0, 0x93, 0xd8, 0xc7, 0x76, 0xd9, 0x9d, 0x1f, 0x88, 0x9e, 0xfa,
	0xce, 0xa1, 0xc7, 0x12, 0x11, 0x24, 0x61, 0xdc, 0xe9, 0xb0, 0x50, 0xfd, 0x00, 0xb0, 0x43, 0xfd,
	0x24, 0xe9, 0x79, 0x62, 0x85, 0x7b, 0x1d, 0xfd, 0x65, 0x56, 0x18, 0x07, 0x3d, 0xb6, 0x12, 0x62,
	0x67, 0x61, 0x37, 0xd9, 0xa1, 0xbe, 0x9d, 0x51, 0xaf, 0x9e, 0x77, 0x15, 0x0e, 0x10, 0xa4, 0x03,
	0x45, 0xd9, 0x2f, 0xcf, 0xbb, 0xe5, 0x84, 0x96, 0xb9, 0xe7, 0x88, 0xe5, 0x30, 0x71, 0x38, 0x75,
	0x85, 0xfa, 0xda, 0x8e, 0xba, 0x2c, 0x88, 0x92, 0x30, 0x5a, 0x71, 0x19, 0xf6, 0x14, 0xce, 0x22,
	0xa7, 0x2f, 0xd2, 0x30, 0xd1, 0xb6, 0x14, 0x5e, 0x22, 0xda, 0xed, 0xa4, 0x15, 0x47, 0x91, 0xf0,
	0xb0, 0x57, 0x7d, 0x83, 0xe9, 0x24, 0x36, 0xf5, 0x92, 0x16, 0x4b, 0xc2, 0x25, 0xee, 0xfb, 0xcc,
	0x01, 0xe4, 0x60, 0xd4, 0x49, 0x64, 0xb3, 0x68, 0x31, 0xee, 0xb6, 0x3c, 0xca, 0x5d, 0x0c, 0x0a,
	0xa7, 0x93, 0xfd, 0xd4, 0x49, 0x42, 0x7e, 0x19, 0x4b, 0x78, 0x98, 0xb4, 0x5d, 0xd6, 0xe7, 0xfa,
	0xb7, 0xa7, 0x83, 0xa4, 0x90, 0xf6, 0xa2, 0xad, 0x9b, 0xa8, 0x4f, 0x68, 0x2f, 0x4f, 0x1b, 0x18,
	0xe5, 0xfa, 0x83, 0xda, 0x2b, 0xd2, 0xfe, 0x8d, 0x8a, 0xd8, 0xc7, 0xfa, 0x8d, 0xbb, 0x51, 0x1f,
	0xdb, 0xde, 0xa3, 0x70, 0x13, 0x72, 0xc6, 0x0d, 0xcb, 0x8d, 0x6f, 0x98, 0xae, 0x94, 0x6b, 0x2e,
	0xb5, 0xd2, 0xdf, 0x31, 0x84, 0x89, 0xb3, 0xe2, 0xd1, 0x2e, 0xb7, 0x13, 0x9f, 0xf7, 0x99, 0x1b,
	0xe2, 0x88, 0x34, 0xd1, 0x7f, 0xaa, 0xd7, 0xce, 0x11, 0x07, 0x2e, 0x8e, 0x5e, 0x70, 0x3a, 0x99,
	0x6e, 0x1f, 0x59, 0xbd, 0xbc, 0x30, 0x4b, 0x26, 0x3d, 0xa1, 0x7f, 0xab, 0x58, 0x61, 0x21, 0x26,
	0x5a, 0xa7, 0x91, 0xfd, 0x6b, 0x1b, 0x47, 0x2f, 0x4c, 0x3f, 0x8d, 0xbe, 0x30, 0xfd, 0xf8, 0xf9,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xec, 0x6f, 0x56, 0x2c, 0x2d, 0x00, 0x00,
}
