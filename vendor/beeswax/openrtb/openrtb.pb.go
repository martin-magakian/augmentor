// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beeswax/openrtb/openrtb.proto

package openrtb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// OpenRTB Native 7.4: Common image asset element types of native advertising at
// the time of writing this spec. This list is non-exhaustive and intended to be
// extended by the buyers and sellers as the format evolves.
type NativeRequest_Asset_Image_ImageAssetType int32

const (
	// * Icon image.
	NativeRequest_Asset_Image_ICON NativeRequest_Asset_Image_ImageAssetType = 1
	// * Logo image for the brand/app.
	NativeRequest_Asset_Image_LOGO NativeRequest_Asset_Image_ImageAssetType = 2
	// * Large image preview for the ad.
	NativeRequest_Asset_Image_MAIN NativeRequest_Asset_Image_ImageAssetType = 3
)

var NativeRequest_Asset_Image_ImageAssetType_name = map[int32]string{
	1: "ICON",
	2: "LOGO",
	3: "MAIN",
}
var NativeRequest_Asset_Image_ImageAssetType_value = map[string]int32{
	"ICON": 1,
	"LOGO": 2,
	"MAIN": 3,
}

func (x NativeRequest_Asset_Image_ImageAssetType) Enum() *NativeRequest_Asset_Image_ImageAssetType {
	p := new(NativeRequest_Asset_Image_ImageAssetType)
	*p = x
	return p
}
func (x NativeRequest_Asset_Image_ImageAssetType) String() string {
	return proto.EnumName(NativeRequest_Asset_Image_ImageAssetType_name, int32(x))
}
func (x *NativeRequest_Asset_Image_ImageAssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NativeRequest_Asset_Image_ImageAssetType_value, data, "NativeRequest_Asset_Image_ImageAssetType")
	if err != nil {
		return err
	}
	*x = NativeRequest_Asset_Image_ImageAssetType(value)
	return nil
}
func (NativeRequest_Asset_Image_ImageAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0, 1, 0}
}

// *
// OpenRTB Native 7.3: Common asset element types of native advertising.
// This list is non-exhaustive and intended to be extended by the buyers and sellers
// as the format evolves. An implementing exchange may not support all asset variants
// or introduce new ones unique to that system.
type NativeRequest_Asset_Data_DataAssetType int32

const (
	// * Sponsored By message where response should contain the brand name of the sponsor.
	NativeRequest_Asset_Data_SPONSORED NativeRequest_Asset_Data_DataAssetType = 1
	// * Descriptive text associated with the product or service being advertised.
	NativeRequest_Asset_Data_DESC NativeRequest_Asset_Data_DataAssetType = 2
	// *
	// Rating of the product being offered to the user.
	// For example an app's rating in an app store from 0-5.
	NativeRequest_Asset_Data_RATING NativeRequest_Asset_Data_DataAssetType = 3
	// * Number of social ratings or "likes" of the product being offered to the user.
	NativeRequest_Asset_Data_LIKES NativeRequest_Asset_Data_DataAssetType = 4
	// * Number downloads/installs of this product.
	NativeRequest_Asset_Data_DOWNLOADS NativeRequest_Asset_Data_DataAssetType = 5
	// *
	// Price for product / app / in-app purchase.
	// Value should include currency symbol in localised format.
	NativeRequest_Asset_Data_PRICE NativeRequest_Asset_Data_DataAssetType = 6
	// *
	// Sale price that can be used together with price to indicate a discounted price
	// compared to a regular price. Value should include currency symbol in localised format.
	NativeRequest_Asset_Data_SALEPRICE NativeRequest_Asset_Data_DataAssetType = 7
	// * Phone number.
	NativeRequest_Asset_Data_PHONE NativeRequest_Asset_Data_DataAssetType = 8
	// * Address.
	NativeRequest_Asset_Data_ADDRESS NativeRequest_Asset_Data_DataAssetType = 9
	// * Additional descriptive text associated with the product or service being advertised.
	NativeRequest_Asset_Data_DESC2 NativeRequest_Asset_Data_DataAssetType = 10
	// * Display URL for the text ad.
	NativeRequest_Asset_Data_DISPLAYURL NativeRequest_Asset_Data_DataAssetType = 11
	// * Text describing a "call to action" button for the destination URL.
	NativeRequest_Asset_Data_CTATEXT NativeRequest_Asset_Data_DataAssetType = 12
	// STORE bit for ADX NativeAdTemplate
	NativeRequest_Asset_Data_STORE NativeRequest_Asset_Data_DataAssetType = 500
)

var NativeRequest_Asset_Data_DataAssetType_name = map[int32]string{
	1:   "SPONSORED",
	2:   "DESC",
	3:   "RATING",
	4:   "LIKES",
	5:   "DOWNLOADS",
	6:   "PRICE",
	7:   "SALEPRICE",
	8:   "PHONE",
	9:   "ADDRESS",
	10:  "DESC2",
	11:  "DISPLAYURL",
	12:  "CTATEXT",
	500: "STORE",
}
var NativeRequest_Asset_Data_DataAssetType_value = map[string]int32{
	"SPONSORED":  1,
	"DESC":       2,
	"RATING":     3,
	"LIKES":      4,
	"DOWNLOADS":  5,
	"PRICE":      6,
	"SALEPRICE":  7,
	"PHONE":      8,
	"ADDRESS":    9,
	"DESC2":      10,
	"DISPLAYURL": 11,
	"CTATEXT":    12,
	"STORE":      500,
}

func (x NativeRequest_Asset_Data_DataAssetType) Enum() *NativeRequest_Asset_Data_DataAssetType {
	p := new(NativeRequest_Asset_Data_DataAssetType)
	*p = x
	return p
}
func (x NativeRequest_Asset_Data_DataAssetType) String() string {
	return proto.EnumName(NativeRequest_Asset_Data_DataAssetType_name, int32(x))
}
func (x *NativeRequest_Asset_Data_DataAssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NativeRequest_Asset_Data_DataAssetType_value, data, "NativeRequest_Asset_Data_DataAssetType")
	if err != nil {
		return err
	}
	*x = NativeRequest_Asset_Data_DataAssetType(value)
	return nil
}
func (NativeRequest_Asset_Data_DataAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0, 2, 0}
}

//
// OpenRTB 3.3.1: The top-level bid request object.
type BidRequest struct {
	//
	// Unique ID of the bid request, provided by the exchange.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// Multiple impression auctions may be specified in a single bid request.
	// At least one impression is required for a valid bid request.
	Imp []*BidRequest_Impression `protobuf:"bytes,2,rep,name=imp" json:"imp,omitempty"`
	//
	// Information pertaining to a website.
	Site *BidRequest_Site `protobuf:"bytes,3,opt,name=site" json:"site,omitempty"`
	//
	// Information pertaining to a mobile application.
	App *BidRequest_App `protobuf:"bytes,4,opt,name=app" json:"app,omitempty"`
	//
	// Information pertaining to the device.
	Device *BidRequest_Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	//
	// Information known or derived about the human user of the device.
	User *BidRequest_User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// *
	// Indicator of test mode in which auctions are not billable,
	// where 0 = live mode, 1 = test mode.
	Test *bool `protobuf:"varint,15,opt,name=test,def=0" json:"test,omitempty"`
	//
	// Auction Type. If “1”, then first price auction. If “2”, then second price
	// auction.
	// Additional auction types can be defined as per the exchange’s business
	// rules.
	// Exchange specific rules should be numbered over 500.
	At *int32 `protobuf:"varint,7,opt,name=at,def=2" json:"at,omitempty"`
	//
	// Maximum amount of time in milliseconds to submit a bid (e.g., 120 means the
	// bidder has 120ms to submit a bid before the auction is complete). If this
	// value never changes across an exchange, then the exchange can supply this
	// information offline.
	Tmax *int32 `protobuf:"varint,8,opt,name=tmax" json:"tmax,omitempty"`
	//
	// Array of buyer seats allowed to bid on this auction. Seats are an optional
	// feature of exchange. For example, [“4”,”34”,”82”,”A45”] indicates that only
	// advertisers using these exchange seats are allowed to bid on the
	// impressions in this auction.
	Wseat []string `protobuf:"bytes,9,rep,name=wseat" json:"wseat,omitempty"`
	//
	// Flag to indicate whether Exchange can verify that all impressions offered
	// represent all of the impressions available in context (e.g., all
	// impressions available on the web page; all impressions available for a
	// video [pre, mid and postroll spots], etc.) to support road-blocking. A true
	// value should only be passed if the exchange is aware of all impressions in
	// context for the publisher. NO means the exchange cannot verify, and YES
	// means that all impressions represent all impressions available.
	Allimps *Flag `protobuf:"varint,10,opt,name=allimps,enum=openrtb.Flag,def=0" json:"allimps,omitempty"`
	//
	// Array of allowed currencies for bids on this bid request using ISO-4217 alphabetic codes.
	// If only one currency is used by the exchange, this parameter is not required.
	Cur []string `protobuf:"bytes,11,rep,name=cur" json:"cur,omitempty"`
	//
	// Blocked Advertiser Categories. Note that there is no existing categorization / taxonomy of
	// advertiser industries. However, as a substitute exchanges may decide to use IAB categories
	// as an approximation.
	Bcat []string `protobuf:"bytes,12,rep,name=bcat" json:"bcat,omitempty"`
	//
	// Array of strings of blocked top-level domains of advertisers.
	// For example, {“company1.com”, “company2.com”}.
	Badv []string `protobuf:"bytes,13,rep,name=badv" json:"badv,omitempty"`
	//
	// Container for any legal, governmental or industry regulations in force for the request.
	Regs *BidRequest_Regulations `protobuf:"bytes,14,opt,name=regs" json:"regs,omitempty"`
	//
	// A Source object (Section 3.2.2) that provides data about the
	// inventory source and which entity makes the final decision.
	Source           *BidRequest_Source    `protobuf:"bytes,19,opt,name=source" json:"source,omitempty"`
	Ext              *BidRequestExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *BidRequest) Reset()                    { *m = BidRequest{} }
func (m *BidRequest) String() string            { return proto.CompactTextString(m) }
func (*BidRequest) ProtoMessage()               {}
func (*BidRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_BidRequest_Test bool = false
const Default_BidRequest_At int32 = 2
const Default_BidRequest_Allimps Flag = Flag_NO

func (m *BidRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest) GetImp() []*BidRequest_Impression {
	if m != nil {
		return m.Imp
	}
	return nil
}

func (m *BidRequest) GetSite() *BidRequest_Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *BidRequest) GetApp() *BidRequest_App {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *BidRequest) GetDevice() *BidRequest_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *BidRequest) GetUser() *BidRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *BidRequest) GetTest() bool {
	if m != nil && m.Test != nil {
		return *m.Test
	}
	return Default_BidRequest_Test
}

func (m *BidRequest) GetAt() int32 {
	if m != nil && m.At != nil {
		return *m.At
	}
	return Default_BidRequest_At
}

func (m *BidRequest) GetTmax() int32 {
	if m != nil && m.Tmax != nil {
		return *m.Tmax
	}
	return 0
}

func (m *BidRequest) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *BidRequest) GetAllimps() Flag {
	if m != nil && m.Allimps != nil {
		return *m.Allimps
	}
	return Default_BidRequest_Allimps
}

func (m *BidRequest) GetCur() []string {
	if m != nil {
		return m.Cur
	}
	return nil
}

func (m *BidRequest) GetBcat() []string {
	if m != nil {
		return m.Bcat
	}
	return nil
}

func (m *BidRequest) GetBadv() []string {
	if m != nil {
		return m.Badv
	}
	return nil
}

func (m *BidRequest) GetRegs() *BidRequest_Regulations {
	if m != nil {
		return m.Regs
	}
	return nil
}

func (m *BidRequest) GetSource() *BidRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *BidRequest) GetExt() *BidRequestExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 2.5: This object describes the nature and behavior of the entity
// that is the source of the bid request upstream from the exchange.
// The primary purpose of this object is to define post-auction or upstream
// decisioning when the exchange itself does not control the final decision.
// A common example of this is header bidding, but it can also apply to
// upstream server entities such as another RTB exchange, a mediation
// platform, or an ad server combines direct campaigns with 3rd party
// demand in decisioning.
type BidRequest_Source struct {
	//
	// Entity responsible for the final impression sale decision,
	// where 0 = exchange, 1 = upstream source
	// RECOMMENDED by the OpenRTB specification.
	Fd *bool `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	//
	// Transaction ID that must be common across all participants in
	// this bid request (e.g., potentially multiple exchanges).
	// RECOMMENDED by the OpenRTB specification.
	Tid *string `protobuf:"bytes,2,opt,name=tid" json:"tid,omitempty"`
	//
	// Payment ID chain string containing embedded syntax
	// described in the TAG Payment ID Protocol v1.0.
	// RECOMMENDED by the OpenRTB specification.
	Pchain                       *string `protobuf:"bytes,3,opt,name=pchain" json:"pchain,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Source) Reset()                    { *m = BidRequest_Source{} }
func (m *BidRequest_Source) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Source) ProtoMessage()               {}
func (*BidRequest_Source) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

var extRange_BidRequest_Source = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Source) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Source
}

func (m *BidRequest_Source) GetFd() bool {
	if m != nil && m.Fd != nil {
		return *m.Fd
	}
	return false
}

func (m *BidRequest_Source) GetTid() string {
	if m != nil && m.Tid != nil {
		return *m.Tid
	}
	return ""
}

func (m *BidRequest_Source) GetPchain() string {
	if m != nil && m.Pchain != nil {
		return *m.Pchain
	}
	return ""
}

//
// OpenRTB 3.3.2: describes the ad position or impression being auctioned.
// A single bid request can include multiple “imp” objects, a use case for which might be an
// exchange that supports selling all ad positions on a given page as a bundle.
// Each “imp” object has a required ID so that bids can reference them individually.
// An exchange can also conduct private auctions by restricting involvement to specific
// subsets of seats within bidders.
type BidRequest_Impression struct {
	//
	// A unique identifier for this impression within the context of the bid request
	// (typically, value starts with 1, and increments up to n for n impressions).
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// Banner object. Either a banner or video object (or both if the impression could be either)
	// must be included in an impression object.
	Banner *BidRequest_Impression_Banner `protobuf:"bytes,2,opt,name=banner" json:"banner,omitempty"`
	//
	// Video object. Either a banner or video object (or both if the impression could be either)
	// must be included in an impression object.
	Video *BidRequest_Impression_Video `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	// *
	// A Native object (Section 3.2.5); required if this impression is
	// offered as a native ad opportunity.
	Native *BidRequest_Impression_Native `protobuf:"bytes,13,opt,name=native" json:"native,omitempty"`
	//
	// Name of ad mediation partner, SDK technology, or native player responsible for rendering
	// ad (typically video or mobile). Used by some ad servers to customize ad code by partner.
	Displaymanager *string `protobuf:"bytes,4,opt,name=displaymanager" json:"displaymanager,omitempty"`
	//
	// Version of ad mediation partner, SDK technology, or native player responsible for rendering
	// ad (typically video or mobile). Used by some ad servers to customize ad code by partner.
	Displaymanagerver *string `protobuf:"bytes,5,opt,name=displaymanagerver" json:"displaymanagerver,omitempty"`
	//
	// YES if the ad is interstitial or full screen; else NO.
	Instl *Flag `protobuf:"varint,6,opt,name=instl,enum=openrtb.Flag,def=0" json:"instl,omitempty"`
	//
	// Identifier for specific ad placement or ad tag that was used to initiate the auction.
	// This can be useful for debugging of any issues, or for optimization by the buyer.
	Tagid *string `protobuf:"bytes,7,opt,name=tagid" json:"tagid,omitempty"`
	//
	// Bid floor for this impression (in CPM of bidfloorcur).
	Bidfloor *float64 `protobuf:"fixed64,8,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	//
	// If bid floor is specified and multiple currencies supported per bid request,
	// then currency should be specified here using ISO-4217 alphabetic codes.
	// Note, this may be different from bid currency returned by bidder,
	// if this is allowed on an exchange.
	Bidfloorcur *string `protobuf:"bytes,9,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	//
	// Array of names for supported iframe busters. Exchange specific.
	Iframebuster []string `protobuf:"bytes,10,rep,name=iframebuster" json:"iframebuster,omitempty"`
	//
	// Contains any Deals eligible for this Impression.
	Pmp *BidRequest_Impression_PMP `protobuf:"bytes,11,opt,name=pmp" json:"pmp,omitempty"`
	//
	// A flag to indicate if the impression requires secure HTTPS creative
	// assets and markup.
	// Value of 1 indicates that the impression requires secure creatives.
	// If the value is 0 or not set, then the impression allows non-secure
	// HTTP creatives.
	Secure *int32 `protobuf:"varint,12,opt,name=secure" json:"secure,omitempty"`
	//
	// Advisory as to the number of seconds that may elapse
	// between the auction and the actual impression.
	Exp              *int32                `protobuf:"varint,14,opt,name=exp" json:"exp,omitempty"`
	Ext              *ImpressionExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *BidRequest_Impression) Reset()                    { *m = BidRequest_Impression{} }
func (m *BidRequest_Impression) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Impression) ProtoMessage()               {}
func (*BidRequest_Impression) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

const Default_BidRequest_Impression_Instl Flag = Flag_NO
const Default_BidRequest_Impression_Bidfloor float64 = 0
const Default_BidRequest_Impression_Bidfloorcur string = "USD"

func (m *BidRequest_Impression) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Impression) GetBanner() *BidRequest_Impression_Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *BidRequest_Impression) GetVideo() *BidRequest_Impression_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *BidRequest_Impression) GetNative() *BidRequest_Impression_Native {
	if m != nil {
		return m.Native
	}
	return nil
}

func (m *BidRequest_Impression) GetDisplaymanager() string {
	if m != nil && m.Displaymanager != nil {
		return *m.Displaymanager
	}
	return ""
}

func (m *BidRequest_Impression) GetDisplaymanagerver() string {
	if m != nil && m.Displaymanagerver != nil {
		return *m.Displaymanagerver
	}
	return ""
}

func (m *BidRequest_Impression) GetInstl() Flag {
	if m != nil && m.Instl != nil {
		return *m.Instl
	}
	return Default_BidRequest_Impression_Instl
}

func (m *BidRequest_Impression) GetTagid() string {
	if m != nil && m.Tagid != nil {
		return *m.Tagid
	}
	return ""
}

func (m *BidRequest_Impression) GetBidfloor() float64 {
	if m != nil && m.Bidfloor != nil {
		return *m.Bidfloor
	}
	return Default_BidRequest_Impression_Bidfloor
}

func (m *BidRequest_Impression) GetBidfloorcur() string {
	if m != nil && m.Bidfloorcur != nil {
		return *m.Bidfloorcur
	}
	return Default_BidRequest_Impression_Bidfloorcur
}

func (m *BidRequest_Impression) GetIframebuster() []string {
	if m != nil {
		return m.Iframebuster
	}
	return nil
}

func (m *BidRequest_Impression) GetPmp() *BidRequest_Impression_PMP {
	if m != nil {
		return m.Pmp
	}
	return nil
}

func (m *BidRequest_Impression) GetSecure() int32 {
	if m != nil && m.Secure != nil {
		return *m.Secure
	}
	return 0
}

func (m *BidRequest_Impression) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *BidRequest_Impression) GetExt() *ImpressionExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.3: A banner object typically describes an ad impressions opportunity for banner,
// rich media or in-banner video inventory.
type BidRequest_Impression_Banner struct {
	//
	// Width of the impression in pixels. Since some ad types are not restricted by size
	// this field is not required, but it’s highly recommended.
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	//
	// Height of the impression in pixels. Since some ad types are not restricted by size
	// this field is not required, but it’s highly recommended.
	H *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// *
	// Maximum width of the impression in pixels. If included, it indicates that a range
	// of sizes is allowed with this maximum width and "w" is taken as recommended.
	// If not included, then "w" should be considered an exact requirement.
	Wmax *int32 `protobuf:"varint,11,opt,name=wmax" json:"wmax,omitempty"`
	// *
	// Maximum height of the impression in pixels. If included, it indicates that a range
	// of sizes is allowed with this maximum height and "h" is taken as recommended.
	// If not included, then "h" should be considered an exact requirement.
	Hmax *int32 `protobuf:"varint,12,opt,name=hmax" json:"hmax,omitempty"`
	// *
	// Minimum width of the impression in pixels. If included, it indicates that a range
	// of sizes is allowed with this minimum width and "w" is taken as recommended.
	// If not included, then "w" should be considered an exact requirement.
	Wmin *int32 `protobuf:"varint,13,opt,name=wmin" json:"wmin,omitempty"`
	// *
	// Minumum height of the impression in pixels. If included, it indicates
	// that a range of sizes is allowed with this minimum height and "h" is
	// taken as recommended.
	// If not included, then "h" should be considered an exact requirement.
	Hmin *int32 `protobuf:"varint,14,opt,name=hmin" json:"hmin,omitempty"`
	//
	// Unique identifier for this banner object. Useful for tracking multiple banner objects
	// (e.g., in companion banner array). Usually starts with 1, increasing with each object.
	// Combination of impression id X banner id should be unique.
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	//
	// The position of the ad as a relative measure of visibility or
	// prominence.
	Pos *Enums_BidRequest_Impression_AdPosition `protobuf:"varint,4,opt,name=pos,enum=openrtb.Enums_BidRequest_Impression_AdPosition,def=0" json:"pos,omitempty"`
	//
	// Blocked creative types. If blank, assume all types are allowed.
	Btype []Enums_BidRequest_Impression_Banner_AdType `protobuf:"varint,5,rep,name=btype,enum=openrtb.Enums_BidRequest_Impression_Banner_AdType" json:"btype,omitempty"`
	//
	// Blocked creative attributes. If blank assume all types are allowed.
	Battr []CreativeAttribute `protobuf:"varint,6,rep,name=battr,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	//
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to “image/jpg”, “image/gif” and “application/x-shockwave-flash”.
	Mimes []string `protobuf:"bytes,7,rep,name=mimes" json:"mimes,omitempty"`
	//
	// Specify if the banner is delivered in the top frame (YES) or in an iframe (NO).
	Topframe *Flag `protobuf:"varint,8,opt,name=topframe,enum=openrtb.Flag,def=0" json:"topframe,omitempty"`
	//
	// Specify properties for an expandable ad.
	Expdir []Enums_BidRequest_Impression_Banner_ExpandableDirection `protobuf:"varint,9,rep,name=expdir,enum=openrtb.Enums_BidRequest_Impression_Banner_ExpandableDirection" json:"expdir,omitempty"`
	//
	// List of supported API frameworks for this banner. If an API is not explicitly listed
	// it is assumed not to be supported.
	Api              []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,10,rep,name=api,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"api,omitempty"`
	Ext              *BannerExtensions                          `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *BidRequest_Impression_Banner) Reset()         { *m = BidRequest_Impression_Banner{} }
func (m *BidRequest_Impression_Banner) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Banner) ProtoMessage()    {}
func (*BidRequest_Impression_Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 1, 0}
}

const Default_BidRequest_Impression_Banner_Pos Enums_BidRequest_Impression_AdPosition = Enums_BidRequest_Impression_POSITION_UNKNOWN
const Default_BidRequest_Impression_Banner_Topframe Flag = Flag_NO

func (m *BidRequest_Impression_Banner) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetWmax() int32 {
	if m != nil && m.Wmax != nil {
		return *m.Wmax
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetHmax() int32 {
	if m != nil && m.Hmax != nil {
		return *m.Hmax
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetWmin() int32 {
	if m != nil && m.Wmin != nil {
		return *m.Wmin
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetHmin() int32 {
	if m != nil && m.Hmin != nil {
		return *m.Hmin
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Impression_Banner) GetPos() Enums_BidRequest_Impression_AdPosition {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return Default_BidRequest_Impression_Banner_Pos
}

func (m *BidRequest_Impression_Banner) GetBtype() []Enums_BidRequest_Impression_Banner_AdType {
	if m != nil {
		return m.Btype
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetTopframe() Flag {
	if m != nil && m.Topframe != nil {
		return *m.Topframe
	}
	return Default_BidRequest_Impression_Banner_Topframe
}

func (m *BidRequest_Impression_Banner) GetExpdir() []Enums_BidRequest_Impression_Banner_ExpandableDirection {
	if m != nil {
		return m.Expdir
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetApi() []Enums_BidRequest_Impression_ApiFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetExt() *BannerExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.4: A video object typically describes an ad opportunity for in-stream video
// inventory (including linear pre-roll, mid-roll and post-roll, and non-linear overlays).
// Please note, in-banner video is typically represented by the banner object.
type BidRequest_Impression_Video struct {
	//
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to “image/jpg”, “image/gif” and “application/x-shockwave-flash”.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	//
	// Indicates whether the ad impression is linear or non-linear.
	Linearity *Enums_BidRequest_Impression_Video_Linearity `protobuf:"varint,2,opt,name=linearity,enum=openrtb.Enums_BidRequest_Impression_Video_Linearity,def=1" json:"linearity,omitempty"`
	//
	// Minimum video ad duration in seconds.
	Minduration *int32 `protobuf:"varint,3,opt,name=minduration" json:"minduration,omitempty"`
	//
	// Maximum video ad duration in seconds.
	Maxduration *int32 `protobuf:"varint,4,opt,name=maxduration" json:"maxduration,omitempty"`
	//
	// Video bid response protocols.
	Protocols []Enums_BidRequest_Impression_Video_Protocol `protobuf:"varint,5,rep,name=protocols,enum=openrtb.Enums_BidRequest_Impression_Video_Protocol" json:"protocols,omitempty"`
	//
	// Width of the player in pixels. This field is not required, but it’s highly recommended.
	W *int32 `protobuf:"varint,6,opt,name=w" json:"w,omitempty"`
	//
	// Height of the player in pixels. This field is not required, but it’s highly recommended.
	H *int32 `protobuf:"varint,7,opt,name=h" json:"h,omitempty"`
	//
	// Indicates the start delay in seconds for preroll, midroll, or postroll ad placement.
	// Check the enum VideoStartDelay for special values.
	Startdelay *int32 `protobuf:"varint,8,opt,name=startdelay,def=-3" json:"startdelay,omitempty"`
	//
	// If multiple ad impressions are offered in the same bid request, the sequence number
	// will allow for the coordinated delivery of multiple creatives.
	Sequence *int32 `protobuf:"varint,9,opt,name=sequence,def=1" json:"sequence,omitempty"`
	//
	// Blocked creative attributes. If blank assume all types are allowed.
	Battr []CreativeAttribute `protobuf:"varint,10,rep,name=battr,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	//
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed, and there is
	// no time limit imposed. If greater than 0, then the value represents the number of
	// seconds of extended play supported beyond the maxduration value.
	Maxextended *int32 `protobuf:"varint,11,opt,name=maxextended,def=0" json:"maxextended,omitempty"`
	//
	// Minimum bit rate in Kbps. Exchange may set this dynamically,
	// or universally across their set of publishers.
	Minbitrate *int32 `protobuf:"varint,12,opt,name=minbitrate" json:"minbitrate,omitempty"`
	//
	// Maximum bit rate in Kbps. Exchange may set this dynamically,
	// or universally across their set of publishers.
	Maxbitrate *int32 `protobuf:"varint,13,opt,name=maxbitrate" json:"maxbitrate,omitempty"`
	//
	// If exchange publisher has rules preventing letter boxing of 4x3 content to play in a
	// 16x9 window, then this should be set to false. Default setting is true, which assumes
	// that boxing of content to fit into a window is allowed.
	Boxingallowed *Flag `protobuf:"varint,14,opt,name=boxingallowed,enum=openrtb.Flag,def=1" json:"boxingallowed,omitempty"`
	//
	// List of allowed playback methods. If blank, assume that all are allowed.
	Playbackmethod []Enums_BidRequest_Impression_Video_PlaybackMethod `protobuf:"varint,15,rep,name=playbackmethod,enum=openrtb.Enums_BidRequest_Impression_Video_PlaybackMethod" json:"playbackmethod,omitempty"`
	//
	// List of supported delivery methods. If blank, assume all are supported.
	Delivery []Enums_BidRequest_Impression_Video_ContentDelivery `protobuf:"varint,16,rep,name=delivery,enum=openrtb.Enums_BidRequest_Impression_Video_ContentDelivery" json:"delivery,omitempty"`
	//
	// The position of the ad as a relative measure of visibility or prominence.
	Pos *Enums_BidRequest_Impression_AdPosition `protobuf:"varint,17,opt,name=pos,enum=openrtb.Enums_BidRequest_Impression_AdPosition,def=0" json:"pos,omitempty"`
	//
	// If companion ads are available, they can be listed as an array of banner objects.
	Companionad []*BidRequest_Impression_Banner `protobuf:"bytes,18,rep,name=companionad" json:"companionad,omitempty"`
	//
	// List of supported API frameworks for this banner. If an API is not explicitly listed
	// it is assumed not to be supported.
	Api []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,19,rep,name=api,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"api,omitempty"`
	//
	// Recommended if companion objects are included.
	Companiontype []Enums_BidRequest_Impression_Video_CompanionType `protobuf:"varint,20,rep,name=companiontype,enum=openrtb.Enums_BidRequest_Impression_Video_CompanionType" json:"companiontype,omitempty"`
	//
	// Placement type for the impression.
	Placement *Enums_BidRequest_Impression_Video_VideoPlacementType `protobuf:"varint,26,opt,name=placement,enum=openrtb.Enums_BidRequest_Impression_Video_VideoPlacementType" json:"placement,omitempty"`
	//
	// The event that causes playback to end.
	Playbackend      *Enums_BidRequest_Impression_Video_PlaybackCessationMode `protobuf:"varint,27,opt,name=playbackend,enum=openrtb.Enums_BidRequest_Impression_Video_PlaybackCessationMode" json:"playbackend,omitempty"`
	Ext              *VideoExtensions                                         `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                                                   `json:"-"`
}

func (m *BidRequest_Impression_Video) Reset()         { *m = BidRequest_Impression_Video{} }
func (m *BidRequest_Impression_Video) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Video) ProtoMessage()    {}
func (*BidRequest_Impression_Video) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 1, 1}
}

const Default_BidRequest_Impression_Video_Linearity Enums_BidRequest_Impression_Video_Linearity = Enums_BidRequest_Impression_Video_LINEAR
const Default_BidRequest_Impression_Video_Startdelay int32 = -3
const Default_BidRequest_Impression_Video_Sequence int32 = 1
const Default_BidRequest_Impression_Video_Maxextended int32 = 0
const Default_BidRequest_Impression_Video_Boxingallowed Flag = Flag_YES
const Default_BidRequest_Impression_Video_Pos Enums_BidRequest_Impression_AdPosition = Enums_BidRequest_Impression_POSITION_UNKNOWN

func (m *BidRequest_Impression_Video) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetLinearity() Enums_BidRequest_Impression_Video_Linearity {
	if m != nil && m.Linearity != nil {
		return *m.Linearity
	}
	return Default_BidRequest_Impression_Video_Linearity
}

func (m *BidRequest_Impression_Video) GetMinduration() int32 {
	if m != nil && m.Minduration != nil {
		return *m.Minduration
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetMaxduration() int32 {
	if m != nil && m.Maxduration != nil {
		return *m.Maxduration
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetProtocols() []Enums_BidRequest_Impression_Video_Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetStartdelay() int32 {
	if m != nil && m.Startdelay != nil {
		return *m.Startdelay
	}
	return Default_BidRequest_Impression_Video_Startdelay
}

func (m *BidRequest_Impression_Video) GetSequence() int32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return Default_BidRequest_Impression_Video_Sequence
}

func (m *BidRequest_Impression_Video) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetMaxextended() int32 {
	if m != nil && m.Maxextended != nil {
		return *m.Maxextended
	}
	return Default_BidRequest_Impression_Video_Maxextended
}

func (m *BidRequest_Impression_Video) GetMinbitrate() int32 {
	if m != nil && m.Minbitrate != nil {
		return *m.Minbitrate
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetMaxbitrate() int32 {
	if m != nil && m.Maxbitrate != nil {
		return *m.Maxbitrate
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetBoxingallowed() Flag {
	if m != nil && m.Boxingallowed != nil {
		return *m.Boxingallowed
	}
	return Default_BidRequest_Impression_Video_Boxingallowed
}

func (m *BidRequest_Impression_Video) GetPlaybackmethod() []Enums_BidRequest_Impression_Video_PlaybackMethod {
	if m != nil {
		return m.Playbackmethod
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetDelivery() []Enums_BidRequest_Impression_Video_ContentDelivery {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetPos() Enums_BidRequest_Impression_AdPosition {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return Default_BidRequest_Impression_Video_Pos
}

func (m *BidRequest_Impression_Video) GetCompanionad() []*BidRequest_Impression_Banner {
	if m != nil {
		return m.Companionad
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetApi() []Enums_BidRequest_Impression_ApiFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetCompaniontype() []Enums_BidRequest_Impression_Video_CompanionType {
	if m != nil {
		return m.Companiontype
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetPlacement() Enums_BidRequest_Impression_Video_VideoPlacementType {
	if m != nil && m.Placement != nil {
		return *m.Placement
	}
	return Enums_BidRequest_Impression_Video_UNDEFINED_VIDEO_PLACEMENT
}

func (m *BidRequest_Impression_Video) GetPlaybackend() Enums_BidRequest_Impression_Video_PlaybackCessationMode {
	if m != nil && m.Playbackend != nil {
		return *m.Playbackend
	}
	return Enums_BidRequest_Impression_Video_COMPLETION_OR_USER
}

func (m *BidRequest_Impression_Video) GetExt() *VideoExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

// *
// OpenRTB 3.2.5: This object represents a native type impression.
// Native ad units are intended to blend seamlessly into the surrounding content
// (e.g., a sponsored Twitter or Facebook post). As such, the response must be
// well-structured to afford the publisher fine-grained control over rendering.
//
// The Native Subcommittee has developed a companion specification to OpenRTB
// called the Native Ad Specification. It defines the request parameters and response markup
// structure of native ad units. This object provides the means of transporting request
// parameters as an opaque string so that the specific parameters can evolve separately
// under the auspices of the Native Ad Specification. Similarly, the ad markup served
// will be structured according to that specification.
//
// The presence of a Native as a subordinate of the Imp object indicates that this
// impression is offered as a native type impression. At the publisher's discretion,
// that same impression may also be offered as banner and/or video by also including as
// Imp subordinates the Banner and/or Video objects, respectively.
// However, any given bid for the impression must conform to one of the offered types.
type BidRequest_Impression_Native struct {
	// *
	// Request payload complying with the Native Ad Specification.
	Request *NativeRequest `protobuf:"bytes,1,req,name=request" json:"request,omitempty"`
	// *
	// Version of the Native Ad Specification to which request complies;
	// highly recommended for efficient parsing.
	Ver *string `protobuf:"bytes,2,opt,name=ver" json:"ver,omitempty"`
	// *
	// List of supported API frameworks for this impression.  Refer to List 5.6.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,3,rep,packed,name=api,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"api,omitempty"`
	// *
	// Blocked creative attributes. Refer to List 5.3.
	Battr            []CreativeAttribute `protobuf:"varint,4,rep,packed,name=battr,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	Ext              *NativeExtensions   `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *BidRequest_Impression_Native) Reset()         { *m = BidRequest_Impression_Native{} }
func (m *BidRequest_Impression_Native) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Native) ProtoMessage()    {}
func (*BidRequest_Impression_Native) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 1, 2}
}

func (m *BidRequest_Impression_Native) GetRequest() *NativeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BidRequest_Impression_Native) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *BidRequest_Impression_Native) GetApi() []Enums_BidRequest_Impression_ApiFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Impression_Native) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Impression_Native) GetExt() *NativeExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.16: contains a parent object for usage within the context of private
// marketplaces and the use of the RTB protocol to execute Direct Deals.
type BidRequest_Impression_PMP struct {
	//
	// Flag indicating that this impression is a private auction eligible only to seats named
	// in the DirectDeals object.
	PrivateAuction *Flag `protobuf:"varint,1,opt,name=private_auction,json=privateAuction,enum=openrtb.Flag" json:"private_auction,omitempty"`
	//
	// A collection of deal objects encapsulating a list of direct deals eligible for
	// this impression.
	Deals            []*BidRequest_Impression_PMP_DirectDeal `protobuf:"bytes,2,rep,name=deals" json:"deals,omitempty"`
	Ext              *PMPExtensions                          `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *BidRequest_Impression_PMP) Reset()                    { *m = BidRequest_Impression_PMP{} }
func (m *BidRequest_Impression_PMP) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Impression_PMP) ProtoMessage()               {}
func (*BidRequest_Impression_PMP) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1, 3} }

func (m *BidRequest_Impression_PMP) GetPrivateAuction() Flag {
	if m != nil && m.PrivateAuction != nil {
		return *m.PrivateAuction
	}
	return Flag_NO
}

func (m *BidRequest_Impression_PMP) GetDeals() []*BidRequest_Impression_PMP_DirectDeal {
	if m != nil {
		return m.Deals
	}
	return nil
}

func (m *BidRequest_Impression_PMP) GetExt() *PMPExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.17: constitutes a deal struck a priori between a buyer and a seller and
// indicates that this impression is available under the terms of that deal.
type BidRequest_Impression_PMP_DirectDeal struct {
	//
	// A unique identifier for the direct deal.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// Bid floor for this impression (in CPM of bidfloorcur).
	Bidfloor *float64 `protobuf:"fixed64,2,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	//
	// If bid floor is specified and multiple currencies supported per bid request,
	// then currency should be specified here using ISO-4217 alphabetic codes. Notes.
	// this may be different from bid currency returned by bidder, if this is allowed
	// on an exchange.
	Bidfloorcur *string `protobuf:"bytes,3,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	//
	// Array of buyer seats allowed to bid on this auction. Seats are an optional feature
	// of exchange. For example, [“4”,”34”,”82”,”A45”] indicates that only advertisers
	// using these exchange seats are allowed to bid on the impressions in this auction.
	Wseat []string `protobuf:"bytes,4,rep,name=wseat" json:"wseat,omitempty"`
	//
	// Array of advertiser domains allowed to bid on this Direct Deal. For example,
	// [ "advertiser1.com", "advertiser2.com" ] indicates that only the listed
	// advertisers are allowed to bid on this direct deal.
	Wadomain []string `protobuf:"bytes,5,rep,name=wadomain" json:"wadomain,omitempty"`
	//
	// Auction Type. If “1”, then first price auction. If “2”, then second price auction.
	// Additional auction types can be defined as per the exchange’s business rules.
	At               *int32                `protobuf:"varint,6,opt,name=at" json:"at,omitempty"`
	Ext              *DirectDealExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *BidRequest_Impression_PMP_DirectDeal) Reset()         { *m = BidRequest_Impression_PMP_DirectDeal{} }
func (m *BidRequest_Impression_PMP_DirectDeal) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_PMP_DirectDeal) ProtoMessage()    {}
func (*BidRequest_Impression_PMP_DirectDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 1, 3, 0}
}

const Default_BidRequest_Impression_PMP_DirectDeal_Bidfloor float64 = 0
const Default_BidRequest_Impression_PMP_DirectDeal_Bidfloorcur string = "USD"

func (m *BidRequest_Impression_PMP_DirectDeal) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Impression_PMP_DirectDeal) GetBidfloor() float64 {
	if m != nil && m.Bidfloor != nil {
		return *m.Bidfloor
	}
	return Default_BidRequest_Impression_PMP_DirectDeal_Bidfloor
}

func (m *BidRequest_Impression_PMP_DirectDeal) GetBidfloorcur() string {
	if m != nil && m.Bidfloorcur != nil {
		return *m.Bidfloorcur
	}
	return Default_BidRequest_Impression_PMP_DirectDeal_Bidfloorcur
}

func (m *BidRequest_Impression_PMP_DirectDeal) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *BidRequest_Impression_PMP_DirectDeal) GetWadomain() []string {
	if m != nil {
		return m.Wadomain
	}
	return nil
}

func (m *BidRequest_Impression_PMP_DirectDeal) GetAt() int32 {
	if m != nil && m.At != nil {
		return *m.At
	}
	return 0
}

func (m *BidRequest_Impression_PMP_DirectDeal) GetExt() *DirectDealExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.5: should be included if the ad supported content is part of a website
// (as opposed to an application).
type BidRequest_Site struct {
	//
	// Site ID on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Site name (may be masked at publisher’s request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Domain of the site, used for advertiser side blocking. For example, “foo.com”.
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	//
	// Array of IAB content categories for the overall site.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	//
	// Array of IAB content categories for the current subsection of the site.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	//
	// Array of IAB content categories for the current page.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	//
	// URL of the page where the impression will be shown.
	Page *string `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
	//
	// Specifies whether the site has a privacy policy.
	Privacypolicy *Flag `protobuf:"varint,8,opt,name=privacypolicy,enum=openrtb.Flag" json:"privacypolicy,omitempty"`
	//
	// Referrer URL that caused navigation to the current page.
	Ref *string `protobuf:"bytes,10,opt,name=ref" json:"ref,omitempty"`
	//
	// Search string that caused navigation to the current page.
	Search *string `protobuf:"bytes,11,opt,name=search" json:"search,omitempty"`
	//
	// Mobile-optimized signal, where 0 = no, 1 = yes.
	Mobile *bool `protobuf:"varint,15,opt,name=mobile" json:"mobile,omitempty"`
	//
	// Site's Publisher.
	Publisher *BidRequest_Publisher `protobuf:"bytes,12,opt,name=publisher" json:"publisher,omitempty"`
	//
	// Site's Content.
	Content *BidRequest_Content `protobuf:"bytes,13,opt,name=content" json:"content,omitempty"`
	//
	// List of keywords describing this site in a comma separated string.
	Keywords         *string         `protobuf:"bytes,14,opt,name=keywords" json:"keywords,omitempty"`
	Ext              *SiteExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *BidRequest_Site) Reset()                    { *m = BidRequest_Site{} }
func (m *BidRequest_Site) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Site) ProtoMessage()               {}
func (*BidRequest_Site) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

func (m *BidRequest_Site) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Site) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Site) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_Site) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Site) GetSectioncat() []string {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *BidRequest_Site) GetPagecat() []string {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *BidRequest_Site) GetPage() string {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return ""
}

func (m *BidRequest_Site) GetPrivacypolicy() Flag {
	if m != nil && m.Privacypolicy != nil {
		return *m.Privacypolicy
	}
	return Flag_NO
}

func (m *BidRequest_Site) GetRef() string {
	if m != nil && m.Ref != nil {
		return *m.Ref
	}
	return ""
}

func (m *BidRequest_Site) GetSearch() string {
	if m != nil && m.Search != nil {
		return *m.Search
	}
	return ""
}

func (m *BidRequest_Site) GetMobile() bool {
	if m != nil && m.Mobile != nil {
		return *m.Mobile
	}
	return false
}

func (m *BidRequest_Site) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *BidRequest_Site) GetContent() *BidRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BidRequest_Site) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_Site) GetExt() *SiteExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.6: should be included if the ad supported content is part of a mobile application
// (as opposed to a mobile website).
type BidRequest_App struct {
	//
	// Application ID on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id,def=-1" json:"id,omitempty"`
	//
	// Application name (may be masked at publisher’s request).
	Name *string `protobuf:"bytes,2,opt,name=name,def=-1" json:"name,omitempty"`
	//
	// Domain of the application. For example, “mygame.foo.com”.
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	//
	// Array of IAB content categories for the overall application.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	//
	// Array of IAB content categories for the current subsection of the application.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	//
	// Array of IAB content categories for the current page/view of the app.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	//
	// Application version.
	Ver *string `protobuf:"bytes,7,opt,name=ver" json:"ver,omitempty"`
	//
	// Application bundle or package name (e.g., com.foo.mygame). This is intended to be a
	// unique ID across multiple exchanges.
	Bundle *string `protobuf:"bytes,8,opt,name=bundle,def=-1" json:"bundle,omitempty"`
	//
	// Specifies whether the application has a privacy policy.
	Privacypolicy *Flag `protobuf:"varint,9,opt,name=privacypolicy,enum=openrtb.Flag" json:"privacypolicy,omitempty"`
	//
	// Application is a paid version or free.
	Paid *Flag `protobuf:"varint,10,opt,name=paid,enum=openrtb.Flag" json:"paid,omitempty"`
	//
	// Application's Publisher.
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	//
	// Application's Content.
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	//
	// List of keywords describing this site in a comma separated string.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	//
	// For QAG 1.5 compliance, an app store URL for an installed app
	// should be passed in the bid request.
	Storeurl         *string        `protobuf:"bytes,14,opt,name=storeurl" json:"storeurl,omitempty"`
	Ext              *AppExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *BidRequest_App) Reset()                    { *m = BidRequest_App{} }
func (m *BidRequest_App) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_App) ProtoMessage()               {}
func (*BidRequest_App) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 3} }

const Default_BidRequest_App_Id string = "-1"
const Default_BidRequest_App_Name string = "-1"
const Default_BidRequest_App_Bundle string = "-1"

func (m *BidRequest_App) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return Default_BidRequest_App_Id
}

func (m *BidRequest_App) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return Default_BidRequest_App_Name
}

func (m *BidRequest_App) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_App) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_App) GetSectioncat() []string {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *BidRequest_App) GetPagecat() []string {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *BidRequest_App) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *BidRequest_App) GetBundle() string {
	if m != nil && m.Bundle != nil {
		return *m.Bundle
	}
	return Default_BidRequest_App_Bundle
}

func (m *BidRequest_App) GetPrivacypolicy() Flag {
	if m != nil && m.Privacypolicy != nil {
		return *m.Privacypolicy
	}
	return Flag_NO
}

func (m *BidRequest_App) GetPaid() Flag {
	if m != nil && m.Paid != nil {
		return *m.Paid
	}
	return Flag_NO
}

func (m *BidRequest_App) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *BidRequest_App) GetContent() *BidRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BidRequest_App) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_App) GetStoreurl() string {
	if m != nil && m.Storeurl != nil {
		return *m.Storeurl
	}
	return ""
}

func (m *BidRequest_App) GetExt() *AppExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.7: describes the content of a site or app.
// This object may be useful in the situation where syndicated content contains impressions and
// does not necessarily match the publisher’s general content. The exchange might or might not
// have knowledge of the page where the content is running, as a result of the syndication method.
// (For example, video impressions embedded in an iframe on an unknown web property or device.)
type BidRequest_Content struct {
	//
	// ID uniquely identifying the content.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Content episode number (typically applies to video content).
	Episode *int32 `protobuf:"varint,2,opt,name=episode" json:"episode,omitempty"`
	//
	// Content title.
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	//
	// Content series.
	Series *string `protobuf:"bytes,4,opt,name=series" json:"series,omitempty"`
	//
	// Content season.
	Season *string `protobuf:"bytes,5,opt,name=season" json:"season,omitempty"`
	//
	// Original URL of the content, for buy-side contextualization or review.
	Url *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	//
	// Array of IAB content categories for the content.
	Cat []string `protobuf:"bytes,7,rep,name=cat" json:"cat,omitempty"`
	//
	// Video quality per the IAB’s classification.
	Videoquality *Enums_BidRequest_Content_VideoQuality `protobuf:"varint,8,opt,name=videoquality,enum=openrtb.Enums_BidRequest_Content_VideoQuality" json:"videoquality,omitempty"`
	//
	// Comma separated list of keywords describing the content.
	Keywords *string `protobuf:"bytes,9,opt,name=keywords" json:"keywords,omitempty"`
	//
	// Content rating (e.g., MPAA).
	Contentrating *string `protobuf:"bytes,10,opt,name=contentrating" json:"contentrating,omitempty"`
	//
	// User rating of the content (e.g., number of stars, likes, etc.).
	Userrating *string `protobuf:"bytes,11,opt,name=userrating" json:"userrating,omitempty"`
	//
	// Specifies the type of content (game, video, text, etc.).
	Context *Enums_BidRequest_Content_Context `protobuf:"varint,12,opt,name=context,enum=openrtb.Enums_BidRequest_Content_Context" json:"context,omitempty"`
	//
	// Is content live?
	Livestream *Flag `protobuf:"varint,13,opt,name=livestream,enum=openrtb.Flag" json:"livestream,omitempty"`
	//
	// Direct or indirect.
	Sourcerelationship *Enums_BidRequest_Content_SourceRelationship `protobuf:"varint,14,opt,name=sourcerelationship,enum=openrtb.Enums_BidRequest_Content_SourceRelationship" json:"sourcerelationship,omitempty"`
	//
	// Content's Producer.
	Producer *BidRequest_Producer `protobuf:"bytes,15,opt,name=producer" json:"producer,omitempty"`
	//
	// Length of content (appropriate for video or audio) in seconds.
	Len *int32 `protobuf:"varint,16,opt,name=len" json:"len,omitempty"`
	//
	// Media rating of the content, per QAG guidelines.
	Qagmediarating *Enums_BidRequest_Content_QAGMediaRating `protobuf:"varint,17,opt,name=qagmediarating,enum=openrtb.Enums_BidRequest_Content_QAGMediaRating,def=-1" json:"qagmediarating,omitempty"`
	//
	// From QAG Video Addendum. If content can be embedded (such as an embeddable video player)
	// this value should be set to YES. If content cannot be embedded, this should be set to NO.
	Embeddable *Flag `protobuf:"varint,18,opt,name=embeddable,enum=openrtb.Flag" json:"embeddable,omitempty"`
	//
	// Language of the content. Use alpha-2/ISO 639-1 codes.
	Language         *string            `protobuf:"bytes,19,opt,name=language" json:"language,omitempty"`
	Ext              *ContentExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BidRequest_Content) Reset()                    { *m = BidRequest_Content{} }
func (m *BidRequest_Content) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Content) ProtoMessage()               {}
func (*BidRequest_Content) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 4} }

const Default_BidRequest_Content_Qagmediarating Enums_BidRequest_Content_QAGMediaRating = Enums_BidRequest_Content_UNKNOWN

func (m *BidRequest_Content) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Content) GetEpisode() int32 {
	if m != nil && m.Episode != nil {
		return *m.Episode
	}
	return 0
}

func (m *BidRequest_Content) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *BidRequest_Content) GetSeries() string {
	if m != nil && m.Series != nil {
		return *m.Series
	}
	return ""
}

func (m *BidRequest_Content) GetSeason() string {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return ""
}

func (m *BidRequest_Content) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *BidRequest_Content) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Content) GetVideoquality() Enums_BidRequest_Content_VideoQuality {
	if m != nil && m.Videoquality != nil {
		return *m.Videoquality
	}
	return Enums_BidRequest_Content_QUALITY_UNKNOWN
}

func (m *BidRequest_Content) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_Content) GetContentrating() string {
	if m != nil && m.Contentrating != nil {
		return *m.Contentrating
	}
	return ""
}

func (m *BidRequest_Content) GetUserrating() string {
	if m != nil && m.Userrating != nil {
		return *m.Userrating
	}
	return ""
}

func (m *BidRequest_Content) GetContext() Enums_BidRequest_Content_Context {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return Enums_BidRequest_Content_VIDEO
}

func (m *BidRequest_Content) GetLivestream() Flag {
	if m != nil && m.Livestream != nil {
		return *m.Livestream
	}
	return Flag_NO
}

func (m *BidRequest_Content) GetSourcerelationship() Enums_BidRequest_Content_SourceRelationship {
	if m != nil && m.Sourcerelationship != nil {
		return *m.Sourcerelationship
	}
	return Enums_BidRequest_Content_INDIRECT
}

func (m *BidRequest_Content) GetProducer() *BidRequest_Producer {
	if m != nil {
		return m.Producer
	}
	return nil
}

func (m *BidRequest_Content) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

func (m *BidRequest_Content) GetQagmediarating() Enums_BidRequest_Content_QAGMediaRating {
	if m != nil && m.Qagmediarating != nil {
		return *m.Qagmediarating
	}
	return Default_BidRequest_Content_Qagmediarating
}

func (m *BidRequest_Content) GetEmbeddable() Flag {
	if m != nil && m.Embeddable != nil {
		return *m.Embeddable
	}
	return Flag_NO
}

func (m *BidRequest_Content) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *BidRequest_Content) GetExt() *ContentExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.10: Provides information pertaining to the device including its hardware,
// platform, location, and carrier. This device can refer to a mobile handset, a desktop
// computer, set top box or other digital device. In general, the most essential fields are
// either the IP address (to enable geo-lookup for the bidder), or providing geo information
// directly in the geo object.
type BidRequest_Device struct {
	//
	// Do Not Track.
	Dnt *Flag `protobuf:"varint,1,opt,name=dnt,enum=openrtb.Flag" json:"dnt,omitempty"`
	//
	// Browser user agent string.
	Ua *string `protobuf:"bytes,2,opt,name=ua" json:"ua,omitempty"`
	//
	// IPv4 address closest to device.
	Ip *string `protobuf:"bytes,3,opt,name=ip,def=0.0.0.0" json:"ip,omitempty"`
	//
	// Geography as derived from the device’s location services (e.g., cell tower triangulation,
	// GPS) or IP address.
	Geo *BidRequest_Geo `protobuf:"bytes,4,opt,name=geo" json:"geo,omitempty"`
	//
	// SHA1 hashed device ID; IMEI when available, else MEID or ESN.
	// OpenRTB’s preferred method for device ID hashing is SHA1.
	Didsha1 *string `protobuf:"bytes,5,opt,name=didsha1" json:"didsha1,omitempty"`
	//
	// MD5 hashed device ID; IMEI when available, else MEID or ESN.
	// Should be interpreted as case insensitive.
	Didmd5 *string `protobuf:"bytes,6,opt,name=didmd5" json:"didmd5,omitempty"`
	//
	// SHA1 hashed platform-specific ID (e.g., Android ID or UDID for iOS).
	// OpenRTB’s preferred method for device ID hash is SHA1.
	Dpidsha1 *string `protobuf:"bytes,7,opt,name=dpidsha1" json:"dpidsha1,omitempty"`
	//
	// MD5 hashed platform-specific ID (e.g., Android ID or UDID for iOS).
	// Should be interpreted as case insensitive.
	Dpidmd5 *string `protobuf:"bytes,8,opt,name=dpidmd5" json:"dpidmd5,omitempty"`
	//
	// IP address in IPv6.
	Ipv6 *string `protobuf:"bytes,9,opt,name=ipv6" json:"ipv6,omitempty"`
	//
	// Carrier or ISP derived from the IP address.
	// Should be specified using Mobile Network Code (MNC).
	Carrier *string `protobuf:"bytes,10,opt,name=carrier,def=-1" json:"carrier,omitempty"`
	//
	// Browser language; use alpha-2/ISO 639-1 codes.
	Language *string `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	//
	// Device make (e.g., “Apple”).
	Make *string `protobuf:"bytes,12,opt,name=make,def=-1" json:"make,omitempty"`
	//
	// Device model (e.g., “iPhone”).
	Model *string `protobuf:"bytes,13,opt,name=model,def=-1" json:"model,omitempty"`
	//
	// Device operating system (e.g., “iOS”).
	Os *string `protobuf:"bytes,14,opt,name=os,def=-1" json:"os,omitempty"`
	//
	// Device operating system version (e.g., “3.1.2”).
	Osv *string `protobuf:"bytes,15,opt,name=osv,def=-1" json:"osv,omitempty"`
	//
	// Device supports Javascript?
	Js *Flag `protobuf:"varint,16,opt,name=js,enum=openrtb.Flag,def=1" json:"js,omitempty"`
	//
	// Return the detected data connection type for the device.
	Connectiontype *Enums_BidRequest_Device_ConnectionType `protobuf:"varint,17,opt,name=connectiontype,enum=openrtb.Enums_BidRequest_Device_ConnectionType,def=0" json:"connectiontype,omitempty"`
	//
	// Return the device type being used.
	Devicetype *Enums_BidRequest_Device_DeviceType `protobuf:"varint,18,opt,name=devicetype,enum=openrtb.Enums_BidRequest_Device_DeviceType,def=-1" json:"devicetype,omitempty"`
	//
	// Return the Flash version detected.
	Flashver *string `protobuf:"bytes,19,opt,name=flashver" json:"flashver,omitempty"`
	//
	// "Limit Ad Tracking" signal commercially endorsed (e.g., iOS, Android),
	// where false = tracking is unrestricted,
	// true = tracking must be limited per commercial guidelines.
	Lmt *bool `protobuf:"varint,20,opt,name=lmt" json:"lmt,omitempty"`
	//
	// Hardware version of the device (e.g., "5S" for iPhone 5S).
	Hwv *string `protobuf:"bytes,21,opt,name=hwv" json:"hwv,omitempty"`
	//
	// Physical width of the screen in pixels.
	W *int32 `protobuf:"varint,22,opt,name=w" json:"w,omitempty"`
	//
	// Physical height of the screen in pixels.
	H *int32 `protobuf:"varint,23,opt,name=h" json:"h,omitempty"`
	//
	// Screen size as pixels per linear inch.
	Ppi *int32 `protobuf:"varint,24,opt,name=ppi" json:"ppi,omitempty"`
	//
	// The ratio of physical pixels to device independent pixels.
	Pxratio *float64 `protobuf:"fixed64,25,opt,name=pxratio" json:"pxratio,omitempty"`
	//
	// ID sanctioned for advertiser use in the clear (i.e., not hashed).
	Ifa *string `protobuf:"bytes,26,opt,name=ifa" json:"ifa,omitempty"`
	//
	// MAC address of the device; hashed via SHA1.
	Macsha1 *string `protobuf:"bytes,27,opt,name=macsha1" json:"macsha1,omitempty"`
	// *
	// MAC address of the device; hashed via MD5.
	Macmd5 *string `protobuf:"bytes,28,opt,name=macmd5" json:"macmd5,omitempty"`
	//
	// Mobile carrier as the concatenated MCC-MNC code (e.g.,
	// "310-005" identifies Verizon Wireless CDMA in the USA).
	// Refer to https://en.wikipedia.org/wiki/Mobile_country_code
	// for further examples. Note that the dash between the MCC
	// and MNC parts is required to remove parsing ambiguity.
	Mccmnc           *string           `protobuf:"bytes,30,opt,name=mccmnc" json:"mccmnc,omitempty"`
	Ext              *DeviceExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BidRequest_Device) Reset()                    { *m = BidRequest_Device{} }
func (m *BidRequest_Device) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Device) ProtoMessage()               {}
func (*BidRequest_Device) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 5} }

const Default_BidRequest_Device_Ip string = "0.0.0.0"
const Default_BidRequest_Device_Carrier string = "-1"
const Default_BidRequest_Device_Make string = "-1"
const Default_BidRequest_Device_Model string = "-1"
const Default_BidRequest_Device_Os string = "-1"
const Default_BidRequest_Device_Osv string = "-1"
const Default_BidRequest_Device_Js Flag = Flag_YES
const Default_BidRequest_Device_Connectiontype Enums_BidRequest_Device_ConnectionType = Enums_BidRequest_Device_CONNECTION_UNKNOWN
const Default_BidRequest_Device_Devicetype Enums_BidRequest_Device_DeviceType = Enums_BidRequest_Device_UNKNOWN

func (m *BidRequest_Device) GetDnt() Flag {
	if m != nil && m.Dnt != nil {
		return *m.Dnt
	}
	return Flag_NO
}

func (m *BidRequest_Device) GetUa() string {
	if m != nil && m.Ua != nil {
		return *m.Ua
	}
	return ""
}

func (m *BidRequest_Device) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return Default_BidRequest_Device_Ip
}

func (m *BidRequest_Device) GetGeo() *BidRequest_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *BidRequest_Device) GetDidsha1() string {
	if m != nil && m.Didsha1 != nil {
		return *m.Didsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDidmd5() string {
	if m != nil && m.Didmd5 != nil {
		return *m.Didmd5
	}
	return ""
}

func (m *BidRequest_Device) GetDpidsha1() string {
	if m != nil && m.Dpidsha1 != nil {
		return *m.Dpidsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDpidmd5() string {
	if m != nil && m.Dpidmd5 != nil {
		return *m.Dpidmd5
	}
	return ""
}

func (m *BidRequest_Device) GetIpv6() string {
	if m != nil && m.Ipv6 != nil {
		return *m.Ipv6
	}
	return ""
}

func (m *BidRequest_Device) GetCarrier() string {
	if m != nil && m.Carrier != nil {
		return *m.Carrier
	}
	return Default_BidRequest_Device_Carrier
}

func (m *BidRequest_Device) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *BidRequest_Device) GetMake() string {
	if m != nil && m.Make != nil {
		return *m.Make
	}
	return Default_BidRequest_Device_Make
}

func (m *BidRequest_Device) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return Default_BidRequest_Device_Model
}

func (m *BidRequest_Device) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return Default_BidRequest_Device_Os
}

func (m *BidRequest_Device) GetOsv() string {
	if m != nil && m.Osv != nil {
		return *m.Osv
	}
	return Default_BidRequest_Device_Osv
}

func (m *BidRequest_Device) GetJs() Flag {
	if m != nil && m.Js != nil {
		return *m.Js
	}
	return Default_BidRequest_Device_Js
}

func (m *BidRequest_Device) GetConnectiontype() Enums_BidRequest_Device_ConnectionType {
	if m != nil && m.Connectiontype != nil {
		return *m.Connectiontype
	}
	return Default_BidRequest_Device_Connectiontype
}

func (m *BidRequest_Device) GetDevicetype() Enums_BidRequest_Device_DeviceType {
	if m != nil && m.Devicetype != nil {
		return *m.Devicetype
	}
	return Default_BidRequest_Device_Devicetype
}

func (m *BidRequest_Device) GetFlashver() string {
	if m != nil && m.Flashver != nil {
		return *m.Flashver
	}
	return ""
}

func (m *BidRequest_Device) GetLmt() bool {
	if m != nil && m.Lmt != nil {
		return *m.Lmt
	}
	return false
}

func (m *BidRequest_Device) GetHwv() string {
	if m != nil && m.Hwv != nil {
		return *m.Hwv
	}
	return ""
}

func (m *BidRequest_Device) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Device) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Device) GetPpi() int32 {
	if m != nil && m.Ppi != nil {
		return *m.Ppi
	}
	return 0
}

func (m *BidRequest_Device) GetPxratio() float64 {
	if m != nil && m.Pxratio != nil {
		return *m.Pxratio
	}
	return 0
}

func (m *BidRequest_Device) GetIfa() string {
	if m != nil && m.Ifa != nil {
		return *m.Ifa
	}
	return ""
}

func (m *BidRequest_Device) GetMacsha1() string {
	if m != nil && m.Macsha1 != nil {
		return *m.Macsha1
	}
	return ""
}

func (m *BidRequest_Device) GetMacmd5() string {
	if m != nil && m.Macmd5 != nil {
		return *m.Macmd5
	}
	return ""
}

func (m *BidRequest_Device) GetMccmnc() string {
	if m != nil && m.Mccmnc != nil {
		return *m.Mccmnc
	}
	return ""
}

func (m *BidRequest_Device) GetExt() *DeviceExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.12: contains information known or derived about the human user of the device.
// Note that the user ID is an exchange artifact (refer to the “device” object for hardware or
// platform derived IDs) and may be subject to rotation policies. However, this user ID must be
// stable long enough to serve reasonably as the basis for frequency capping.
// If device ID is used as a proxy for unique user ID, use the device object.
type BidRequest_User struct {
	//
	// Unique consumer ID of this user on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Buyer’s user ID for this user as mapped by exchange for the buyer.
	Buyeruid *string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
	//
	// Year of birth as a 4-digit integer.
	Yob *int32 `protobuf:"varint,3,opt,name=yob" json:"yob,omitempty"`
	//
	// Gender as “M” male, “F” female, “O” Other. (Null indicates unknown)
	Gender *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	//
	// Comma separated list of keywords of consumer interests or intent.
	Keywords *string `protobuf:"bytes,5,opt,name=keywords" json:"keywords,omitempty"`
	//
	// If supported by the exchange, this is custom data that the bidder had stored in the
	// exchange’s cookie. The string may be in base85 cookie safe characters, and be in any
	// format. This may useful for storing user features. Note: Proper JSON encoding must
	// be used to include “escaped” quotation marks.
	Customdata *string `protobuf:"bytes,6,opt,name=customdata" json:"customdata,omitempty"`
	//
	// Home geo for the user (e.g., based off of registration data); this is different from the
	// current location of the access device (that is defined by the geo object embedded in the
	// Device Object).
	Geo *BidRequest_Geo `protobuf:"bytes,7,opt,name=geo" json:"geo,omitempty"`
	//
	// User's custom Data.
	Data             []*BidRequest_Data `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
	Ext              *UserExtensions    `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BidRequest_User) Reset()                    { *m = BidRequest_User{} }
func (m *BidRequest_User) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_User) ProtoMessage()               {}
func (*BidRequest_User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 6} }

func (m *BidRequest_User) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_User) GetBuyeruid() string {
	if m != nil && m.Buyeruid != nil {
		return *m.Buyeruid
	}
	return ""
}

func (m *BidRequest_User) GetYob() int32 {
	if m != nil && m.Yob != nil {
		return *m.Yob
	}
	return 0
}

func (m *BidRequest_User) GetGender() string {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return ""
}

func (m *BidRequest_User) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_User) GetCustomdata() string {
	if m != nil && m.Customdata != nil {
		return *m.Customdata
	}
	return ""
}

func (m *BidRequest_User) GetGeo() *BidRequest_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *BidRequest_User) GetData() []*BidRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BidRequest_User) GetExt() *UserExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.8: describes the publisher of a site or app.
type BidRequest_Publisher struct {
	//
	// Publisher ID on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Publisher name (may be masked at publisher’s request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Array of IAB content categories for the publisher.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	//
	// Publisher’s highest level domain name, for example “foopub.com”.
	Domain           *string              `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	Ext              *PublisherExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *BidRequest_Publisher) Reset()                    { *m = BidRequest_Publisher{} }
func (m *BidRequest_Publisher) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Publisher) ProtoMessage()               {}
func (*BidRequest_Publisher) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 7} }

func (m *BidRequest_Publisher) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Publisher) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Publisher) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Publisher) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_Publisher) GetExt() *PublisherExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.9: describes the producer of content object, which might be different from the
// publisher of the content of the page. This object is useful in the case of syndicated content,
// such as embedded videos, for example.
type BidRequest_Producer struct {
	//
	// Content producer or originator ID. Useful if content is syndicated,
	// and may be posted on a site using embed tags.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Content producer or originator name (e.g., “Warner Bros”).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Array of IAB content categories for the content producer.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	//
	// URL of the content producer.
	Domain           *string             `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	Ext              *ProducerExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *BidRequest_Producer) Reset()                    { *m = BidRequest_Producer{} }
func (m *BidRequest_Producer) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Producer) ProtoMessage()               {}
func (*BidRequest_Producer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 8} }

func (m *BidRequest_Producer) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Producer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Producer) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Producer) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_Producer) GetExt() *ProducerExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.11: describes the current geographic location of the Device (e.g., based on IP
// address or GPS), or the home geo of the User (e.g., based on registration data).
// If both the Device and User objects contain Geo objects with different information,
// it’s up to the bidder to determine which Geo information to use.
type BidRequest_Geo struct {
	//
	// Latitude from -90 to 90. South is negative. This should only be passed if known
	// to be accurate (For example, not the centroid of a postal code).
	Lat *float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	//
	// Longitude from -180 to 180. West is negative. This should only be passed if known
	// to be accurate (For example, not the centroid of a postal code).
	Lon *float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
	//
	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	//
	// Region using ISO 3166-2
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	//
	// Region of a country using fips 10-4 notation (alternative to ISO 3166-2).
	Regionfips104 *string `protobuf:"bytes,5,opt,name=regionfips104" json:"regionfips104,omitempty"`
	//
	// Pass the metro code (see http://code.google.com/apis/adwords/docs/appendix/metrocodes.html).
	// Metro codes are similar to but not exactly the same as Nielsen DMAs.
	Metro *string `protobuf:"bytes,6,opt,name=metro" json:"metro,omitempty"`
	//
	// City using United Nations Code for Trade and Transport Locations
	// (http://www.unece.org/cefact/locode/service/location.htm).
	City *string `protobuf:"bytes,7,opt,name=city" json:"city,omitempty"`
	//
	// Zip/postal code.
	Zip *string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	//
	// Indicate the source of the geo data (GPS, IP address, user provided).
	// Type should be provided when lat/lon is provided.
	Type *Enums_BidRequest_Geo_LocationType `protobuf:"varint,9,opt,name=type,enum=openrtb.Enums_BidRequest_Geo_LocationType" json:"type,omitempty"`
	//
	// Local time as the number +/- of minutes from UTC.
	Utcoffset        *int32         `protobuf:"varint,10,opt,name=utcoffset" json:"utcoffset,omitempty"`
	Ext              *GeoExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *BidRequest_Geo) Reset()                    { *m = BidRequest_Geo{} }
func (m *BidRequest_Geo) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Geo) ProtoMessage()               {}
func (*BidRequest_Geo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 9} }

func (m *BidRequest_Geo) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *BidRequest_Geo) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *BidRequest_Geo) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *BidRequest_Geo) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *BidRequest_Geo) GetRegionfips104() string {
	if m != nil && m.Regionfips104 != nil {
		return *m.Regionfips104
	}
	return ""
}

func (m *BidRequest_Geo) GetMetro() string {
	if m != nil && m.Metro != nil {
		return *m.Metro
	}
	return ""
}

func (m *BidRequest_Geo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *BidRequest_Geo) GetZip() string {
	if m != nil && m.Zip != nil {
		return *m.Zip
	}
	return ""
}

func (m *BidRequest_Geo) GetType() Enums_BidRequest_Geo_LocationType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Enums_BidRequest_Geo_GPS_LOCATION
}

func (m *BidRequest_Geo) GetUtcoffset() int32 {
	if m != nil && m.Utcoffset != nil {
		return *m.Utcoffset
	}
	return 0
}

func (m *BidRequest_Geo) GetExt() *GeoExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.13: The data and segment objects together allow data about the user to be passed
// to bidders in the bid request. This data may be from multiple sources (e.g., the exchange
// itself, third party providers) as specified by the data object ID field.
// A bid request can mix data objects from multiple providers.
type BidRequest_Data struct {
	//
	// Exchange specific ID for the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Data provider name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Array of segment objects.
	Segment          []*BidRequest_Data_Segment `protobuf:"bytes,3,rep,name=segment" json:"segment,omitempty"`
	Ext              *DataExtensions            `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *BidRequest_Data) Reset()                    { *m = BidRequest_Data{} }
func (m *BidRequest_Data) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Data) ProtoMessage()               {}
func (*BidRequest_Data) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 10} }

func (m *BidRequest_Data) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Data) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Data) GetSegment() []*BidRequest_Data_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *BidRequest_Data) GetExt() *DataExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.14: convey specific units of information from the provider identified
// in the parent data object.
type BidRequest_Data_Segment struct {
	//
	// ID of a data provider’s segment applicable to the user.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Name of a data provider’s segment applicable to the user.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// String representing the value of the segment. The method for transmitting this data
	// should be negotiated offline with the data provider.
	// For example for gender, “male”, or “female”, for age, “30-40”).
	Value            *string            `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Ext              *SegmentExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BidRequest_Data_Segment) Reset()                    { *m = BidRequest_Data_Segment{} }
func (m *BidRequest_Data_Segment) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Data_Segment) ProtoMessage()               {}
func (*BidRequest_Data_Segment) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 10, 0} }

func (m *BidRequest_Data_Segment) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Data_Segment) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Data_Segment) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *BidRequest_Data_Segment) GetExt() *SegmentExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 3.3.15: Legal, governmental, or industry regulations that apply to the request.
type BidRequest_Regulations struct {
	//
	// Indicated wether or not this request falls under the COPPA regulations
	// established by the USA FTC.
	Coppa            *Flag                  `protobuf:"varint,1,opt,name=coppa,enum=openrtb.Flag" json:"coppa,omitempty"`
	Ext              *RegulationsExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *BidRequest_Regulations) Reset()                    { *m = BidRequest_Regulations{} }
func (m *BidRequest_Regulations) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Regulations) ProtoMessage()               {}
func (*BidRequest_Regulations) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 11} }

func (m *BidRequest_Regulations) GetCoppa() Flag {
	if m != nil && m.Coppa != nil {
		return *m.Coppa
	}
	return Flag_NO
}

func (m *BidRequest_Regulations) GetExt() *RegulationsExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 4.3.1: top-level bid response object.
type BidResponse struct {
	//
	// ID of the bid request.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Array of seatbid objects.
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	//
	// Bid response ID to assist tracking for bidders.
	// This value is chosen by the bidder for cross-reference.
	Bidid *string `protobuf:"bytes,3,opt,name=bidid" json:"bidid,omitempty"`
	//
	// Bid currency using ISO-4217 alphabetic codes.
	Cur *string `protobuf:"bytes,4,opt,name=cur,def=USD" json:"cur,omitempty"`
	//
	// This is an optional feature, which allows a bidder to set data in the exchange’s cookie.
	// The string may be in base85 cookie safe characters, and be in any format.
	// This may be useful for storing user features.
	// Note: Proper JSON encoding must be used to include “escaped” quotation marks.
	Customdata *string `protobuf:"bytes,5,opt,name=customdata" json:"customdata,omitempty"`
	//
	// Reason for not bidding.
	Nbr              *Enums_BidResponse_NoBidReason `protobuf:"varint,6,opt,name=nbr,enum=openrtb.Enums_BidResponse_NoBidReason" json:"nbr,omitempty"`
	Ext              *BidResponseExtensions         `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *BidResponse) Reset()                    { *m = BidResponse{} }
func (m *BidResponse) String() string            { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()               {}
func (*BidResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

const Default_BidResponse_Cur string = "USD"

func (m *BidResponse) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if m != nil {
		return m.Seatbid
	}
	return nil
}

func (m *BidResponse) GetBidid() string {
	if m != nil && m.Bidid != nil {
		return *m.Bidid
	}
	return ""
}

func (m *BidResponse) GetCur() string {
	if m != nil && m.Cur != nil {
		return *m.Cur
	}
	return Default_BidResponse_Cur
}

func (m *BidResponse) GetCustomdata() string {
	if m != nil && m.Customdata != nil {
		return *m.Customdata
	}
	return ""
}

func (m *BidResponse) GetNbr() Enums_BidResponse_NoBidReason {
	if m != nil && m.Nbr != nil {
		return *m.Nbr
	}
	return Enums_BidResponse_UNKNOWN_ERROR
}

func (m *BidResponse) GetExt() *BidResponseExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 4.3.2: A bid response can contain multiple “seatbid” objects, each on behalf of a
// different bidder seat. Since a bid request can include multiple impressions, each “seatbid”
// object can contain multiple bids each pertaining to a different impression on behalf of a seat.
// Thus, each “bid” object must include the impression ID to which it pertains as well as
// the bid price. The “group” attribute can be used to specify if a seat is willing to accept
// any impressions that it can win (default) or if it is only interested in winning any if it
// can win them all (i.e., all or nothing).
type BidResponse_SeatBid struct {
	//
	// Array of bid objects; each bid object relates to an imp object in the bid request.
	// Note that, if supported by an exchange, one imp object can have many bid objects.
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	//
	// ID of the bidder seat on whose behalf this bid is made.
	Seat *string `protobuf:"bytes,2,opt,name=seat" json:"seat,omitempty"`
	//
	// Should impressions be won or lost as a group?
	Group            *Flag              `protobuf:"varint,3,opt,name=group,enum=openrtb.Flag" json:"group,omitempty"`
	Ext              *SeatBidExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BidResponse_SeatBid) Reset()                    { *m = BidResponse_SeatBid{} }
func (m *BidResponse_SeatBid) String() string            { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid) ProtoMessage()               {}
func (*BidResponse_SeatBid) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *BidResponse_SeatBid) GetSeat() string {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return ""
}

func (m *BidResponse_SeatBid) GetGroup() Flag {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return Flag_NO
}

func (m *BidResponse_SeatBid) GetExt() *SeatBidExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

//
// OpenRTB 4.3.3: For each bid, the “nurl” attribute contains the win notice URL.
// If the bidder wins the impression, the exchange calls this notice URL a) to inform the bidder
// of the win and b) to convey certain information using substitution macros
// (see Section 4.6 Substitution Macros). The “adomain” attribute can be used to check
// advertiser block list compliance. The “iurl” attribute can provide a link to an image that
// is representative of the campaign’s content (irrespective of whether the campaign may have
// multiple creatives). This enables human review for spotting inappropriate content.
// The “cid” attribute can be used to block ads that were previously identified as
// inappropriate; essentially a safety net beyond the block lists.  The “crid” attribute
// can be helpful in reporting creative issues back to bidders. Finally, the “attr” array
// indicates the creative attributes that describe the ad to be served.
type BidResponse_SeatBid_Bid struct {
	//
	// ID for the bid object chosen by the bidder for tracking and debugging purposes.
	// Useful when multiple bids are submitted for a single impression for a given seat.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// ID of the impression object to which this bid applies.
	Impid *string `protobuf:"bytes,2,req,name=impid" json:"impid,omitempty"`
	//
	// Bid price in CPM. WARNING/Best Practice Note: Although this value is a float,
	// OpenRTB strongly suggests using integer math for accounting to avoid rounding errors.
	Price *float64 `protobuf:"fixed64,3,req,name=price" json:"price,omitempty"`
	//
	// ID that references the ad to be served if the bid wins.
	Adid *string `protobuf:"bytes,4,opt,name=adid" json:"adid,omitempty"`
	//
	// Win notice URL. Note that ad markup is also typically, but not necessarily,
	// returned via this URL.
	Nurl *string `protobuf:"bytes,5,opt,name=nurl" json:"nurl,omitempty"`
	//
	// Actual ad markup. XHTML if a response to a banner object,
	// or VAST XML if a response to a video object.
	// <p>
	// Open Bidder macros are supported for this field.
	Adm *string `protobuf:"bytes,6,opt,name=adm" json:"adm,omitempty"`
	//
	// Native ad response.
	// You can only set one of adm and adm_native; either will generate the "adm" field in JSON.
	AdmNative *NativeResponse `protobuf:"bytes,50,opt,name=adm_native,json=admNative" json:"adm_native,omitempty"`
	//
	// Advertiser’s primary or top-level domain for advertiser checking.
	// This can be a list of domains if there is a rotating creative.
	// However, exchanges may mandate that only one landing domain is allowed.
	Adomain []string `protobuf:"bytes,7,rep,name=adomain" json:"adomain,omitempty"`
	// *
	// Bundle or package name (e.g., com.foo.mygame) of the app being advertised, if applicable;
	// intended to be a unique ID across exchanges.
	Bundle *string `protobuf:"bytes,15,opt,name=bundle" json:"bundle,omitempty"`
	//
	// Sample image URL (without cache busting) for content checking.
	Iurl *string `protobuf:"bytes,8,opt,name=iurl" json:"iurl,omitempty"`
	//
	// Campaign ID or similar that appears within the ad markup.
	Cid *string `protobuf:"bytes,9,opt,name=cid" json:"cid,omitempty"`
	//
	// Creative ID for reporting content issues or defects.
	// This could also be used as a reference to a creative ID that is posted with an exchange.
	// <p>
	// Open Bidder macros are supported for this field.
	Crid *string `protobuf:"bytes,10,opt,name=crid" json:"crid,omitempty"`
	// *
	// IAB content category of the creative.
	Cat []string `protobuf:"bytes,16,rep,name=cat" json:"cat,omitempty"`
	//
	// Array of creative attributes.
	Attr []CreativeAttribute `protobuf:"varint,11,rep,name=attr,enum=openrtb.CreativeAttribute" json:"attr,omitempty"`
	//
	// A unique identifier for the direct deal associated with the bid.
	Dealid *string `protobuf:"bytes,12,opt,name=dealid" json:"dealid,omitempty"`
	// *
	// Width of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin
	// optional fields it is recommended that the response bid contains this field to signal
	// the size of ad chosen.
	W *int32 `protobuf:"varint,13,opt,name=w" json:"w,omitempty"`
	// *
	// Height of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin
	// optional fields it is recommended that the response bid contains this field to signal
	// the size of ad chosen.
	H                *int32         `protobuf:"varint,14,opt,name=h" json:"h,omitempty"`
	Ext              *BidExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *BidResponse_SeatBid_Bid) Reset()                    { *m = BidResponse_SeatBid_Bid{} }
func (m *BidResponse_SeatBid_Bid) String() string            { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid_Bid) ProtoMessage()               {}
func (*BidResponse_SeatBid_Bid) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0, 0} }

func (m *BidResponse_SeatBid_Bid) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetImpid() string {
	if m != nil && m.Impid != nil {
		return *m.Impid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetAdid() string {
	if m != nil && m.Adid != nil {
		return *m.Adid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetNurl() string {
	if m != nil && m.Nurl != nil {
		return *m.Nurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdm() string {
	if m != nil && m.Adm != nil {
		return *m.Adm
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdmNative() *NativeResponse {
	if m != nil {
		return m.AdmNative
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAdomain() []string {
	if m != nil {
		return m.Adomain
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetBundle() string {
	if m != nil && m.Bundle != nil {
		return *m.Bundle
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetIurl() string {
	if m != nil && m.Iurl != nil {
		return *m.Iurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCid() string {
	if m != nil && m.Cid != nil {
		return *m.Cid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCrid() string {
	if m != nil && m.Crid != nil {
		return *m.Crid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAttr() []CreativeAttribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetDealid() string {
	if m != nil && m.Dealid != nil {
		return *m.Dealid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetExt() *BidExtensions {
	if m != nil {
		return m.Ext
	}
	return nil
}

// *
// OpenRTB Native 4.1: The Native Object defines the native advertising opportunity
// available for bid via this bid request. It must be included directly in the
// impression object if the impression offered for auction is a native ad format.
type NativeRequest struct {
	// *
	// Version of the Native Markup version in use.
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// *
	// The Layout ID of the native ad unit.
	// This field is not required, but it's highly recommended.
	Layout *Enums_BidRequest_Impression_NativeRequest_LayoutId `protobuf:"varint,2,opt,name=layout,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_LayoutId" json:"layout,omitempty"`
	// *
	// The Ad unit ID of the native ad unit. This corresponds to one of IAB Core-6 native ad units.
	// This field is not required, but it's highly recommended.
	Adunit *Enums_BidRequest_Impression_NativeRequest_AdUnitId `protobuf:"varint,3,opt,name=adunit,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_AdUnitId" json:"adunit,omitempty"`
	// *
	// The number of identical placements in this Layout.
	Plcmtcnt *int32 `protobuf:"varint,4,opt,name=plcmtcnt,def=1" json:"plcmtcnt,omitempty"`
	// *
	// 0 for the first ad, 1 for the second ad, and so on.
	// This is not the sequence number of the content in the stream.
	Seq *int32 `protobuf:"varint,5,opt,name=seq,def=0" json:"seq,omitempty"`
	// *
	// Any bid must comply with the array of elements expressed by the Exchange.
	Assets []*NativeRequest_Asset `protobuf:"bytes,6,rep,name=assets" json:"assets,omitempty"`
	// *
	// The context in which the ad appears.
	Context *Enums_BidRequest_Impression_NativeRequest_Context `protobuf:"varint,7,opt,name=context,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_Context" json:"context,omitempty"`
	// *
	// A more detailed context in which the ad appears.
	Contextsubtype *Enums_BidRequest_Impression_NativeRequest_ContextSubtype `protobuf:"varint,8,opt,name=contextsubtype,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_ContextSubtype" json:"contextsubtype,omitempty"`
	// *
	// The design/format/layout of the ad unit being offered.
	Plcmttype                    *Enums_BidRequest_Impression_NativeRequest_PlacementType `protobuf:"varint,9,opt,name=plcmttype,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_PlacementType" json:"plcmttype,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest) Reset()                    { *m = NativeRequest{} }
func (m *NativeRequest) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest) ProtoMessage()               {}
func (*NativeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

var extRange_NativeRequest = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest
}

const Default_NativeRequest_Plcmtcnt int32 = 1
const Default_NativeRequest_Seq int32 = 0

func (m *NativeRequest) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *NativeRequest) GetLayout() Enums_BidRequest_Impression_NativeRequest_LayoutId {
	if m != nil && m.Layout != nil {
		return *m.Layout
	}
	return Enums_BidRequest_Impression_NativeRequest_CONTENT_WALL
}

func (m *NativeRequest) GetAdunit() Enums_BidRequest_Impression_NativeRequest_AdUnitId {
	if m != nil && m.Adunit != nil {
		return *m.Adunit
	}
	return Enums_BidRequest_Impression_NativeRequest_PAID_SEARCH_UNIT
}

func (m *NativeRequest) GetPlcmtcnt() int32 {
	if m != nil && m.Plcmtcnt != nil {
		return *m.Plcmtcnt
	}
	return Default_NativeRequest_Plcmtcnt
}

func (m *NativeRequest) GetSeq() int32 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return Default_NativeRequest_Seq
}

func (m *NativeRequest) GetAssets() []*NativeRequest_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NativeRequest) GetContext() Enums_BidRequest_Impression_NativeRequest_Context {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return Enums_BidRequest_Impression_NativeRequest_CONTENT_CENTRIC
}

func (m *NativeRequest) GetContextsubtype() Enums_BidRequest_Impression_NativeRequest_ContextSubtype {
	if m != nil && m.Contextsubtype != nil {
		return *m.Contextsubtype
	}
	return Enums_BidRequest_Impression_NativeRequest_GENERAL_OR_MIXED
}

func (m *NativeRequest) GetPlcmttype() Enums_BidRequest_Impression_NativeRequest_PlacementType {
	if m != nil && m.Plcmttype != nil {
		return *m.Plcmttype
	}
	return Enums_BidRequest_Impression_NativeRequest_FEED
}

// *
// OpenRTB Native 4.2: The main container object for each asset requested or supported by
// Exchange on behalf of the rendering client. Any object that is required
// is to be flagged as such. Only one of the {title,img,video,data} objects should be
// present in each object. All others should be null/absent. The id is to be unique within
// the Asset array so that the response can be aligned.
type NativeRequest_Asset struct {
	// *
	// Unique asset ID, assigned by exchange. Typically a counter for the array.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// *
	// Set to true if asset is required (exchange will not accept a bid without it).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// *
	// Title object for title assets.
	Title *NativeRequest_Asset_Title `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// *
	// Image object for image assets.
	Img *NativeRequest_Asset_Image `protobuf:"bytes,4,opt,name=img" json:"img,omitempty"`
	// *
	// Video object for video assets.
	// Note that in-stream video ads are not part of Native.  Native ads may contain a video
	// as the ad creative itself.
	Video *BidRequest_Impression_Video `protobuf:"bytes,5,opt,name=video" json:"video,omitempty"`
	// *
	// Data object for ratings, prices etc.
	Data                         *NativeRequest_Asset_Data `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset) Reset()                    { *m = NativeRequest_Asset{} }
func (m *NativeRequest_Asset) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset) ProtoMessage()               {}
func (*NativeRequest_Asset) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

var extRange_NativeRequest_Asset = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset
}

const Default_NativeRequest_Asset_Required bool = false

func (m *NativeRequest_Asset) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NativeRequest_Asset) GetRequired() bool {
	if m != nil && m.Required != nil {
		return *m.Required
	}
	return Default_NativeRequest_Asset_Required
}

func (m *NativeRequest_Asset) GetTitle() *NativeRequest_Asset_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *NativeRequest_Asset) GetImg() *NativeRequest_Asset_Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *NativeRequest_Asset) GetVideo() *BidRequest_Impression_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *NativeRequest_Asset) GetData() *NativeRequest_Asset_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// *
// OpenRTB Native 4.3: The Title object is to be used for title element of the Native ad.
type NativeRequest_Asset_Title struct {
	// *
	// Maximum length of the text in the title element.
	Len                          *int32 `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset_Title) Reset()                    { *m = NativeRequest_Asset_Title{} }
func (m *NativeRequest_Asset_Title) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Title) ProtoMessage()               {}
func (*NativeRequest_Asset_Title) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0, 0} }

var extRange_NativeRequest_Asset_Title = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Title) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Title
}

func (m *NativeRequest_Asset_Title) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

// *
// OpenRTB Native 4.4: The Image object to be used for all image elements of the
// Native ad such as Icons, Main Image, etc.
type NativeRequest_Asset_Image struct {
	// *
	// Type ID of the image element supported by the publisher.
	// The publisher can display this information in an appropriate format.
	Type *NativeRequest_Asset_Image_ImageAssetType `protobuf:"varint,1,opt,name=type,enum=openrtb.NativeRequest_Asset_Image_ImageAssetType" json:"type,omitempty"`
	// *
	// Width of the image in pixels.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// *
	// Height of the image in pixels.
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	// *
	// The minimum requested width of the image in pixels. This option should be used for any
	// rescaling of images by the client. Either w or wmin should be transmitted.
	// If only w is included, it should be considered an exact requirement.
	Wmin *int32 `protobuf:"varint,4,opt,name=wmin" json:"wmin,omitempty"`
	// *
	// The minimum requested height of the image in pixels. This option should be used for any
	// rescaling of images by the client. Either h or hmin should be transmitted.
	// If only h is included, it should be considered an exact requirement.
	Hmin *int32 `protobuf:"varint,5,opt,name=hmin" json:"hmin,omitempty"`
	// *
	// Whitelist of content MIME types supported. Popular MIME types include, but are not
	// limited to "image/jpg" and "image/gif". Each implementing Exchange should have their
	// own list of supported types in the integration docs. See Wikipedia's MIME page for
	// more information and links to all IETF RFCs. If blank, assume all types are allowed.
	Mimes                        []string `protobuf:"bytes,6,rep,name=mimes" json:"mimes,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset_Image) Reset()                    { *m = NativeRequest_Asset_Image{} }
func (m *NativeRequest_Asset_Image) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Image) ProtoMessage()               {}
func (*NativeRequest_Asset_Image) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0, 1} }

var extRange_NativeRequest_Asset_Image = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Image) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Image
}

func (m *NativeRequest_Asset_Image) GetType() NativeRequest_Asset_Image_ImageAssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NativeRequest_Asset_Image_ICON
}

func (m *NativeRequest_Asset_Image) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetWmin() int32 {
	if m != nil && m.Wmin != nil {
		return *m.Wmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetHmin() int32 {
	if m != nil && m.Hmin != nil {
		return *m.Hmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

// *
// OpenRT Native 4.6: The Data Object is to be used for all non-core elements of the
// native unit such as Ratings, Review Count, Stars, Download count, descriptions etc.
// It is also generic for future of Native elements not contemplated at the time of the
// writing of this document.
type NativeRequest_Asset_Data struct {
	// *
	// Type ID of the element supported by the publisher. The publisher can display this
	// information in an appropriate format.
	Type *NativeRequest_Asset_Data_DataAssetType `protobuf:"varint,1,opt,name=type,enum=openrtb.NativeRequest_Asset_Data_DataAssetType" json:"type,omitempty"`
	// *
	// Maximum length of the text in the element's response.
	Len                          *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset_Data) Reset()                    { *m = NativeRequest_Asset_Data{} }
func (m *NativeRequest_Asset_Data) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Data) ProtoMessage()               {}
func (*NativeRequest_Asset_Data) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0, 2} }

var extRange_NativeRequest_Asset_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Data
}

func (m *NativeRequest_Asset_Data) GetType() NativeRequest_Asset_Data_DataAssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NativeRequest_Asset_Data_SPONSORED
}

func (m *NativeRequest_Asset_Data) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

// *
// OpenRTB Native 5.2: The native response object is the top level JSON object which identifies
// an native response.
type NativeResponse struct {
	// *
	// Version of the Native Markup version in use.
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// *
	// List of native ad's assets.
	Assets []*NativeResponse_Asset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
	// *
	// Destination Link.
	Link *NativeResponse_Link `protobuf:"bytes,3,req,name=link" json:"link,omitempty"`
	// *
	// Array of impression tracking URLs, expected to return a 1x1 image or 204 response -
	// typically only passed when using 3rd party trackers.
	Imptrackers []string `protobuf:"bytes,4,rep,name=imptrackers" json:"imptrackers,omitempty"`
	// *
	// Optional javascript impression tracker. Contains <script> tags to be executed at
	// impression time where it can be supported.
	Jstracker                    *string `protobuf:"bytes,5,opt,name=jstracker" json:"jstracker,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse) Reset()                    { *m = NativeResponse{} }
func (m *NativeResponse) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse) ProtoMessage()               {}
func (*NativeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

var extRange_NativeResponse = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse
}

func (m *NativeResponse) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *NativeResponse) GetAssets() []*NativeResponse_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NativeResponse) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *NativeResponse) GetImptrackers() []string {
	if m != nil {
		return m.Imptrackers
	}
	return nil
}

func (m *NativeResponse) GetJstracker() string {
	if m != nil && m.Jstracker != nil {
		return *m.Jstracker
	}
	return ""
}

// *
// OpenRTB Native 5.8: Used for "call to action" assets, or other links from the Native ad.
// This Object should be associated to its peer object in the parent Asset Object.
// When that peer object is activated (clicked) the action should take the user to the
// location of the link.
type NativeResponse_Link struct {
	// *
	// Landing URL of the clickable link.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// *
	// List of third-party tracker URLs to be fired on click of the URL.
	Clicktrackers []string `protobuf:"bytes,2,rep,name=clicktrackers" json:"clicktrackers,omitempty"`
	// *
	// Fallback URL for deeplink. To be used if the URL given in url is not supported by the device.
	Fallback                     *string `protobuf:"bytes,3,opt,name=fallback" json:"fallback,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Link) Reset()                    { *m = NativeResponse_Link{} }
func (m *NativeResponse_Link) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse_Link) ProtoMessage()               {}
func (*NativeResponse_Link) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

var extRange_NativeResponse_Link = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Link) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Link
}

func (m *NativeResponse_Link) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *NativeResponse_Link) GetClicktrackers() []string {
	if m != nil {
		return m.Clicktrackers
	}
	return nil
}

func (m *NativeResponse_Link) GetFallback() string {
	if m != nil && m.Fallback != nil {
		return *m.Fallback
	}
	return ""
}

// *
// OpenRTB Native 5.3: Corresponds to the Asset Object in the request.
// The main container object for each asset requested or supported by Exchange on behalf
// of the rendering client. Any object that is required is to be flagged as such.
// Only one of the {title,img,video,data} objects should be present in each object.
// All others should be null/absent. The id is to be unique within the Asset array
// so that the response can be aligned.
type NativeResponse_Asset struct {
	// *
	// Unique asset ID, assigned by exchange, must match one of the asset IDs in request.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// *
	// Set to 1 if asset is required. (bidder requires it to be displayed).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// *
	// Title object for title assets.
	Title *NativeResponse_Asset_Title `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// *
	// Image object for image assets.
	Img *NativeResponse_Asset_Image `protobuf:"bytes,4,opt,name=img" json:"img,omitempty"`
	// *
	// Video object for video assets.
	// Note that in-stream video ads are not part of Native. Native ads may contain a video
	// as the ad creative itself.
	Video *NativeResponse_Asset_Video `protobuf:"bytes,5,opt,name=video" json:"video,omitempty"`
	// *
	// Data object for ratings, prices etc.
	Data *NativeResponse_Asset_Data `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	// *
	// Link object for call to actions. This link is to associated to the other populated
	// field within the object.
	Link                         *NativeResponse_Link `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset) Reset()                    { *m = NativeResponse_Asset{} }
func (m *NativeResponse_Asset) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse_Asset) ProtoMessage()               {}
func (*NativeResponse_Asset) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 1} }

var extRange_NativeResponse_Asset = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset
}

const Default_NativeResponse_Asset_Required bool = false

func (m *NativeResponse_Asset) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NativeResponse_Asset) GetRequired() bool {
	if m != nil && m.Required != nil {
		return *m.Required
	}
	return Default_NativeResponse_Asset_Required
}

func (m *NativeResponse_Asset) GetTitle() *NativeResponse_Asset_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *NativeResponse_Asset) GetImg() *NativeResponse_Asset_Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *NativeResponse_Asset) GetVideo() *NativeResponse_Asset_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *NativeResponse_Asset) GetData() *NativeResponse_Asset_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NativeResponse_Asset) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

// *
// OpenRTB Native 5.4: Corresponds to the Title Object in the request, with the value filled in.
type NativeResponse_Asset_Title struct {
	// *
	// The text associated with the text element.
	Text                         *string `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Title) Reset()         { *m = NativeResponse_Asset_Title{} }
func (m *NativeResponse_Asset_Title) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Title) ProtoMessage()    {}
func (*NativeResponse_Asset_Title) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 1, 0}
}

var extRange_NativeResponse_Asset_Title = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Title) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Title
}

func (m *NativeResponse_Asset_Title) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// *
// OpenRTB Native 5.5: Corresponds to the Image Object in the request. The Image object
// to be used for all image elements of the Native ad such as Icons, Main Image, etc.
type NativeResponse_Asset_Image struct {
	// *
	// URL of the image asset.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// *
	// Width of the image in pixels.
	// This field is not required, but it's highly recommended.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// *
	// Height of the image in pixels.
	// This field is not required, but it's highly recommended.
	H                            *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Image) Reset()         { *m = NativeResponse_Asset_Image{} }
func (m *NativeResponse_Asset_Image) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Image) ProtoMessage()    {}
func (*NativeResponse_Asset_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 1, 1}
}

var extRange_NativeResponse_Asset_Image = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Image) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Image
}

func (m *NativeResponse_Asset_Image) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *NativeResponse_Asset_Image) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *NativeResponse_Asset_Image) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

// *
// OpenRTB Native 5.6: Corresponds to the Data Object in the request, with the value filled in.
// The Data Object is to be used for all miscellaneous elements of the native unit such as
// Ratings, Review Count, Stars, Downloads, Price count etc. It is also generic for future
// of Native elements not contemplated at the time of the writing of this document.
type NativeResponse_Asset_Data struct {
	// *
	// The optional formatted string name of the data type to be displayed.
	Label *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// *
	// The formatted string of data to be displayed. Can contain a formatted value such as
	// "5 stars" or "$10" or "3.4 stars out of 5".
	Value                        *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Data) Reset()                    { *m = NativeResponse_Asset_Data{} }
func (m *NativeResponse_Asset_Data) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Data) ProtoMessage()               {}
func (*NativeResponse_Asset_Data) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 1, 2} }

var extRange_NativeResponse_Asset_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Data
}

func (m *NativeResponse_Asset_Data) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *NativeResponse_Asset_Data) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// OpenRTB Native 5.7: Corresponds to the Video Object in the request,
// yet containing a value of a conforming VAST tag as a value.
type NativeResponse_Asset_Video struct {
	// *
	// vast xml.
	Vasttag                      []string `protobuf:"bytes,1,rep,name=vasttag" json:"vasttag,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Video) Reset()         { *m = NativeResponse_Asset_Video{} }
func (m *NativeResponse_Asset_Video) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Video) ProtoMessage()    {}
func (*NativeResponse_Asset_Video) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 1, 3}
}

var extRange_NativeResponse_Asset_Video = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Video) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Video
}

func (m *NativeResponse_Asset_Video) GetVasttag() []string {
	if m != nil {
		return m.Vasttag
	}
	return nil
}

func init() {
	proto.RegisterType((*BidRequest)(nil), "openrtb.BidRequest")
	proto.RegisterType((*BidRequest_Source)(nil), "openrtb.BidRequest.Source")
	proto.RegisterType((*BidRequest_Impression)(nil), "openrtb.BidRequest.Impression")
	proto.RegisterType((*BidRequest_Impression_Banner)(nil), "openrtb.BidRequest.Impression.Banner")
	proto.RegisterType((*BidRequest_Impression_Video)(nil), "openrtb.BidRequest.Impression.Video")
	proto.RegisterType((*BidRequest_Impression_Native)(nil), "openrtb.BidRequest.Impression.Native")
	proto.RegisterType((*BidRequest_Impression_PMP)(nil), "openrtb.BidRequest.Impression.PMP")
	proto.RegisterType((*BidRequest_Impression_PMP_DirectDeal)(nil), "openrtb.BidRequest.Impression.PMP.DirectDeal")
	proto.RegisterType((*BidRequest_Site)(nil), "openrtb.BidRequest.Site")
	proto.RegisterType((*BidRequest_App)(nil), "openrtb.BidRequest.App")
	proto.RegisterType((*BidRequest_Content)(nil), "openrtb.BidRequest.Content")
	proto.RegisterType((*BidRequest_Device)(nil), "openrtb.BidRequest.Device")
	proto.RegisterType((*BidRequest_User)(nil), "openrtb.BidRequest.User")
	proto.RegisterType((*BidRequest_Publisher)(nil), "openrtb.BidRequest.Publisher")
	proto.RegisterType((*BidRequest_Producer)(nil), "openrtb.BidRequest.Producer")
	proto.RegisterType((*BidRequest_Geo)(nil), "openrtb.BidRequest.Geo")
	proto.RegisterType((*BidRequest_Data)(nil), "openrtb.BidRequest.Data")
	proto.RegisterType((*BidRequest_Data_Segment)(nil), "openrtb.BidRequest.Data.Segment")
	proto.RegisterType((*BidRequest_Regulations)(nil), "openrtb.BidRequest.Regulations")
	proto.RegisterType((*BidResponse)(nil), "openrtb.BidResponse")
	proto.RegisterType((*BidResponse_SeatBid)(nil), "openrtb.BidResponse.SeatBid")
	proto.RegisterType((*BidResponse_SeatBid_Bid)(nil), "openrtb.BidResponse.SeatBid.Bid")
	proto.RegisterType((*NativeRequest)(nil), "openrtb.NativeRequest")
	proto.RegisterType((*NativeRequest_Asset)(nil), "openrtb.NativeRequest.Asset")
	proto.RegisterType((*NativeRequest_Asset_Title)(nil), "openrtb.NativeRequest.Asset.Title")
	proto.RegisterType((*NativeRequest_Asset_Image)(nil), "openrtb.NativeRequest.Asset.Image")
	proto.RegisterType((*NativeRequest_Asset_Data)(nil), "openrtb.NativeRequest.Asset.Data")
	proto.RegisterType((*NativeResponse)(nil), "openrtb.NativeResponse")
	proto.RegisterType((*NativeResponse_Link)(nil), "openrtb.NativeResponse.Link")
	proto.RegisterType((*NativeResponse_Asset)(nil), "openrtb.NativeResponse.Asset")
	proto.RegisterType((*NativeResponse_Asset_Title)(nil), "openrtb.NativeResponse.Asset.Title")
	proto.RegisterType((*NativeResponse_Asset_Image)(nil), "openrtb.NativeResponse.Asset.Image")
	proto.RegisterType((*NativeResponse_Asset_Data)(nil), "openrtb.NativeResponse.Asset.Data")
	proto.RegisterType((*NativeResponse_Asset_Video)(nil), "openrtb.NativeResponse.Asset.Video")
	proto.RegisterEnum("openrtb.NativeRequest_Asset_Image_ImageAssetType", NativeRequest_Asset_Image_ImageAssetType_name, NativeRequest_Asset_Image_ImageAssetType_value)
	proto.RegisterEnum("openrtb.NativeRequest_Asset_Data_DataAssetType", NativeRequest_Asset_Data_DataAssetType_name, NativeRequest_Asset_Data_DataAssetType_value)
}

func init() { proto.RegisterFile("beeswax/openrtb/openrtb.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 3756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0xcb, 0x72, 0x1c, 0x47,
	0x72, 0x31, 0x8f, 0x9e, 0x47, 0x0e, 0x01, 0x8d, 0x8a, 0x14, 0xd5, 0x82, 0x44, 0x09, 0x82, 0xb4,
	0x6b, 0xac, 0x24, 0x8e, 0xc8, 0x11, 0xc9, 0xa0, 0xb0, 0x96, 0xbd, 0x23, 0x00, 0x8b, 0x45, 0x2c,
	0x38, 0x80, 0x6a, 0xc0, 0x95, 0xd7, 0x8e, 0x58, 0x45, 0x4d, 0x77, 0x61, 0x50, 0x42, 0xbf, 0xd8,
	0xdd, 0x83, 0x87, 0xcf, 0x8e, 0x0d, 0x87, 0x4f, 0xbe, 0x3b, 0x1c, 0xbe, 0xf9, 0xe4, 0xa3, 0x3f,
	0xc0, 0xa7, 0xfd, 0x03, 0x7b, 0x8f, 0xbe, 0x39, 0xf6, 0xec, 0xf0, 0xc5, 0x3e, 0x39, 0x32, 0xab,
	0x7a, 0x7a, 0x7a, 0x1e, 0x04, 0xc8, 0xdd, 0xd8, 0x60, 0x04, 0x51, 0x99, 0x9d, 0x99, 0x95, 0x9d,
	0x95, 0x95, 0xaf, 0x1e, 0xb8, 0x37, 0x94, 0x32, 0xb9, 0x10, 0x97, 0x9f, 0x87, 0x91, 0x0c, 0xe2,
	0x74, 0x98, 0xfd, 0xed, 0x44, 0x71, 0x98, 0x86, 0xac, 0x6e, 0xc0, 0xb5, 0x0f, 0x66, 0xe9, 0xe4,
	0x65, 0x2a, 0x83, 0x44, 0x85, 0x81, 0xa6, 0x5c, 0xfb, 0x78, 0x89, 0xa0, 0xef, 0x9c, 0xd0, 0xf7,
	0x33, 0xaa, 0x8d, 0xdf, 0x7e, 0x05, 0xf0, 0xb5, 0x72, 0xb9, 0x7c, 0x31, 0x96, 0x49, 0xca, 0x56,
	0xa1, 0xac, 0x5c, 0xbb, 0xb4, 0x5e, 0xde, 0x6c, 0xf2, 0xb2, 0x72, 0xd9, 0x03, 0xa8, 0x28, 0x3f,
	0xb2, 0xcb, 0xeb, 0x95, 0xcd, 0x56, 0xf7, 0xfd, 0x4e, 0xa6, 0x4b, 0xce, 0xd1, 0xd9, 0xf7, 0xa3,
	0x58, 0x26, 0xb8, 0x2f, 0x47, 0x52, 0xf6, 0x19, 0x54, 0x13, 0x95, 0x4a, 0xbb, 0xb2, 0x5e, 0xda,
	0x6c, 0x75, 0xed, 0x45, 0x2c, 0x03, 0x95, 0x4a, 0x4e, 0x54, 0xec, 0x47, 0x50, 0x11, 0x51, 0x64,
	0x57, 0x89, 0xf8, 0xed, 0x45, 0xc4, 0xbd, 0x28, 0xe2, 0x48, 0xc3, 0xba, 0x50, 0x73, 0xe5, 0xb9,
	0x72, 0xa4, 0x6d, 0x11, 0xf5, 0xda, 0x22, 0xea, 0x1d, 0xa2, 0xe0, 0x86, 0x12, 0x95, 0x19, 0x27,
	0x32, 0xb6, 0x6b, 0xcb, 0x95, 0x79, 0x9e, 0xc8, 0x98, 0x13, 0x15, 0x7b, 0x07, 0xaa, 0xa9, 0x4c,
	0x52, 0xfb, 0x8d, 0xf5, 0xd2, 0x66, 0x63, 0xcb, 0x3a, 0x11, 0x5e, 0x22, 0x39, 0xa1, 0xd8, 0x9b,
	0x50, 0x16, 0xa9, 0x5d, 0x5f, 0x2f, 0x6d, 0x5a, 0x5b, 0xa5, 0x2e, 0x2f, 0x8b, 0x94, 0x31, 0xa8,
	0xa6, 0xbe, 0xb8, 0xb4, 0x1b, 0x88, 0xe4, 0xb4, 0x66, 0x77, 0xc0, 0xba, 0x48, 0xa4, 0x48, 0xed,
	0xe6, 0x7a, 0x65, 0xb3, 0xc9, 0x35, 0xc0, 0x3e, 0x85, 0xba, 0xf0, 0x3c, 0xe5, 0x47, 0x89, 0x0d,
	0xeb, 0xa5, 0xcd, 0xd5, 0xee, 0xca, 0x44, 0x91, 0x9f, 0x7a, 0x62, 0xb4, 0x55, 0xee, 0x1f, 0xf2,
	0x8c, 0x82, 0xb5, 0xa1, 0xe2, 0x8c, 0x63, 0xbb, 0x45, 0x02, 0x70, 0x89, 0x1b, 0x0d, 0x1d, 0x91,
	0xda, 0xb7, 0x08, 0x45, 0x6b, 0xc2, 0x09, 0xf7, 0xdc, 0x5e, 0x31, 0x38, 0xe1, 0x9e, 0xb3, 0x2f,
	0xa0, 0x1a, 0xcb, 0x51, 0x62, 0xaf, 0xd2, 0xcb, 0x7e, 0xb0, 0xe8, 0x65, 0xb9, 0x1c, 0x8d, 0x3d,
	0x91, 0xaa, 0x30, 0x48, 0x38, 0x11, 0xa3, 0x55, 0x93, 0x70, 0x1c, 0x3b, 0xd2, 0xbe, 0xbd, 0xdc,
	0xaa, 0x03, 0xa2, 0xe0, 0x86, 0x12, 0x9d, 0x42, 0x5e, 0xa6, 0xf6, 0xef, 0xea, 0xc4, 0x71, 0x6f,
	0x01, 0xc7, 0x6e, 0xe6, 0x8b, 0x09, 0x47, 0xd2, 0xb5, 0x7d, 0xa8, 0x69, 0x19, 0xe8, 0x60, 0x27,
	0xe8, 0x60, 0xa5, 0xcd, 0x06, 0x2f, 0x9f, 0xb8, 0xf8, 0xba, 0xa9, 0x72, 0xed, 0xf2, 0x7a, 0x09,
	0x5f, 0x37, 0x55, 0x2e, 0xbb, 0x0b, 0xb5, 0xc8, 0x39, 0x15, 0x2a, 0x20, 0x17, 0x6a, 0x72, 0x03,
	0x7d, 0x62, 0x35, 0xdc, 0xf6, 0xdf, 0xf7, 0xd7, 0xfe, 0xe6, 0x1d, 0x80, 0xdc, 0xe7, 0xe6, 0x1c,
	0xf6, 0x2b, 0xa8, 0x0d, 0x45, 0x10, 0xc8, 0x98, 0x44, 0xb6, 0xba, 0x3f, 0x78, 0xb9, 0xcf, 0x76,
	0xbe, 0x26, 0x62, 0x6e, 0x98, 0xd8, 0x16, 0x58, 0xe7, 0xca, 0x95, 0xa1, 0x71, 0xdf, 0x8f, 0xaf,
	0xe1, 0xfe, 0x05, 0xd2, 0x72, 0xcd, 0x82, 0x5b, 0x07, 0x22, 0x55, 0xe7, 0xd2, 0x5e, 0xb9, 0xd1,
	0xd6, 0x7d, 0x22, 0xe6, 0x86, 0x89, 0xfd, 0x10, 0x56, 0x5d, 0x95, 0x44, 0x9e, 0xb8, 0xf2, 0x45,
	0x20, 0x46, 0x32, 0xa6, 0x5b, 0xd1, 0xe4, 0x33, 0x58, 0xf6, 0x19, 0xbc, 0x59, 0xc4, 0x9c, 0xcb,
	0x98, 0xae, 0x44, 0x93, 0xcf, 0x3f, 0x60, 0x7f, 0x02, 0x96, 0x0a, 0x92, 0xd4, 0xa3, 0x2b, 0xb0,
	0xd0, 0xf3, 0xf4, 0x73, 0x74, 0xdd, 0x54, 0x8c, 0x94, 0x4b, 0x4e, 0xde, 0xe4, 0x1a, 0x60, 0xf7,
	0xa0, 0x31, 0x54, 0xee, 0x89, 0x17, 0x86, 0x31, 0x39, 0x7a, 0x69, 0xab, 0xf4, 0x80, 0x4f, 0x50,
	0xec, 0x07, 0xd0, 0xca, 0xd6, 0xe8, 0xb4, 0x4d, 0x64, 0xdd, 0xaa, 0x3c, 0x1f, 0xec, 0xf0, 0x69,
	0x3c, 0xdb, 0x80, 0x5b, 0xea, 0x24, 0x16, 0xbe, 0x1c, 0x8e, 0x93, 0x54, 0xc6, 0x36, 0x90, 0xd7,
	0x16, 0x70, 0xec, 0x11, 0x54, 0x22, 0x3f, 0xb2, 0x5b, 0x64, 0xba, 0x8d, 0x6b, 0x4c, 0x77, 0xf4,
	0xec, 0x88, 0x23, 0x39, 0x3a, 0x4b, 0x22, 0x9d, 0x71, 0x2c, 0xed, 0x5b, 0x74, 0x0d, 0x0d, 0x84,
	0x6e, 0x25, 0x2f, 0x23, 0xba, 0x0a, 0x16, 0xba, 0x60, 0xb4, 0xd4, 0x69, 0x73, 0xa9, 0xb3, 0x4e,
	0xfb, 0x5f, 0x55, 0xa8, 0x69, 0xf7, 0x60, 0xb7, 0xa0, 0x74, 0x41, 0x4e, 0x6b, 0xf1, 0xd2, 0x05,
	0x42, 0xa7, 0xe4, 0x5e, 0x16, 0x2f, 0x9d, 0xe2, 0x55, 0xbc, 0xc0, 0x38, 0xd0, 0xd2, 0x71, 0x00,
	0xd7, 0x88, 0x3b, 0x45, 0x9c, 0x56, 0x8a, 0xd6, 0x9a, 0x4e, 0x05, 0xe4, 0x1c, 0x44, 0xa7, 0x02,
	0x4d, 0xa7, 0x02, 0xa3, 0x27, 0xad, 0x8d, 0x47, 0x6b, 0xdf, 0x47, 0x8f, 0x1e, 0x40, 0x25, 0x0a,
	0x13, 0x72, 0x86, 0xd5, 0xee, 0xe7, 0x13, 0xbd, 0x77, 0x83, 0xb1, 0x9f, 0x2c, 0x31, 0x4f, 0xcf,
	0x3d, 0x0a, 0x13, 0x85, 0xd7, 0x7c, 0xab, 0x7d, 0x74, 0x38, 0xd8, 0x3f, 0xde, 0x3f, 0xec, 0x7f,
	0xf7, 0xbc, 0xff, 0xf3, 0xfe, 0xe1, 0xb7, 0x7d, 0x8e, 0xd2, 0xd8, 0xcf, 0xc0, 0x1a, 0xa6, 0x57,
	0x11, 0xc6, 0xd2, 0xca, 0xe6, 0x6a, 0xb7, 0x7b, 0x23, 0xb1, 0xda, 0x18, 0x9d, 0x9e, 0x7b, 0x7c,
	0x15, 0x49, 0xae, 0x05, 0xb0, 0x07, 0x60, 0x0d, 0x45, 0x9a, 0x62, 0x8c, 0x45, 0x49, 0x79, 0xfc,
	0xd8, 0x8e, 0x25, 0x39, 0x76, 0x2f, 0x4d, 0x63, 0x35, 0x1c, 0xa7, 0xc8, 0x81, 0x84, 0xe8, 0x69,
	0xbe, 0xf2, 0x65, 0x62, 0xd7, 0x75, 0x90, 0x24, 0x80, 0xdd, 0x87, 0x46, 0x1a, 0x46, 0xe4, 0x11,
	0xe4, 0x69, 0x0b, 0x7d, 0x75, 0x42, 0xc2, 0xbe, 0x85, 0x9a, 0xbc, 0x8c, 0x5c, 0x15, 0x53, 0xa8,
	0x5d, 0xed, 0xfe, 0xf9, 0xab, 0xbc, 0xc1, 0xee, 0x65, 0x24, 0x02, 0x57, 0x0c, 0x3d, 0xb9, 0xa3,
	0x62, 0xe9, 0xa0, 0xa1, 0xb8, 0x11, 0xc7, 0xb6, 0x31, 0x23, 0x29, 0x72, 0xd1, 0xd5, 0xee, 0xc3,
	0x9b, 0x99, 0x3b, 0x52, 0x3f, 0x45, 0xa5, 0x2e, 0xc2, 0xf8, 0x0c, 0x73, 0x95, 0x62, 0x9f, 0x15,
	0x9c, 0xed, 0x9d, 0xdc, 0x9b, 0x69, 0xff, 0x59, 0x47, 0xfb, 0x17, 0x00, 0x8b, 0x22, 0x49, 0x6e,
	0x9a, 0xd2, 0xb4, 0x69, 0xfe, 0x12, 0x9a, 0x9e, 0x0a, 0xa4, 0x88, 0x55, 0x7a, 0x45, 0x7e, 0xb7,
	0xda, 0x7d, 0x74, 0x23, 0xc5, 0x48, 0x68, 0xe7, 0x20, 0xe3, 0xdd, 0xaa, 0x1d, 0xec, 0xf7, 0x77,
	0x7b, 0x9c, 0xe7, 0xe2, 0xd8, 0x3a, 0xb4, 0x7c, 0x15, 0xb8, 0xe3, 0x98, 0xb2, 0x02, 0xb9, 0x9d,
	0xc5, 0xa7, 0x51, 0x44, 0x21, 0x2e, 0x27, 0x14, 0x55, 0x43, 0x91, 0xa3, 0xd8, 0x37, 0xd0, 0xa4,
	0x62, 0xc2, 0x09, 0xbd, 0xc4, 0x38, 0xd4, 0x17, 0xaf, 0xa0, 0xdf, 0x91, 0xe1, 0xe5, 0xb9, 0x14,
	0x7d, 0xe1, 0x6a, 0x85, 0x0b, 0x57, 0xcf, 0x2e, 0xdc, 0x06, 0x40, 0x92, 0x8a, 0x38, 0x75, 0xa5,
	0x27, 0xae, 0x74, 0xfa, 0xdd, 0x2a, 0xdf, 0xff, 0x82, 0x4f, 0x61, 0x31, 0x6e, 0x25, 0xb8, 0x5f,
	0xe0, 0x48, 0x8a, 0x4a, 0xd6, 0x56, 0xe9, 0x21, 0x9f, 0xa0, 0x72, 0xa7, 0x85, 0x9b, 0x3a, 0xed,
	0x47, 0x64, 0x05, 0xaa, 0xb1, 0x5c, 0xe9, 0xea, 0xcb, 0x8e, 0xb1, 0x70, 0x1a, 0xcb, 0xde, 0x07,
	0xf0, 0x55, 0x30, 0x54, 0x69, 0x2c, 0xd2, 0x2c, 0x22, 0x4d, 0x61, 0xe8, 0xb9, 0xb8, 0xcc, 0x9e,
	0xaf, 0x98, 0xe7, 0x13, 0x0c, 0x7b, 0x0a, 0x2b, 0xc3, 0xf0, 0x52, 0x05, 0x23, 0xe1, 0x79, 0xe1,
	0x85, 0x74, 0x29, 0x2e, 0xcc, 0x5d, 0x84, 0xca, 0x2f, 0x77, 0x07, 0xbc, 0x48, 0xc8, 0x04, 0xac,
	0x62, 0xe0, 0x1f, 0x0a, 0xe7, 0xcc, 0x97, 0xe9, 0x69, 0xe8, 0xda, 0x6f, 0xd0, 0x9b, 0x7d, 0xf9,
	0x2a, 0xe7, 0x60, 0x04, 0x3c, 0x23, 0x01, 0x7c, 0x46, 0x20, 0xfb, 0x05, 0x34, 0x5c, 0xe9, 0xa9,
	0x73, 0x19, 0x5f, 0xd9, 0x6d, 0x12, 0xbe, 0xf5, 0x0a, 0xc2, 0xb7, 0xc3, 0x20, 0x95, 0x41, 0xba,
	0x63, 0x24, 0xf0, 0x89, 0xac, 0x2c, 0xbe, 0xbd, 0xf9, 0x07, 0x8d, 0x6f, 0x7b, 0xd0, 0x72, 0x42,
	0x3f, 0x12, 0x81, 0x0a, 0x03, 0xe1, 0xda, 0x8c, 0xea, 0xd7, 0x1b, 0xd6, 0x02, 0xd3, 0x9c, 0x59,
	0x38, 0xb8, 0xfd, 0x7b, 0x85, 0x83, 0x5f, 0xc1, 0xca, 0x44, 0x26, 0x45, 0xdd, 0x3b, 0x24, 0xee,
	0xe9, 0x2b, 0xd9, 0xcf, 0xf0, 0x53, 0xec, 0x2d, 0x8a, 0x63, 0x7f, 0x05, 0xcd, 0xc8, 0x13, 0x8e,
	0xf4, 0x65, 0x90, 0xda, 0x6b, 0x64, 0xc8, 0xaf, 0x5e, 0x41, 0x36, 0xfd, 0x7f, 0x94, 0x09, 0xa0,
	0x0d, 0x72, 0x79, 0x6c, 0x08, 0xad, 0xcc, 0x13, 0x64, 0xe0, 0xda, 0xef, 0x92, 0xf8, 0x9f, 0xbc,
	0x86, 0x5f, 0x6d, 0xcb, 0x24, 0xa1, 0x80, 0xf1, 0x2c, 0x74, 0x25, 0x9f, 0x16, 0xca, 0x3e, 0x2d,
	0xc4, 0xcb, 0xbc, 0x4e, 0x27, 0x01, 0xb3, 0xe1, 0xf2, 0x7f, 0x4b, 0x50, 0xd3, 0xb5, 0x13, 0x7b,
	0x00, 0xf5, 0x58, 0x6f, 0x4b, 0x25, 0x60, 0xab, 0x7b, 0x77, 0xc2, 0x6a, 0xaa, 0x2b, 0xfd, 0x94,
	0x67, 0x64, 0x58, 0x18, 0x9c, 0x9b, 0xe2, 0xb0, 0xc9, 0x71, 0xc9, 0xf6, 0xf4, 0x09, 0x57, 0x5e,
	0xf3, 0x84, 0xbf, 0x2e, 0xb7, 0x4b, 0xfa, 0x94, 0x1f, 0x65, 0x41, 0xa5, 0x7a, 0x5d, 0x50, 0x21,
	0x1e, 0x13, 0x58, 0x96, 0xa5, 0x0a, 0xad, 0xff, 0xec, 0xbb, 0xff, 0xba, 0x02, 0x95, 0xa3, 0x67,
	0x47, 0xec, 0x09, 0xbc, 0x11, 0xc5, 0xea, 0x5c, 0xa4, 0xf2, 0x3b, 0x31, 0xa6, 0x04, 0x46, 0xe5,
	0xc9, 0x6c, 0xac, 0xe0, 0xab, 0x86, 0xaa, 0xa7, 0x89, 0xd8, 0x36, 0x58, 0xae, 0x14, 0x5e, 0x62,
	0x3a, 0xba, 0xfb, 0xd7, 0xd7, 0x59, 0x1d, 0x9d, 0x22, 0x77, 0xa4, 0xf0, 0xb8, 0xe6, 0xc5, 0xa6,
	0x6d, 0x4a, 0xe5, 0xdc, 0xe4, 0x47, 0xcf, 0x8e, 0x66, 0xf5, 0xfd, 0x8f, 0x12, 0x40, 0x2e, 0x60,
	0xae, 0x5a, 0x9f, 0x2e, 0x2f, 0xcb, 0xd7, 0x96, 0x97, 0x95, 0x25, 0xe5, 0xe5, 0xa4, 0xeb, 0xaa,
	0x4e, 0x77, 0x5d, 0x6b, 0xd0, 0xb8, 0x10, 0x6e, 0xe8, 0x63, 0x27, 0x61, 0xd1, 0x83, 0x09, 0x8c,
	0x7a, 0x88, 0xd4, 0xe4, 0x17, 0xec, 0xe5, 0x96, 0x15, 0x87, 0xb9, 0xea, 0xb3, 0x2f, 0xf6, 0xef,
	0x15, 0xa8, 0x62, 0x1f, 0x3b, 0x79, 0xa5, 0xac, 0x5c, 0x63, 0x50, 0x0d, 0xb0, 0x86, 0xd1, 0x1e,
	0x46, 0x6b, 0xac, 0x52, 0x8d, 0x22, 0xa6, 0xa5, 0x31, 0x6a, 0x60, 0xaf, 0x37, 0x51, 0x1b, 0x97,
	0x98, 0x21, 0x12, 0x5d, 0x90, 0xe0, 0x03, 0xad, 0xf6, 0x14, 0x86, 0xd9, 0x50, 0x8f, 0xc4, 0x48,
	0x3a, 0xa4, 0x3d, 0x3e, 0xcc, 0x40, 0xdc, 0x17, 0x97, 0xa6, 0x7c, 0xa7, 0x35, 0xfb, 0x02, 0x56,
	0xe8, 0xfc, 0x9d, 0xab, 0x28, 0xf4, 0x94, 0x73, 0xb5, 0xb0, 0xb0, 0xe2, 0x45, 0x1a, 0x54, 0x2a,
	0x96, 0x27, 0xd4, 0xa9, 0x36, 0x39, 0x2e, 0x75, 0x91, 0x2d, 0x62, 0xe7, 0x94, 0xd2, 0x5e, 0x93,
	0x1b, 0x08, 0xf1, 0x7e, 0x38, 0x54, 0x9e, 0xd4, 0x1d, 0x33, 0x37, 0x10, 0xfb, 0x31, 0x34, 0xa3,
	0xf1, 0xd0, 0x53, 0xc9, 0xa9, 0x8c, 0x29, 0x0b, 0x2e, 0x6e, 0x12, 0x3b, 0x47, 0x19, 0x11, 0xcf,
	0xe9, 0xd9, 0x63, 0xa8, 0x3b, 0x3a, 0x57, 0x98, 0x36, 0xea, 0xdd, 0x45, 0xac, 0x26, 0x9d, 0xf0,
	0x8c, 0x16, 0x4f, 0xfb, 0x4c, 0x5e, 0x5d, 0x84, 0xb1, 0xab, 0x1b, 0xe0, 0x26, 0x9f, 0xc0, 0xec,
	0x93, 0xc2, 0xe9, 0xe6, 0x53, 0x06, 0x3c, 0xbf, 0xd9, 0x73, 0xfd, 0xef, 0x0a, 0x54, 0x7a, 0x51,
	0xc4, 0x58, 0x7e, 0xac, 0x5b, 0xe5, 0xfb, 0x0f, 0xe9, 0x68, 0xef, 0x4e, 0x1f, 0x2d, 0x61, 0xff,
	0x78, 0xc7, 0x6b, 0xe2, 0x56, 0x3d, 0x8f, 0x5b, 0x6b, 0x50, 0x1b, 0x8e, 0x03, 0xd7, 0xd3, 0xe5,
	0xb2, 0xd6, 0xc7, 0x60, 0xe6, 0x0f, 0xbe, 0x79, 0x83, 0x83, 0xff, 0x10, 0x3d, 0x48, 0xb9, 0x0b,
	0x67, 0x14, 0x9c, 0x1e, 0x15, 0x4f, 0xb6, 0xf5, 0xfa, 0x27, 0x7b, 0xeb, 0x35, 0x4f, 0x76, 0x65,
	0xe6, 0x64, 0xd7, 0xa0, 0x91, 0xa4, 0x61, 0x2c, 0xc7, 0xb1, 0x97, 0x9d, 0x7a, 0x06, 0x2f, 0x8d,
	0x52, 0xbd, 0x28, 0x9a, 0x8b, 0x52, 0x35, 0xa8, 0x9b, 0x7d, 0xe7, 0xee, 0xb3, 0x0d, 0x75, 0x19,
	0xa9, 0x24, 0x74, 0xa5, 0x69, 0xf9, 0x32, 0x90, 0x3a, 0x66, 0x95, 0x7a, 0xd2, 0x9c, 0xba, 0x06,
	0xf4, 0x65, 0x89, 0x95, 0x4c, 0x4c, 0xfb, 0x6e, 0x20, 0x73, 0x89, 0x92, 0x30, 0x30, 0xbd, 0xba,
	0x81, 0xf0, 0x60, 0x51, 0xfb, 0x9a, 0x3e, 0x58, 0x54, 0xdc, 0xb8, 0x4d, 0x3d, 0x77, 0x1b, 0x0e,
	0xb7, 0x68, 0xc4, 0xf0, 0x62, 0x2c, 0x3c, 0xec, 0x01, 0xf4, 0x35, 0xee, 0x2c, 0xcf, 0x55, 0xe6,
	0x65, 0x74, 0xfe, 0xfc, 0x46, 0x73, 0xf1, 0x82, 0x8c, 0x82, 0x59, 0x9b, 0x33, 0x66, 0xfd, 0x18,
	0xeb, 0x15, 0x92, 0x80, 0x15, 0x7e, 0x30, 0x32, 0xc1, 0xa0, 0x88, 0x44, 0x67, 0x1e, 0x27, 0x32,
	0x36, 0x24, 0x3a, 0x34, 0x4c, 0x61, 0xd8, 0xb6, 0x39, 0xef, 0x4b, 0x7d, 0xde, 0xab, 0xdd, 0x1f,
	0x5d, 0xaf, 0xf0, 0xb6, 0x66, 0xe0, 0x19, 0x27, 0xbb, 0x0f, 0x80, 0x75, 0x62, 0x92, 0xc6, 0x52,
	0xf8, 0x74, 0xfe, 0x73, 0xae, 0x39, 0x45, 0xc0, 0x5c, 0x60, 0x7a, 0x48, 0x15, 0x4b, 0x33, 0xe7,
	0x3a, 0x55, 0x91, 0x29, 0xa3, 0x1f, 0x5d, 0xbf, 0xbd, 0x19, 0x74, 0x4d, 0xf1, 0xf2, 0x05, 0xf2,
	0xd8, 0x53, 0x68, 0x44, 0x71, 0xe8, 0x8e, 0x1d, 0x19, 0x53, 0xe8, 0x6b, 0x75, 0xdf, 0x5b, 0x78,
	0x0b, 0x0c, 0x0d, 0x9f, 0x50, 0xe3, 0xd9, 0x7a, 0x32, 0xb0, 0xdb, 0x7a, 0x2e, 0xe1, 0xc9, 0x00,
	0x2b, 0xf7, 0x17, 0x62, 0xe4, 0x4b, 0x57, 0x09, 0x63, 0x49, 0x5d, 0x09, 0x3f, 0xb8, 0x5e, 0xdb,
	0x6f, 0x7a, 0x7b, 0xcf, 0x90, 0x8f, 0x13, 0xdf, 0x56, 0x3d, 0xab, 0x80, 0x67, 0x04, 0xa2, 0x0d,
	0xa5, 0x3f, 0x94, 0x2e, 0x75, 0xbc, 0x36, 0x5b, 0x68, 0xc3, 0x9c, 0x00, 0x3d, 0xc3, 0x13, 0xc1,
	0x68, 0x8c, 0xd9, 0xe4, 0xb6, 0xf6, 0x8c, 0x0c, 0x66, 0xf7, 0x0b, 0x97, 0x6a, 0xaa, 0xc4, 0xd1,
	0x2a, 0xcd, 0x5e, 0xac, 0xbf, 0xad, 0x43, 0x4d, 0x8f, 0x64, 0xd9, 0x07, 0x50, 0x71, 0x83, 0x74,
	0x71, 0x95, 0x82, 0x4f, 0xf0, 0xe2, 0x8d, 0x85, 0x49, 0x9b, 0xe5, 0xb1, 0x60, 0x6f, 0x43, 0x59,
	0x45, 0x26, 0xe7, 0xd7, 0x1f, 0x74, 0xe8, 0x1f, 0x2f, 0xab, 0x08, 0x2f, 0xf6, 0x48, 0x86, 0x2f,
	0x9b, 0x19, 0xef, 0xc9, 0x90, 0x23, 0x0d, 0x5e, 0x5e, 0x57, 0xb9, 0xc9, 0xa9, 0x78, 0x68, 0x6e,
	0x5d, 0x06, 0x52, 0xcc, 0x56, 0xae, 0xef, 0x3e, 0x36, 0x37, 0xcf, 0x40, 0xf8, 0xf2, 0x6e, 0x64,
	0x58, 0x74, 0xb0, 0x9d, 0xc0, 0x24, 0x2d, 0xd2, 0x4c, 0x0d, 0x23, 0x4d, 0x83, 0x98, 0x7c, 0x55,
	0x74, 0xfe, 0xc4, 0x5c, 0x24, 0x5a, 0xb3, 0xf7, 0xa0, 0xee, 0x88, 0x38, 0x56, 0x34, 0xef, 0xca,
	0x02, 0x74, 0x86, 0x2a, 0x18, 0xb9, 0x35, 0x63, 0xe4, 0xbb, 0x50, 0xf5, 0xc5, 0x99, 0x6e, 0x20,
	0x4d, 0x9e, 0x41, 0x98, 0xd9, 0x60, 0xf9, 0xa1, 0x2b, 0x3d, 0x1d, 0x06, 0xe9, 0x81, 0x46, 0x60,
	0xb6, 0x0a, 0x4d, 0xde, 0xd3, 0xd9, 0x2a, 0x4c, 0xd8, 0x1d, 0xa8, 0x84, 0xc9, 0x39, 0xf9, 0xa7,
	0x46, 0x22, 0xc8, 0x36, 0xa0, 0xfc, 0x7d, 0x42, 0xfe, 0xb7, 0xb8, 0xaf, 0x2c, 0x7f, 0x9f, 0xb0,
	0x33, 0x58, 0x75, 0xc2, 0x20, 0xd0, 0x69, 0x89, 0xfa, 0x95, 0x6b, 0x9b, 0x33, 0x7d, 0xc8, 0xe8,
	0x06, 0x86, 0x0d, 0xbb, 0x88, 0x2d, 0xb6, 0x7d, 0xd8, 0xef, 0xef, 0x6e, 0x17, 0xda, 0xb3, 0x19,
	0xd1, 0xec, 0x18, 0x40, 0x0f, 0xeb, 0x69, 0x23, 0xed, 0x9c, 0x9f, 0x5e, 0xbb, 0x91, 0xfe, 0x43,
	0x9b, 0x4c, 0xdc, 0x7e, 0x4a, 0x0e, 0x9a, 0xf7, 0xc4, 0x13, 0xc9, 0x29, 0xe6, 0x4c, 0xe3, 0xc3,
	0x19, 0x4c, 0x77, 0xd0, 0x4f, 0xed, 0x3b, 0x54, 0xb3, 0xe0, 0x12, 0x31, 0xa7, 0x17, 0xe7, 0xf6,
	0x5b, 0x3a, 0x06, 0x9f, 0x5e, 0x9c, 0xeb, 0xf9, 0xc3, 0xdd, 0xc2, 0xfc, 0xe1, 0xed, 0x6c, 0xfe,
	0xd0, 0x86, 0x4a, 0x14, 0x29, 0xdb, 0xd6, 0x77, 0x38, 0x8a, 0x14, 0xa5, 0xed, 0x4b, 0x1a, 0x86,
	0xd8, 0xef, 0x60, 0x15, 0xcb, 0x33, 0x10, 0x69, 0xd5, 0x89, 0xa0, 0x9e, 0xac, 0xc9, 0x71, 0x89,
	0xb4, 0xbe, 0x70, 0xc8, 0xbf, 0xde, 0xd5, 0x4e, 0x64, 0x40, 0x2a, 0xa7, 0x84, 0x83, 0xde, 0xf5,
	0x9e, 0x76, 0x49, 0x0d, 0x11, 0xde, 0x71, 0xfc, 0xc0, 0xb1, 0xdf, 0x37, 0x78, 0x82, 0x96, 0x76,
	0x0e, 0xda, 0x36, 0xb3, 0x57, 0xf1, 0x1f, 0xcb, 0x50, 0x7d, 0x9e, 0xc8, 0x78, 0x2e, 0xc1, 0xad,
	0x41, 0x63, 0x38, 0xbe, 0x92, 0xf1, 0x78, 0x32, 0x86, 0x9f, 0xc0, 0xa8, 0xfe, 0x55, 0x38, 0x34,
	0x53, 0x21, 0x5c, 0xa2, 0x32, 0x23, 0x19, 0xb8, 0x93, 0xe9, 0xb4, 0x81, 0x0a, 0xe9, 0xc4, 0x9a,
	0x49, 0x27, 0xef, 0x03, 0x38, 0xe3, 0x24, 0x0d, 0x7d, 0x57, 0xa4, 0xc2, 0xdc, 0xb7, 0x29, 0x4c,
	0x76, 0xa1, 0xeb, 0x37, 0xb8, 0xd0, 0x9f, 0x41, 0x95, 0x84, 0x34, 0xa8, 0x7d, 0x59, 0xf8, 0x41,
	0x67, 0x47, 0xa4, 0x82, 0x13, 0xd5, 0xd2, 0xc2, 0x0f, 0xed, 0x30, 0x6b, 0x9f, 0xbf, 0x2b, 0x41,
	0x73, 0x52, 0xb6, 0xdc, 0xa8, 0xaa, 0x37, 0x79, 0xba, 0x92, 0xe7, 0xe9, 0xbc, 0x10, 0xac, 0x16,
	0x0a, 0xc1, 0xcf, 0x0b, 0x7a, 0xe4, 0xb9, 0x62, 0xb2, 0xdf, 0x5c, 0xdc, 0x2c, 0x41, 0x23, 0xcb,
	0x1e, 0x7f, 0x60, 0x5d, 0x3a, 0x05, 0x5d, 0xf2, 0x12, 0x2c, 0xdb, 0x6e, 0x56, 0x95, 0xdf, 0x94,
	0xa1, 0xb2, 0x27, 0xc9, 0x93, 0x3d, 0xa1, 0xe3, 0x77, 0x89, 0xe3, 0x92, 0x30, 0x61, 0xa0, 0xfb,
	0x36, 0x8e, 0x4b, 0xf4, 0x6d, 0x27, 0x1c, 0x07, 0x69, 0x7c, 0x65, 0x6a, 0xa2, 0x0c, 0x44, 0x6d,
	0x62, 0x39, 0xca, 0xe6, 0x87, 0x4d, 0x6e, 0x20, 0xac, 0x34, 0xf4, 0xea, 0x44, 0x45, 0xc9, 0xc3,
	0x07, 0x8f, 0x8c, 0xef, 0x14, 0x91, 0x34, 0x16, 0x95, 0x69, 0x1c, 0x1a, 0xdf, 0xd1, 0x00, 0xda,
	0xc1, 0xc1, 0x6a, 0xc8, 0x74, 0x3c, 0xb8, 0x46, 0x9d, 0xfe, 0x5a, 0x45, 0x26, 0x3c, 0xe3, 0x92,
	0xfd, 0x19, 0x54, 0x29, 0xb2, 0xe8, 0x0a, 0xf8, 0x93, 0xe5, 0x91, 0x65, 0x4f, 0x86, 0x9d, 0x83,
	0xd0, 0x11, 0x59, 0xf4, 0xe2, 0xc4, 0xc7, 0xde, 0x83, 0xe6, 0x38, 0x75, 0xc2, 0x93, 0x93, 0x44,
	0xa6, 0x14, 0xc8, 0x2d, 0x9e, 0x23, 0x96, 0x16, 0x99, 0x7b, 0xf3, 0x63, 0x8b, 0x5f, 0x97, 0xa1,
	0x8a, 0xbe, 0x79, 0xa3, 0xf3, 0xdc, 0x82, 0x7a, 0x22, 0x47, 0x34, 0xcf, 0xa9, 0x90, 0xab, 0xaf,
	0x2f, 0x73, 0xf5, 0xce, 0x40, 0xd3, 0xf1, 0x8c, 0x61, 0xa9, 0xd7, 0x23, 0xf5, 0xac, 0x52, 0x31,
	0xd4, 0x0d, 0xff, 0x8d, 0xd4, 0xba, 0x03, 0xd6, 0xb9, 0xf0, 0xc6, 0x93, 0x92, 0x97, 0x80, 0xa5,
	0x45, 0x81, 0x91, 0x3c, 0xbb, 0xa7, 0x84, 0xd6, 0xd4, 0x77, 0x48, 0xf6, 0x11, 0x58, 0x4e, 0x18,
	0x45, 0x62, 0x71, 0x69, 0xa0, 0x9f, 0xb1, 0x87, 0x85, 0x2d, 0xf2, 0x0f, 0xd1, 0x53, 0x82, 0x66,
	0xb6, 0xd9, 0xf8, 0xbf, 0x1a, 0xb4, 0xc8, 0x56, 0x49, 0x14, 0x06, 0xc9, 0x7c, 0xa3, 0xfe, 0x04,
	0x4d, 0x2c, 0xd2, 0x21, 0x85, 0xbd, 0xca, 0x7c, 0x0d, 0xa7, 0xd9, 0x3a, 0x03, 0x29, 0x52, 0x84,
	0x33, 0x62, 0xb4, 0xc1, 0x50, 0xb9, 0x93, 0x4f, 0x34, 0x1a, 0x60, 0x6f, 0xe9, 0xcf, 0xb6, 0xd5,
	0x7c, 0x44, 0x41, 0xdf, 0x6e, 0x8b, 0xa1, 0xcf, 0x9a, 0x0b, 0x7d, 0x4f, 0xa1, 0x12, 0x0c, 0x63,
	0xf3, 0x71, 0xee, 0x87, 0x8b, 0x9c, 0xd3, 0xa8, 0xd1, 0x0f, 0x09, 0xc2, 0x96, 0x81, 0x23, 0xcb,
	0x52, 0x8b, 0x4c, 0x31, 0xcd, 0x1a, 0xfe, 0x77, 0x55, 0x3c, 0x6d, 0x7a, 0x1d, 0xd6, 0x85, 0xca,
	0x90, 0xcc, 0xb1, 0xc0, 0xb9, 0x8a, 0x6f, 0x4e, 0x38, 0x24, 0x46, 0x8f, 0xa0, 0x31, 0x8b, 0xf1,
	0x08, 0x9a, 0xb2, 0x7c, 0x04, 0xd6, 0x28, 0x0e, 0xc7, 0xba, 0x50, 0x9b, 0x3f, 0x3d, 0x7a, 0xf6,
	0x12, 0x07, 0xa1, 0x1d, 0x66, 0xf5, 0xfc, 0xb7, 0x0a, 0x54, 0x50, 0xc7, 0xd9, 0x69, 0xd1, 0x1d,
	0xb0, 0x94, 0x1f, 0xd1, 0x79, 0x21, 0x4a, 0x03, 0x88, 0x8d, 0x62, 0xe5, 0xa0, 0x4f, 0x96, 0x37,
	0x4b, 0x5c, 0x03, 0xa8, 0xab, 0xc0, 0x43, 0xd2, 0xe1, 0x86, 0xd6, 0xe4, 0xd1, 0xd8, 0x6b, 0x59,
	0xc6, 0xa3, 0x4d, 0xb3, 0x25, 0x5c, 0x3f, 0x6b, 0xbf, 0x84, 0xeb, 0xb3, 0x27, 0x00, 0xc2, 0xf5,
	0xbf, 0x33, 0x9f, 0x72, 0xbb, 0x33, 0x97, 0x28, 0x1b, 0x2b, 0x6a, 0x1b, 0xf1, 0xa6, 0x70, 0x7d,
	0x33, 0x8b, 0xb4, 0xa1, 0x9e, 0x8d, 0x9b, 0x74, 0xeb, 0x96, 0x81, 0x18, 0xfc, 0x4c, 0xa7, 0xfe,
	0x86, 0x0e, 0x7e, 0xa6, 0x4b, 0xc7, 0xaa, 0x11, 0xf5, 0x69, 0x98, 0xaa, 0x31, 0x6b, 0xfe, 0x94,
	0x6b, 0x0a, 0x49, 0x5c, 0x52, 0x98, 0x8b, 0x4d, 0x5b, 0x8e, 0x61, 0x2e, 0xd6, 0x79, 0x19, 0xc3,
	0x7d, 0x3b, 0x0f, 0xf7, 0x1d, 0xa8, 0xd2, 0xec, 0xb1, 0x75, 0xed, 0x07, 0x0d, 0xa2, 0xa3, 0xf4,
	0x20, 0x85, 0xa7, 0x5c, 0x5d, 0x65, 0x72, 0x03, 0xe9, 0xc2, 0x67, 0xa5, 0x50, 0xf8, 0xac, 0x66,
	0x85, 0xcf, 0xb2, 0x60, 0x37, 0x7f, 0x84, 0x1b, 0xff, 0xdc, 0x82, 0x95, 0xc2, 0x04, 0x36, 0x1b,
	0x60, 0x94, 0xf2, 0x01, 0xc6, 0x00, 0x6a, 0x9e, 0xb8, 0x0a, 0xc7, 0xa9, 0xf9, 0xa6, 0xf5, 0xe3,
	0x1b, 0xcd, 0x5e, 0x0b, 0x52, 0x3b, 0x07, 0x24, 0x60, 0xdf, 0xe5, 0x46, 0x14, 0x0a, 0x15, 0xee,
	0x38, 0x50, 0xa9, 0x71, 0xc8, 0xd7, 0x11, 0xda, 0x73, 0x9f, 0x07, 0x8a, 0x84, 0x6a, 0x51, 0xec,
	0x1e, 0x34, 0x22, 0xcf, 0xf1, 0x53, 0x27, 0x48, 0xf5, 0xf7, 0x2f, 0xfa, 0x9a, 0x94, 0xa1, 0xd8,
	0x6d, 0xa8, 0x24, 0xf2, 0x05, 0xb9, 0x15, 0x7d, 0x13, 0x42, 0x88, 0x3d, 0x82, 0x9a, 0x48, 0x12,
	0x99, 0x26, 0x34, 0xc9, 0x99, 0x8e, 0x2e, 0x33, 0x9b, 0x21, 0x11, 0x37, 0xb4, 0xec, 0x38, 0xef,
	0x99, 0xeb, 0xa4, 0xff, 0xd6, 0x6b, 0xe8, 0x3f, 0xd7, 0x44, 0x2b, 0x2a, 0xe8, 0x71, 0x99, 0x8c,
	0xf5, 0x67, 0x5f, 0x3d, 0x41, 0xe8, 0xbd, 0xbe, 0xf0, 0x81, 0x16, 0xc4, 0x67, 0x04, 0xb3, 0x5f,
	0x41, 0x93, 0xec, 0x32, 0x95, 0x73, 0x7f, 0xf2, 0x1a, 0xbb, 0xcc, 0x7d, 0x8d, 0x30, 0x22, 0xd7,
	0x7e, 0x53, 0x03, 0x8b, 0x4c, 0x36, 0x15, 0x1d, 0x2c, 0x8a, 0x0e, 0x1f, 0x42, 0x23, 0x96, 0x2f,
	0xc6, 0x2a, 0x96, 0xba, 0x8e, 0x9d, 0xfc, 0x82, 0x67, 0x82, 0x66, 0x4f, 0xa7, 0x27, 0x36, 0xd3,
	0xbf, 0x32, 0x58, 0x70, 0x24, 0x9d, 0x63, 0xa4, 0xcc, 0xa6, 0x3a, 0x8f, 0xa0, 0xa2, 0xfc, 0x91,
	0xe9, 0x39, 0x5f, 0xce, 0xb7, 0xef, 0x8b, 0x91, 0xe4, 0x48, 0x9e, 0xff, 0x9a, 0xc4, 0x7a, 0xf5,
	0x5f, 0x93, 0x3c, 0x36, 0x95, 0xae, 0xfe, 0xe9, 0xd2, 0x87, 0x2f, 0xdd, 0x32, 0x2f, 0x79, 0xd7,
	0xd6, 0xc1, 0x22, 0xc5, 0xb3, 0x49, 0x83, 0xb6, 0x0f, 0x2e, 0xb3, 0x1f, 0xd0, 0xfc, 0x67, 0x09,
	0x2c, 0xd2, 0x91, 0xed, 0x9a, 0xd2, 0x48, 0x27, 0xde, 0x87, 0xd7, 0xbf, 0x95, 0xfe, 0x9f, 0x10,
	0x53, 0x15, 0x12, 0x85, 0x8c, 0x72, 0x21, 0x64, 0x54, 0x0a, 0x3f, 0x8e, 0x50, 0xd9, 0x57, 0xe3,
	0xe2, 0x8f, 0x1e, 0xac, 0xa9, 0x1f, 0x3d, 0x4c, 0x3e, 0x7c, 0xd7, 0xa6, 0x3e, 0x7c, 0x6f, 0x74,
	0x60, 0xb5, 0xb8, 0x23, 0x6b, 0x40, 0x75, 0x7f, 0xfb, 0xb0, 0xdf, 0x2e, 0xe1, 0xea, 0xe0, 0x70,
	0xef, 0xb0, 0x5d, 0xc6, 0xd5, 0xb3, 0xde, 0x7e, 0xbf, 0x5d, 0xc9, 0xde, 0xf0, 0x1f, 0xb2, 0x4a,
	0x6b, 0xbb, 0xf0, 0x82, 0x9f, 0x5f, 0x6b, 0x43, 0xfa, 0x6f, 0xf6, 0xf5, 0x8c, 0x21, 0xcb, 0x93,
	0x91, 0xcd, 0xc6, 0xbf, 0x96, 0x60, 0xa5, 0x40, 0xc9, 0x56, 0xa0, 0x39, 0x38, 0x3a, 0xec, 0x0f,
	0x0e, 0xf9, 0xee, 0x8e, 0xd6, 0x6d, 0x67, 0x77, 0xb0, 0xdd, 0x2e, 0x33, 0x80, 0x1a, 0xef, 0x1d,
	0xef, 0xf7, 0xf7, 0xda, 0x15, 0xd6, 0x04, 0xeb, 0x60, 0xff, 0xe7, 0xbb, 0x83, 0x76, 0x15, 0xe9,
	0x77, 0x0e, 0xbf, 0xed, 0x1f, 0x1c, 0xf6, 0x76, 0x06, 0x6d, 0x0b, 0x9f, 0x1c, 0xf1, 0xfd, 0xed,
	0xdd, 0x76, 0x8d, 0x24, 0xf5, 0x0e, 0x76, 0x35, 0x58, 0xa7, 0x27, 0x3f, 0x3b, 0xec, 0xef, 0xb6,
	0x1b, 0xac, 0x05, 0xf5, 0xde, 0xce, 0x0e, 0xdf, 0x1d, 0x0c, 0xda, 0x4d, 0xc4, 0xe3, 0x0e, 0xdd,
	0x36, 0xb0, 0x55, 0x80, 0x9d, 0xfd, 0xc1, 0xd1, 0x41, 0xef, 0x97, 0xcf, 0xf9, 0x41, 0xbb, 0x85,
	0x74, 0xdb, 0xc7, 0xbd, 0xe3, 0xdd, 0xbf, 0x38, 0x6e, 0xdf, 0x62, 0x00, 0xd6, 0xe0, 0xf8, 0x90,
	0xef, 0xb6, 0xff, 0x27, 0xb3, 0x4e, 0xf1, 0xcf, 0xc6, 0x6f, 0x6b, 0xb0, 0x5a, 0xcc, 0x69, 0x0b,
	0x22, 0xf5, 0xe3, 0x49, 0x2c, 0xd3, 0x95, 0xd2, 0xbd, 0x25, 0xe9, 0x70, 0x26, 0x98, 0x3d, 0x80,
	0xaa, 0xa7, 0x82, 0x33, 0x4a, 0xcc, 0x8b, 0x02, 0xa0, 0x61, 0x3a, 0x50, 0xc1, 0x19, 0x27, 0x4a,
	0xb6, 0x0e, 0x2d, 0xe5, 0x47, 0x69, 0x2c, 0x9c, 0x33, 0x19, 0x27, 0x66, 0x72, 0x3e, 0x8d, 0xc2,
	0x72, 0xfc, 0xfb, 0xc4, 0x40, 0x26, 0x91, 0xe7, 0x88, 0x35, 0x01, 0x55, 0x94, 0x96, 0x0d, 0x55,
	0x4b, 0xf9, 0x50, 0xf5, 0x63, 0x58, 0x71, 0x3c, 0xe5, 0x9c, 0x4d, 0x64, 0x97, 0x49, 0x76, 0x11,
	0x49, 0x63, 0x03, 0xe1, 0x79, 0x43, 0xe1, 0x9c, 0x99, 0xf2, 0x6e, 0x02, 0x67, 0xce, 0xf5, 0x4f,
	0xd5, 0xdf, 0x23, 0x00, 0x7d, 0x59, 0x0c, 0x40, 0x1f, 0xbd, 0xd4, 0x8e, 0xc5, 0x08, 0xf4, 0x78,
	0x3a, 0x02, 0x5d, 0xc3, 0x38, 0x15, 0x82, 0xbe, 0x2c, 0x86, 0xa0, 0x6b, 0x18, 0x0b, 0x11, 0xe8,
	0x49, 0x21, 0x02, 0x6d, 0xbc, 0x9c, 0x73, 0xaa, 0xeb, 0xce, 0x8e, 0x7d, 0xb6, 0xdb, 0x5d, 0x7a,
	0xec, 0x6b, 0x1b, 0x59, 0xd0, 0x62, 0x50, 0xa5, 0xdc, 0xa7, 0x6b, 0x3e, 0x5a, 0x67, 0x76, 0xff,
	0xd3, 0x2c, 0x6a, 0xcd, 0x9f, 0xed, 0x4b, 0x02, 0x50, 0xc6, 0xfd, 0xa5, 0x89, 0x08, 0x77, 0xc0,
	0xf2, 0xc4, 0x50, 0x66, 0xec, 0x1a, 0xc8, 0xdb, 0x1a, 0x53, 0x58, 0x12, 0x90, 0xb1, 0x6e, 0x66,
	0x3f, 0xce, 0xb1, 0xa1, 0x7e, 0x2e, 0x92, 0x34, 0x15, 0x23, 0xf3, 0xf3, 0x9c, 0x0c, 0x5c, 0x78,
	0xb3, 0xbe, 0x7e, 0x0b, 0x6e, 0x3b, 0xa1, 0xdf, 0x31, 0xbf, 0xc2, 0xcd, 0xac, 0xf0, 0xff, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x6d, 0xd1, 0xc4, 0x8a, 0xe0, 0x2b, 0x00, 0x00,
}
